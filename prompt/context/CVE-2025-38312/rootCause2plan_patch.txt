You are a senior static-analysis engineer and CodeQL design expert.
Task: Based only on the supplied materials, produce a human-readable detection plan (natural-language) for a CodeQL checker that would detect the same class of vulnerability described. DO NOT produce any query code or pseudocode — the output must be purely natural language steps and rationale.

Rules:
1. Only use evidence contained in the sections labeled [PATCH_DESCRIPTION], [PATCH_DIFF], and [ROOTCAUSE_ANALYSIS]. Do not invent facts.
2. The plan must be a step-by-step detection strategy in natural language (numbered steps). No code, no query snippets, no regex, no domain-specific language.
3. Each step must state: objective, signals to look for (AST/semantic patterns expressed conceptually), why it maps to the root cause, and how to reduce false positives.
4. Include a short test/validation strategy (what sample cases to run and expected outcomes).
5. List limitations and assumptions (what is Not determinable from inputs).
6. Keep the plan concise: overall ≤ 12 numbered steps and each step ≤ 2 concise sentences. Use bullets where helpful.
7. If information required to design an accurate checker is missing, state it explicitly under "Limitations & Assumptions".

[META]
CVE_NAME: CVE-2025-38312

[INFO]
[PATCH_DESCRIPTION]
    fbdev: core: fbcvt: avoid division by 0 in fb_cvt_hperiod()
    In fb_find_mode_cvt(), iff mode->refresh somehow happens to be 0x80000000,
    cvt.f_refresh will become 0 when multiplying it by 2 due to overflow. It's
    then passed to fb_cvt_hperiod(), where it's used as a divider -- division
    by 0 will result in kernel oops. Add a sanity check for cvt.f_refresh to
    avoid such overflow...
    
    Found by Linux Verification Center (linuxtesting.org) with the Svace static
    analysis tool.

[PATCH_DIFF]
    @@ -312,7 +312,7 @@ int fb_find_mode_cvt(struct fb_videomode *mode, int margins, int rb)
     	cvt.f_refresh = cvt.refresh;
     	cvt.interlace = 1;
     
    -	if (!cvt.xres || !cvt.yres || !cvt.refresh) {
    +	if (!cvt.xres || !cvt.yres || !cvt.refresh || cvt.f_refresh > INT_MAX) {
     		printk(KERN_INFO "fbcvt: Invalid input parameters\n");
     		return 1;
     	}



[ROOTCAUSE_ANALYSIS]
1. CVE Identifier
CVE-2025-38312

2. Vulnerability Type
Integer overflow leading to division-by-zero (kernel crash/DoS)

3. Root Cause Summary
fb_find_mode_cvt() failed to validate that cvt.f_refresh was within a safe range before later doubling it for interlaced modes, allowing an overflow to zero that is subsequently used as a divisor in fb_cvt_hperiod(), causing a division-by-zero and kernel oops. Pre-patch input validation only checked for zero dimensions and zero refresh but did not bound f_refresh against values that would overflow when multiplied.

4. Kernel Subsystem Analysis
1) Affected Subsystem:
fbdev core (fbcvt – Coordinated Video Timings)

2) Pre-Patch Flaw:
In fb_find_mode_cvt(), cvt.f_refresh is set from cvt.refresh and interlace is enabled; the code only validated “!cvt.xres || !cvt.yres || !cvt.refresh” and lacked an upper bound check on f_refresh. When interlaced handling doubles f_refresh, large values (e.g., 0x80000000) overflow to zero, which is then passed to fb_cvt_hperiod() as a divider.

3) Trigger Condition:
Calling fb_find_mode_cvt() with mode->refresh set to a value that causes overflow when doubled (e.g., 0x80000000), making cvt.f_refresh wrap to 0 before being used by fb_cvt_hperiod().

4) Impact Mechanism:
A zero f_refresh value is used as a divisor inside fb_cvt_hperiod(), triggering a division-by-zero that leads to a kernel oops/panic (denial of service).

5. Patch Analysis
1) Fix Approach:
Introduce a sanity check to reject unsafe f_refresh values before any arithmetic that could overflow, preventing zero from reaching fb_cvt_hperiod() as a divisor.

2) Key Code Changes:
In fb_find_mode_cvt(), the validation condition was expanded from:
“if (!cvt.xres || !cvt.yres || !cvt.refresh)”
to:
“if (!cvt.xres || !cvt.yres || !cvt.refresh || cvt.f_refresh > INT_MAX)”
This prevents proceeding when f_refresh exceeds INT_MAX and would overflow upon doubling.

3) Locking/Concurrency Impact:
None. The change is limited to input validation; no locking or ordering adjustments were made.

6. Broader Kernel Security Implications
Strengthening arithmetic bounds checks in display timing computations reduces the risk of kernel crashes from malformed or extreme mode parameters. This fix addresses a class of integer-overflow-to-divide-by-zero issues in fbdev’s CVT path, improving robustness against erroneous or potentially malicious inputs detected by static analysis tools.

[REQUEST]
Produce a detection plan for a CodeQL-based static checker that would detect similar pre-patch flaws.
Requirements for the plan:
- High-level detection goal (1–2 lines).
- A numbered list of detection steps (objective, conceptual AST/semantic signals, FP mitigation).
- Types of program elements to target (functions, call sites, allocation sites, condition checks, lock boundaries, function return-value uses, etc.).
- Dataflow/taint patterns to consider (if applicable), described conceptually.
- Minimal test cases to validate the checker (positive/negative examples).
- Estimated effort/priority (low/medium/high) and likely false-positive sources.
- A short "Limitations & Assumptions" block.

OUTPUT FORMAT (produce exactly this structure; no extra text):
1. Plan Summary
{one-line summary}

2. Detection Steps
1) Step 1: {objective — conceptual signals — FP mitigation}
2) Step 2: {objective — conceptual signals — FP mitigation}
...
(narrow to ≤12 steps)

3. Target Elements
- {list of element types to inspect}

4. Dataflow / Taint Considerations
- {conceptual taint/flow rules to track}

5. Validation & Test Cases
- Positive: {brief}
- Negative: {brief}
- Test harness notes: {brief}

6. Estimated Effort & Priority
{low/medium/high}

7. Likely False-Positive Sources & Mitigations
- {list}

8. Limitations & Assumptions
- {explicit missing info or assumptions}

CONSTRAINTS:
- Do not emit any CodeQL, SQL, pseudocode, or query fragments.
- Keep answers evidence-based and reference which provided field supported each major choice (e.g., “based on [PATCH_DIFF] hunk that adds X”).
- Output must be machine-parseable: keep the exact numbered section headings as above.