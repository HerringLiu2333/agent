You are a senior static-analysis engineer and CodeQL design expert.
Task: Based only on the supplied materials, produce a human-readable detection plan (natural-language) for a CodeQL checker that would detect the same class of vulnerability described. DO NOT produce any query code or pseudocode — the output must be purely natural language steps and rationale.

Rules:
1. Only use evidence contained in the sections labeled [PATCH_DESCRIPTION], [PATCH_DIFF], [FUNCTION_CONTENT], and [ROOTCAUSE_ANALYSIS]. Do not invent facts.
2. The plan must be a step-by-step detection strategy in natural language (numbered steps). No code, no query snippets, no regex, no domain-specific language.
3. Each step must state: objective, signals to look for (AST/semantic patterns expressed conceptually), why it maps to the root cause, and how to reduce false positives.
4. Include a short test/validation strategy (what sample cases to run and expected outcomes).
5. List limitations and assumptions (what is Not determinable from inputs).
6. Keep the plan concise: overall ≤ 12 numbered steps and each step ≤ 2 concise sentences. Use bullets where helpful.
7. If information required to design an accurate checker is missing, state it explicitly under "Limitations & Assumptions".

[META]
CVE_NAME: CVE-2024-57973

[INFO]
[PATCH_DESCRIPTION]
 rdma/cxgb4: Prevent potential integer overflow on 32bit
 [ Upstream commit bd96a3935e89486304461a21752f824fc25e0f0b ]
 
 The "gl->tot_len" variable is controlled by the user.  It comes from
 process_responses().  On 32bit systems, the "gl->tot_len + sizeof(struct
 cpl_pass_accept_req) + sizeof(struct rss_header)" addition could have an
 integer wrapping bug.  Use size_add() to prevent this.

 Fixes: 1cab775c3e75 ("RDMA/cxgb4: Fix LE hash collision bug for passive open connection")

[PATCH_DIFF]
 diff --git a/drivers/infiniband/hw/cxgb4/device.c b/drivers/infiniband/hw/cxgb4/device.c
 index 541dbcf22d0ebf…13e4b2c40d835a 100644
 --- a/drivers/infiniband/hw/cxgb4/device.c
 +++ b/drivers/infiniband/hw/cxgb4/device.c
 @@ -1114,8 +1114,10 @@ static inline struct sk_buff *copy_gl_to_skb_pkt(const struct pkt_gl *gl,
   * The math here assumes sizeof cpl_pass_accept_req >= sizeof
   * cpl_rx_pkt.
   /
 - skb = alloc_skb(gl->tot_len + sizeof(struct cpl_pass_accept_req) +
 - sizeof(struct rss_header) - pktshift, GFP_ATOMIC);
 + skb = alloc_skb(size_add(gl->tot_len,
 + sizeof(struct cpl_pass_accept_req) +
 + sizeof(struct rss_header)) - pktshift,
 + GFP_ATOMIC);
   if (unlikely(!skb))
     return NULL;

[FUNCTION_CONTENT]
static inline struct sk_buff *copy_gl_to_skb_pkt(const struct pkt_gl *gl,
						 const __be64 *rsp,
						 u32 pktshift)
{
	struct sk_buff *skb;

	/*
	 * Allocate space for cpl_pass_accept_req which will be synthesized by
	 * driver. Once the driver synthesizes the request the skb will go
	 * through the regular cpl_pass_accept_req processing.
	 * The math here assumes sizeof cpl_pass_accept_req >= sizeof
	 * cpl_rx_pkt.
	 */
	skb = alloc_skb(gl->tot_len + sizeof(struct cpl_pass_accept_req) +
			sizeof(struct rss_header) - pktshift, GFP_ATOMIC);
	if (unlikely(!skb))
		return NULL;

	__skb_put(skb, gl->tot_len + sizeof(struct cpl_pass_accept_req) +
		  sizeof(struct rss_header) - pktshift);

	/*
	 * This skb will contain:
	 *   rss_header from the rspq descriptor (1 flit)
	 *   cpl_rx_pkt struct from the rspq descriptor (2 flits)
	 *   space for the difference between the size of an
	 *      rx_pkt and pass_accept_req cpl (1 flit)
	 *   the packet data from the gl
	 */
	skb_copy_to_linear_data(skb, rsp, sizeof(struct cpl_pass_accept_req) +
				sizeof(struct rss_header));
	skb_copy_to_linear_data_offset(skb, sizeof(struct rss_header) +
				       sizeof(struct cpl_pass_accept_req),
				       gl->va + pktshift,
				       gl->tot_len - pktshift);
	return skb;
}



[ROOTCAUSE_ANALYSIS]
1. CVE Identifier
CVE-2024-57973

2. Vulnerability Type
Integer overflow leading to heap-based buffer overflow (undersized allocation followed by out-of-bounds write)

3. Root Cause Summary
The function copy_gl_to_skb_pkt computed the skb allocation size using plain 32-bit arithmetic on a user-controlled length (gl->tot_len) without overflow checks. On 32-bit systems, the expression gl->tot_len + sizeof(struct cpl_pass_accept_req) + sizeof(struct rss_header) - pktshift could wrap, producing a much smaller allocation than needed. Subsequent __skb_put and data copy operations used the intended (potentially overflowing) total length, causing writes beyond the allocated buffer. The patch addresses this by using size_add() to perform overflow-safe size calculations for the allocation.

4. Kernel Subsystem Analysis
1) Affected Subsystem:
RDMA cxgb4 (Chelsio T4/T5/T6) driver in drivers/infiniband/hw/cxgb4

2) Pre-Patch Flaw:
- In copy_gl_to_skb_pkt, alloc_skb was called with a size computed by naive addition of gl->tot_len and header sizes: “gl->tot_len + sizeof(struct cpl_pass_accept_req) + sizeof(struct rss_header) - pktshift”.
- gl->tot_len originates from process_responses() and is user-controlled; on 32-bit, the addition could overflow and wrap to a smaller value.
- No validation or overflow-aware arithmetic was performed before allocation.

3) Trigger Condition:
- A crafted or large gl->tot_len on a 32-bit system such that gl->tot_len + sizeof(headers) exceeds UINT_MAX, causing integer wraparound in the allocation size computation.

4) Impact Mechanism:
- Integer wrap produces an undersized skb via alloc_skb.
- The function then calls __skb_put with the intended (potentially overflowing) total length and copies header plus gl payload into the skb, resulting in out-of-bounds writes and heap memory corruption (potential crash or exploitation).

5. Patch Analysis
1) Fix Approach:
- Introduce overflow-safe size calculation using size_add() for the allocation size to prevent integer wrap on 32-bit.

2) Key Code Changes:
- Replaced:
  “alloc_skb(gl->tot_len + sizeof(struct cpl_pass_accept_req) + sizeof(struct rss_header) - pktshift, GFP_ATOMIC);”
  with:
  “alloc_skb(size_add(gl->tot_len, sizeof(struct cpl_pass_accept_req) + sizeof(struct rss_header)) - pktshift, GFP_ATOMIC);”
- This ensures the sum of gl->tot_len and header sizes cannot silently wrap; on overflow, the allocation request becomes large and fails rather than undersized.

3) Locking/Concurrency Impact:
- None. The change is purely arithmetic validation; no locking or ordering modifications.

6. Broader Kernel Security Implications
- User-controlled lengths must be handled with overflow-aware helpers (size_add/size_mul) to avoid undersized allocations and subsequent OOB writes.
- This class of bugs can lead to kernel heap corruption and potential privilege escalation; adopting systematic use of checked arithmetic in allocation size calculations reduces such risks across the kernel.

[REQUEST]
Produce a detection plan for a CodeQL-based static checker that would detect similar pre-patch flaws.
Requirements for the plan:
- High-level detection goal (1–2 lines).
- A numbered list of detection steps (objective, conceptual AST/semantic signals, FP mitigation).
- Types of program elements to target (functions, call sites, allocation sites, condition checks, lock boundaries, function return-value uses, etc.).
- Dataflow/taint patterns to consider (if applicable), described conceptually.
- Minimal test cases to validate the checker (positive/negative examples).
- Estimated effort/priority (low/medium/high) and likely false-positive sources.
- A short "Limitations & Assumptions" block.

OUTPUT FORMAT (produce exactly this structure; no extra text):
1. Plan Summary
{one-line summary}

2. Detection Steps
1) Step 1: {objective — conceptual signals — FP mitigation}
2) Step 2: {objective — conceptual signals — FP mitigation}
...
(narrow to ≤12 steps)

3. Target Elements
- {list of element types to inspect}

4. Dataflow / Taint Considerations
- {conceptual taint/flow rules to track}

5. Validation & Test Cases
- Positive: {brief}
- Negative: {brief}
- Test harness notes: {brief}

6. Estimated Effort & Priority
{low/medium/high}

7. Likely False-Positive Sources & Mitigations
- {list}

8. Limitations & Assumptions
- {explicit missing info or assumptions}

CONSTRAINTS:
- Do not emit any CodeQL, SQL, pseudocode, or query fragments.
- Keep answers evidence-based and reference which provided field supported each major choice (e.g., “based on [PATCH_DIFF] hunk that adds X”).
- Output must be machine-parseable: keep the exact numbered section headings as above.