You are a senior static-analysis engineer and CodeQL design expert.
Task: Based only on the supplied materials, produce a human-readable detection plan (natural-language) for a CodeQL checker that would detect the same class of vulnerability described. DO NOT produce any query code or pseudocode — the output must be purely natural language steps and rationale.

Rules:
1. Only use evidence contained in the sections labeled [PATCH_DESCRIPTION], [PATCH_DIFF], [FUNCTION_CONTENT], and [ROOTCAUSE_ANALYSIS]. Do not invent facts.
2. The plan must be a step-by-step detection strategy in natural language (numbered steps). No code, no query snippets, no regex, no domain-specific language.
3. Each step must state: objective, signals to look for (AST/semantic patterns expressed conceptually), why it maps to the root cause, and how to reduce false positives.
4. Include a short test/validation strategy (what sample cases to run and expected outcomes).
5. List limitations and assumptions (what is Not determinable from inputs).
6. Keep the plan concise: overall ≤ 12 numbered steps and each step ≤ 2 concise sentences. Use bullets where helpful.
7. If information required to design an accurate checker is missing, state it explicitly under "Limitations & Assumptions".

[META]
CVE_NAME: CVE-2025-38257

[INFO]
[PATCH_DESCRIPTION]
    s390/pkey: Prevent overflow in size calculation for memdup_user()
    Number of apqn target list entries contained in 'nr_apqns' variable is
    determined by userspace via an ioctl call so the result of the product in
    calculation of size passed to memdup_user() may overflow.
    
    In this case the actual size of the allocated area and the value
    describing it won't be in sync leading to various types of unpredictable
    behaviour later.
    
    Use a proper memdup_array_user() helper which returns an error if an
    overflow is detected. Note that it is different from when nr_apqns is
    initially zero - that case is considered valid and should be handled in
    subsequent pkey_handler implementations.
    
    Found by Linux Verification Center (linuxtesting.org).
    
    Fixes: f2bbc96e7cfa ("s390/pkey: add CCA AES cipher key support")

[PATCH_DIFF]
    @@ -86,7 +86,7 @@ static void *_copy_apqns_from_user(void __user *uapqns, size_t nr_apqns)
     	if (!uapqns || nr_apqns == 0)
     		return NULL;
     
    -	return memdup_user(uapqns, nr_apqns * sizeof(struct pkey_apqn));
    +	return memdup_array_user(uapqns, nr_apqns, sizeof(struct pkey_apqn));
     }
     
     static int pkey_ioctl_genseck(struct pkey_genseck __user *ugs)

[FUNCTION_CONTENT]
static void *_copy_apqns_from_user(void __user *uapqns, size_t nr_apqns)
{
	if (!uapqns || nr_apqns == 0)
		return NULL;

	return memdup_user(uapqns, nr_apqns * sizeof(struct pkey_apqn));
}

/* ----- separator ----- */

static int pkey_ioctl_genseck(struct pkey_genseck __user *ugs)
{
	struct pkey_genseck kgs;
	struct pkey_apqn apqn;
	u32 keybuflen;
	int rc;

	if (copy_from_user(&kgs, ugs, sizeof(kgs)))
		return -EFAULT;

	apqn.card = kgs.cardnr;
	apqn.domain = kgs.domain;
	keybuflen = sizeof(kgs.seckey.seckey);
	rc = pkey_handler_gen_key(&apqn, 1,
				  kgs.keytype, PKEY_TYPE_CCA_DATA, 0, 0,
				  kgs.seckey.seckey, &keybuflen, NULL, 0);
	pr_debug("gen_key()=%d\n", rc);
	if (!rc && copy_to_user(ugs, &kgs, sizeof(kgs)))
		rc = -EFAULT;
	memzero_explicit(&kgs, sizeof(kgs));

	return rc;
}



[ROOTCAUSE_ANALYSIS]
1. CVE Identifier
CVE-2025-38257

2. Vulnerability Type
Integer overflow in size calculation leading to undersized allocation and potential out-of-bounds access (heap buffer overflow/overread)

3. Root Cause Summary
The function _copy_apqns_from_user() computed the allocation size as nr_apqns * sizeof(struct pkey_apqn) without checking for overflow before passing it to memdup_user(). Because nr_apqns is user-controlled via ioctl, the multiplication could wrap, causing memdup_user() to allocate a buffer smaller than required for nr_apqns elements. Subsequent code that treats the returned buffer as an array of nr_apqns entries could perform out-of-bounds reads/writes.

4. Kernel Subsystem Analysis
1) Affected Subsystem:
s390 crypto key (pkey) driver

2) Pre-Patch Flaw:
- In _copy_apqns_from_user(void __user *uapqns, size_t nr_apqns), the code used:
  "memdup_user(uapqns, nr_apqns * sizeof(struct pkey_apqn))"
- No validation of the product for overflow, despite nr_apqns being controlled by userspace via ioctl.

3) Trigger Condition:
- Userspace passes a large nr_apqns such that nr_apqns * sizeof(struct pkey_apqn) overflows size_t, while uapqns is non-NULL and nr_apqns != 0.

4) Impact Mechanism:
- memdup_user() allocates and copies only the wrapped (undersized) number of bytes.
- Kernel code that iterates over or indexes nr_apqns elements in the returned buffer may read or write beyond the allocated memory, leading to memory corruption, information disclosure, or kernel crashes.

5. Patch Analysis
1) Fix Approach:
- Replace raw multiplication and memdup_user() with memdup_array_user(), which performs checked array size calculation and fails on overflow.

2) Key Code Changes:
- Before: return memdup_user(uapqns, nr_apqns * sizeof(struct pkey_apqn));
- After:  return memdup_array_user(uapqns, nr_apqns, sizeof(struct pkey_apqn));
- The new helper detects multiplication overflow and returns an error rather than allocating an undersized buffer. The early return for nr_apqns == 0 remains unchanged, preserving the “zero is valid” semantics noted in the patch description.

3) Locking/Concurrency Impact:
- None. The change is purely about safe size calculation and copying from userspace; no locking semantics were introduced or modified.

6. Broader Kernel Security Implications
- Using memdup_array_user() eliminates a common class of integer overflow bugs in array allocations from userspace. This prevents heap mis-sizing that can lead to OOB accesses and potential privilege escalation. The fix aligns with kernel-wide best practices for safe user-controlled array length handling in ioctl paths.

[REQUEST]
Produce a detection plan for a CodeQL-based static checker that would detect similar pre-patch flaws.
Requirements for the plan:
- High-level detection goal (1–2 lines).
- A numbered list of detection steps (objective, conceptual AST/semantic signals, FP mitigation).
- Types of program elements to target (functions, call sites, allocation sites, condition checks, lock boundaries, function return-value uses, etc.).
- Dataflow/taint patterns to consider (if applicable), described conceptually.
- Minimal test cases to validate the checker (positive/negative examples).
- Estimated effort/priority (low/medium/high) and likely false-positive sources.
- A short "Limitations & Assumptions" block.

OUTPUT FORMAT (produce exactly this structure; no extra text):
1. Plan Summary
{one-line summary}

2. Detection Steps
1) Step 1: {objective — conceptual signals — FP mitigation}
2) Step 2: {objective — conceptual signals — FP mitigation}
...
(narrow to ≤12 steps)

3. Target Elements
- {list of element types to inspect}

4. Dataflow / Taint Considerations
- {conceptual taint/flow rules to track}

5. Validation & Test Cases
- Positive: {brief}
- Negative: {brief}
- Test harness notes: {brief}

6. Estimated Effort & Priority
{low/medium/high}

7. Likely False-Positive Sources & Mitigations
- {list}

8. Limitations & Assumptions
- {explicit missing info or assumptions}

CONSTRAINTS:
- Do not emit any CodeQL, SQL, pseudocode, or query fragments.
- Keep answers evidence-based and reference which provided field supported each major choice (e.g., “based on [PATCH_DIFF] hunk that adds X”).
- Output must be machine-parseable: keep the exact numbered section headings as above.