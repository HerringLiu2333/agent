You are a senior static-analysis engineer and CodeQL design expert.
Task: Based only on the supplied materials, produce a human-readable detection plan (natural-language) for a CodeQL checker that would detect the same class of vulnerability described. DO NOT produce any query code or pseudocode — the output must be purely natural language steps and rationale.

Rules:
1. Only use evidence contained in the sections labeled [PATCH_DESCRIPTION], [PATCH_DIFF], [FUNCTION_CONTENT], and [ROOTCAUSE_ANALYSIS]. Do not invent facts.
2. The plan must be a step-by-step detection strategy in natural language (numbered steps). No code, no query snippets, no regex, no domain-specific language.
3. Each step must state: objective, signals to look for (AST/semantic patterns expressed conceptually), why it maps to the root cause, and how to reduce false positives.
4. Include a short test/validation strategy (what sample cases to run and expected outcomes).
5. List limitations and assumptions (what is Not determinable from inputs).
6. Keep the plan concise: overall ≤ 12 numbered steps and each step ≤ 2 concise sentences. Use bullets where helpful.
7. If information required to design an accurate checker is missing, state it explicitly under "Limitations & Assumptions".

[META]
CVE_NAME: CVE-2025-39728

[INFO]
[PATCH_DESCRIPTION]
    clk: samsung: Fix UBSAN panic in samsung_clk_init()
    With UBSAN_ARRAY_BOUNDS=y, I'm hitting the below panic due to
    dereferencing `ctx->clk_data.hws` before setting
    `ctx->clk_data.num = nr_clks`. Move that up to fix the crash.
    
      UBSAN: array index out of bounds: 00000000f2005512 [#1] PREEMPT SMP
      <snip>
      Call trace:
       samsung_clk_init+0x110/0x124 (P)
       samsung_clk_init+0x48/0x124 (L)
       samsung_cmu_register_one+0x3c/0xa0
       exynos_arm64_register_cmu+0x54/0x64
       __gs101_cmu_top_of_clk_init_declare+0x28/0x60
       ...

[PATCH_DIFF]
    @@ -74,12 +74,12 @@ struct samsung_clk_provider * __init samsung_clk_init(struct device *dev,
     	if (!ctx)
     		panic("could not allocate clock provider context.\n");
     
    +	ctx->clk_data.num = nr_clks;
     	for (i = 0; i < nr_clks; ++i)
     		ctx->clk_data.hws[i] = ERR_PTR(-ENOENT);
     
     	ctx->dev = dev;
     	ctx->reg_base = base;
    -	ctx->clk_data.num = nr_clks;
     	spin_lock_init(&ctx->lock);
     
     	return ctx;

[FUNCTION_CONTENT]
struct samsung_clk_provider * __init samsung_clk_init(struct device *dev,
			void __iomem *base, unsigned long nr_clks)
{
	struct samsung_clk_provider *ctx;
	int i;

	ctx = kzalloc(struct_size(ctx, clk_data.hws, nr_clks), GFP_KERNEL);
	if (!ctx)
		panic("could not allocate clock provider context.\n");

	for (i = 0; i < nr_clks; ++i)
		ctx->clk_data.hws[i] = ERR_PTR(-ENOENT);

	ctx->dev = dev;
	ctx->reg_base = base;
	ctx->clk_data.num = nr_clks;
	spin_lock_init(&ctx->lock);

	return ctx;
}



[ROOTCAUSE_ANALYSIS]
1. CVE Identifier
CVE-2025-39728

2. Vulnerability Type
Initialization order bug leading to sanitizer-detected array bounds misuse (array bounds validation based on uninitialized/incorrect metadata)

3. Root Cause Summary
- In samsung_clk_init(), the code writes to ctx->clk_data.hws[i] before initializing ctx->clk_data.num.
- UBSAN’s array-bounds instrumentation uses clk_data.num as the runtime bound for hws[], so with num still at its default (zero), any access to hws[i] is judged out-of-bounds.
- This ordering causes an immediate UBSAN array index out-of-bounds panic when CONFIG_UBSAN_ARRAY_BOUNDS is enabled, despite the backing allocation being correctly sized.

4. Kernel Subsystem Analysis
1) Affected Subsystem:
- Common Clock Framework (CCF), Samsung clock provider (drivers/clk/samsung).

2) Pre-Patch Flaw:
- samsung_clk_init() iterates “for (i = 0; i < nr_clks; ++i) ctx->clk_data.hws[i] = ERR_PTR(-ENOENT);” before setting “ctx->clk_data.num = nr_clks”.
- The flexible array hws[]’s logical size is defined by clk_data.num; leaving it unset (zero) while accessing hws[] violates sanitizer-enforced bounds.
- The flaw is an incorrect initialization order between metadata (num) and data accesses (hws[] writes).

3) Trigger Condition:
- Kernel built with UBSAN array bounds checking (UBSAN_ARRAY_BOUNDS=y).
- samsung_clk_init() is called with nr_clks > 0 during Samsung CMU registration (per the call trace in the patch description).
- Any attempt to initialize hws[] entries before num is set triggers the sanitizer’s out-of-bounds check.

4) Impact Mechanism:
- UBSAN detects an array index out of bounds on hws[i] due to num == 0 at the time of access and panics, causing a denial of service during initialization.
- Without UBSAN, the memory is correctly allocated (struct_size with nr_clks), so no actual OOB memory corruption occurs; the failure is sanitizer-induced.
- Result: system crash during clock provider initialization on UBSAN-instrumented builds.

5. Patch Analysis
1) Fix Approach:
- Reorder initialization so that ctx->clk_data.num is set to nr_clks before any access to ctx->clk_data.hws[].
- This aligns the metadata with subsequent array operations, satisfying UBSAN’s bounds checks.

2) Key Code Changes:
- Moved “ctx->clk_data.num = nr_clks;” above the for-loop that initializes hws[i] to ERR_PTR(-ENOENT) (see PATCH_DIFF hunk).
- No other logic, bounds, or allocation changes were introduced; the fix is purely an initialization ordering correction.

3) Locking/Concurrency Impact:
- No locking changes; spin_lock_init(&ctx->lock) remains unaffected and there are no concurrency semantics altered by this patch.
- The issue was not a race but a deterministic order-of-initialization bug within a single-threaded init path.

6. Broader Kernel Security Implications
- Highlights the importance of initializing size/metadata fields before any flexible array accesses, especially under sanitizers that rely on such metadata for runtime checks.
- Similar patterns elsewhere (flexible arrays whose bounds are tracked by a “num” field) can lead to sanitizer-induced crashes if metadata is set too late.
- Ensuring correct initialization order improves robustness in hardened builds and prevents denial-of-service conditions triggered by defensive instrumentation.

[REQUEST]
Produce a detection plan for a CodeQL-based static checker that would detect similar pre-patch flaws.
Requirements for the plan:
- High-level detection goal (1–2 lines).
- A numbered list of detection steps (objective, conceptual AST/semantic signals, FP mitigation).
- Types of program elements to target (functions, call sites, allocation sites, condition checks, lock boundaries, function return-value uses, etc.).
- Dataflow/taint patterns to consider (if applicable), described conceptually.
- Minimal test cases to validate the checker (positive/negative examples).
- Estimated effort/priority (low/medium/high) and likely false-positive sources.
- A short "Limitations & Assumptions" block.

OUTPUT FORMAT (produce exactly this structure; no extra text):
1. Plan Summary
{one-line summary}

2. Detection Steps
1) Step 1: {objective — conceptual signals — FP mitigation}
2) Step 2: {objective — conceptual signals — FP mitigation}
...
(narrow to ≤12 steps)

3. Target Elements
- {list of element types to inspect}

4. Dataflow / Taint Considerations
- {conceptual taint/flow rules to track}

5. Validation & Test Cases
- Positive: {brief}
- Negative: {brief}
- Test harness notes: {brief}

6. Estimated Effort & Priority
{low/medium/high}

7. Likely False-Positive Sources & Mitigations
- {list}

8. Limitations & Assumptions
- {explicit missing info or assumptions}

CONSTRAINTS:
- Do not emit any CodeQL, SQL, pseudocode, or query fragments.
- Keep answers evidence-based and reference which provided field supported each major choice (e.g., “based on [PATCH_DIFF] hunk that adds X”).
- Output must be machine-parseable: keep the exact numbered section headings as above.