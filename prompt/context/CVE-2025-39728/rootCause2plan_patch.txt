You are a senior static-analysis engineer and CodeQL design expert.
Task: Based only on the supplied materials, produce a human-readable detection plan (natural-language) for a CodeQL checker that would detect the same class of vulnerability described. DO NOT produce any query code or pseudocode — the output must be purely natural language steps and rationale.

Rules:
1. Only use evidence contained in the sections labeled [PATCH_DESCRIPTION], [PATCH_DIFF], and [ROOTCAUSE_ANALYSIS]. Do not invent facts.
2. The plan must be a step-by-step detection strategy in natural language (numbered steps). No code, no query snippets, no regex, no domain-specific language.
3. Each step must state: objective, signals to look for (AST/semantic patterns expressed conceptually), why it maps to the root cause, and how to reduce false positives.
4. Include a short test/validation strategy (what sample cases to run and expected outcomes).
5. List limitations and assumptions (what is Not determinable from inputs).
6. Keep the plan concise: overall ≤ 12 numbered steps and each step ≤ 2 concise sentences. Use bullets where helpful.
7. If information required to design an accurate checker is missing, state it explicitly under "Limitations & Assumptions".

[META]
CVE_NAME: CVE-2025-39728

[INFO]
[PATCH_DESCRIPTION]
    clk: samsung: Fix UBSAN panic in samsung_clk_init()
    With UBSAN_ARRAY_BOUNDS=y, I'm hitting the below panic due to
    dereferencing `ctx->clk_data.hws` before setting
    `ctx->clk_data.num = nr_clks`. Move that up to fix the crash.
    
      UBSAN: array index out of bounds: 00000000f2005512 [#1] PREEMPT SMP
      <snip>
      Call trace:
       samsung_clk_init+0x110/0x124 (P)
       samsung_clk_init+0x48/0x124 (L)
       samsung_cmu_register_one+0x3c/0xa0
       exynos_arm64_register_cmu+0x54/0x64
       __gs101_cmu_top_of_clk_init_declare+0x28/0x60
       ...

[PATCH_DIFF]
    @@ -74,12 +74,12 @@ struct samsung_clk_provider * __init samsung_clk_init(struct device *dev,
     	if (!ctx)
     		panic("could not allocate clock provider context.\n");
     
    +	ctx->clk_data.num = nr_clks;
     	for (i = 0; i < nr_clks; ++i)
     		ctx->clk_data.hws[i] = ERR_PTR(-ENOENT);
     
     	ctx->dev = dev;
     	ctx->reg_base = base;
    -	ctx->clk_data.num = nr_clks;
     	spin_lock_init(&ctx->lock);
     
     	return ctx;



[ROOTCAUSE_ANALYSIS]
1. CVE Identifier
CVE-2025-39728

2. Vulnerability Type
Out-of-bounds array access due to improper initialization order (flexible array bounds not set before indexing), leading to UBSAN-triggered panic.

3. Root Cause Summary
In samsung_clk_init(), the driver indexed the flexible array member ctx->clk_data.hws[i] before initializing the corresponding bound field ctx->clk_data.num. With UBSAN_ARRAY_BOUNDS enabled, sanitization relies on clk_data.num to validate hws[] indexing; since num was set only after the loop, accesses appeared out-of-bounds and triggered a panic. The patch fixes the initialization order by assigning ctx->clk_data.num = nr_clks before the loop that writes to hws[].

4. Kernel Subsystem Analysis
1) Affected Subsystem:
Common Clock Framework (CCF), Samsung clock provider (clk: samsung), function samsung_clk_init().

2) Pre-Patch Flaw:
The code executed:
- for (i = 0; i < nr_clks; ++i) ctx->clk_data.hws[i] = ERR_PTR(-ENOENT);
while ctx->clk_data.num was assigned only afterward. This left the runtime “num” bound unset during first access to the flexible array hws[], conflicting with UBSAN’s bounds expectations.

3) Trigger Condition:
Building the kernel with UBSAN_ARRAY_BOUNDS=y and invoking samsung_clk_init() for a Samsung CMU (e.g., via samsung_cmu_register_one → exynos_arm64_register_cmu) causes the loop to dereference hws[i] before num is initialized.

4) Impact Mechanism:
UBSAN detects an array index out-of-bounds on ctx->clk_data.hws[i] because clk_data.num is zero/uninitialized at the time of access, resulting in a kernel panic during early clock initialization.

5. Patch Analysis
1) Fix Approach:
Reorder initialization so that clk_data.num is set to nr_clks before any indexed access to clk_data.hws[], ensuring sanitizer-visible bounds are established prior to use.

2) Key Code Changes:
- Moved “ctx->clk_data.num = nr_clks;” above the for-loop that initializes hws[] entries.
- Removed the later, now redundant, assignment after setting dev/reg_base.
This change is confined to samsung_clk_init().

3) Locking/Concurrency Impact:
None. The change is purely an initialization order fix with no alterations to locking, RCU, or concurrency; spin_lock_init() remains unchanged and is unrelated to the bug.

6. Broader Kernel Security Implications
Ensuring fields that define flexible array bounds (e.g., “num”) are initialized before any indexing prevents sanitizer-triggered crashes and enforces correct memory safety semantics. This pattern is common in structures with flexible array members; similar ordering issues elsewhere could lead to latent crashes under sanitizers or hard-to-debug memory safety violations. The fix improves robustness during early driver initialization and supports safer runtime verification by sanitizers.

[REQUEST]
Produce a detection plan for a CodeQL-based static checker that would detect similar pre-patch flaws.
Requirements for the plan:
- High-level detection goal (1–2 lines).
- A numbered list of detection steps (objective, conceptual AST/semantic signals, FP mitigation).
- Types of program elements to target (functions, call sites, allocation sites, condition checks, lock boundaries, function return-value uses, etc.).
- Dataflow/taint patterns to consider (if applicable), described conceptually.
- Minimal test cases to validate the checker (positive/negative examples).
- Estimated effort/priority (low/medium/high) and likely false-positive sources.
- A short "Limitations & Assumptions" block.

OUTPUT FORMAT (produce exactly this structure; no extra text):
1. Plan Summary
{one-line summary}

2. Detection Steps
1) Step 1: {objective — conceptual signals — FP mitigation}
2) Step 2: {objective — conceptual signals — FP mitigation}
...
(narrow to ≤12 steps)

3. Target Elements
- {list of element types to inspect}

4. Dataflow / Taint Considerations
- {conceptual taint/flow rules to track}

5. Validation & Test Cases
- Positive: {brief}
- Negative: {brief}
- Test harness notes: {brief}

6. Estimated Effort & Priority
{low/medium/high}

7. Likely False-Positive Sources & Mitigations
- {list}

8. Limitations & Assumptions
- {explicit missing info or assumptions}

CONSTRAINTS:
- Do not emit any CodeQL, SQL, pseudocode, or query fragments.
- Keep answers evidence-based and reference which provided field supported each major choice (e.g., “based on [PATCH_DIFF] hunk that adds X”).
- Output must be machine-parseable: keep the exact numbered section headings as above.