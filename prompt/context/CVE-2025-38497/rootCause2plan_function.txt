You are a senior static-analysis engineer and CodeQL design expert.
Task: Based only on the supplied materials, produce a human-readable detection plan (natural-language) for a CodeQL checker that would detect the same class of vulnerability described. DO NOT produce any query code or pseudocode — the output must be purely natural language steps and rationale.

Rules:
1. Only use evidence contained in the sections labeled [PATCH_DESCRIPTION], [PATCH_DIFF], [FUNCTION_CONTENT], and [ROOTCAUSE_ANALYSIS]. Do not invent facts.
2. The plan must be a step-by-step detection strategy in natural language (numbered steps). No code, no query snippets, no regex, no domain-specific language.
3. Each step must state: objective, signals to look for (AST/semantic patterns expressed conceptually), why it maps to the root cause, and how to reduce false positives.
4. Include a short test/validation strategy (what sample cases to run and expected outcomes).
5. List limitations and assumptions (what is Not determinable from inputs).
6. Keep the plan concise: overall ≤ 12 numbered steps and each step ≤ 2 concise sentences. Use bullets where helpful.
7. If information required to design an accurate checker is missing, state it explicitly under "Limitations & Assumptions".

[META]
CVE_NAME: CVE-2025-38497

[INFO]
[PATCH_DESCRIPTION]
    usb: gadget: configfs: Fix OOB read on empty string write
    When writing an an empty string to either 'qw_sign' or 'landingPage'
    sysfs attributes, the store functions attempt to access page[l - 1]
    before validating that the length 'l' is greater than zero.
    
    This patch fixes the vulnerability by adding a check at the beginning
    of os_desc_qw_sign_store() and webusb_landingPage_store() to handle
    the zero-length input case gracefully by returning immediately.

[PATCH_DIFF]
    @@ -1065,6 +1065,8 @@ static ssize_t webusb_landingPage_store(struct config_item *item, const char *pa
 	unsigned int bytes_to_strip = 0;
 	int l = len;

+	if (!len)
+		return len;
 	if (page[l - 1] == '\n') {
 		--l;
 		++bytes_to_strip;
    @@ -1188,6 +1190,8 @@ static ssize_t os_desc_qw_sign_store(struct config_item *item, const char *page,
 	struct gadget_info *gi = os_desc_item_to_gadget_info(item);
 	int res, l;

+	if (!len)
+		return len;
 	l = min_t(int, len, OS_STRING_QW_SIGN_LEN >> 1);
 	if (page[l - 1] == '\n')
 		--l;

[FUNCTION_CONTENT]
static ssize_t webusb_landingPage_store(struct config_item *item, const char *page,
				     size_t len)
{
	struct gadget_info *gi = webusb_item_to_gadget_info(item);
	unsigned int bytes_to_strip = 0;
	int l = len;

	if (page[l - 1] == '\n') {
		--l;
		++bytes_to_strip;
	}

	if (l > sizeof(gi->landing_page)) {
		pr_err("webusb: landingPage URL too long\n");
		return -EINVAL;
	}

	// validation
	if (strncasecmp(page, "https://",  8) == 0)
		bytes_to_strip = 8;
	else if (strncasecmp(page, "http://", 7) == 0)
		bytes_to_strip = 7;
	else
		bytes_to_strip = 0;

	if (l > U8_MAX - WEBUSB_URL_DESCRIPTOR_HEADER_LENGTH + bytes_to_strip) {
		pr_err("webusb: landingPage URL %d bytes too long for given URL scheme\n",
			l - U8_MAX + WEBUSB_URL_DESCRIPTOR_HEADER_LENGTH - bytes_to_strip);
		return -EINVAL;
	}

	mutex_lock(&gi->lock);
	// ensure 0 bytes are set, in case the new landing page is shorter then the old one.
	memcpy_and_pad(gi->landing_page, sizeof(gi->landing_page), page, l, 0);
	mutex_unlock(&gi->lock);

	return len;
}

/* ----- separator ----- */

static ssize_t os_desc_qw_sign_store(struct config_item *item, const char *page,
				     size_t len)
{
	struct gadget_info *gi = os_desc_item_to_gadget_info(item);
	int res, l;

	l = min_t(int, len, OS_STRING_QW_SIGN_LEN >> 1);
	if (page[l - 1] == '\n')
		--l;

	mutex_lock(&gi->lock);
	res = utf8s_to_utf16s(page, l,
			      UTF16_LITTLE_ENDIAN, (wchar_t *) gi->qw_sign,
			      OS_STRING_QW_SIGN_LEN);
	if (res > 0)
		res = len;
	mutex_unlock(&gi->lock);

	return res;
}



[ROOTCAUSE_ANALYSIS]
1. CVE Identifier
CVE-2025-38497

2. Vulnerability Type
Out-of-bounds read (OOB read) due to missing length validation on zero-length input in configfs attribute store handlers

3. Root Cause Summary
Both webusb_landingPage_store() and os_desc_qw_sign_store() accessed page[l - 1] to strip a trailing newline without first ensuring len > 0, so a zero-length write led to reading before the start of the buffer (page[-1]). The patch adds an early return when len == 0, eliminating the invalid index access.

4. Kernel Subsystem Analysis
1) Affected Subsystem:
USB gadget configfs (WebUSB landingPage and OS descriptor qw_sign attributes)

2) Pre-Patch Flaw:
- In webusb_landingPage_store(), l = len; followed by if (page[l - 1] == '\n') ... without checking len > 0.
- In os_desc_qw_sign_store(), l = min_t(int, len, OS_STRING_QW_SIGN_LEN >> 1); followed by if (page[l - 1] == '\n') ... without checking len > 0.
- This unguarded indexing causes page[-1] when len == 0.

3) Trigger Condition:
Writing an empty string (len == 0) to the configfs attributes “landingPage” or “qw_sign” (e.g., echo -n "" > <attribute>), which makes l == 0 and triggers the page[l - 1] access.

4) Impact Mechanism:
An out-of-bounds read of one byte before the kernel buffer backing the configfs write. This can lead to a kernel fault/KASAN report and local denial of service. Information disclosure from the single-byte read is Unknown/Not determinable.

5. Patch Analysis
1) Fix Approach:
Add an early guard to handle zero-length input by returning immediately, avoiding any access to page[len - 1].

2) Key Code Changes:
- In webusb_landingPage_store():
  + Inserted:
    if (!len)
        return len;
  + This precedes the newline check on page[l - 1].
- In os_desc_qw_sign_store():
  + Inserted:
    if (!len)
        return len;
  + This precedes computing/using l and the newline check on page[l - 1].

3) Locking/Concurrency Impact:
No changes to locking or concurrency. Existing mutex_lock/unlock around state updates remain unchanged; the fix only adds an early return path before any locking.

6. Broader Kernel Security Implications
- Reinforces the need for strict input-length validation in sysfs/configfs store handlers, especially before indexing the last character to strip newlines.
- Similar tail-inspection patterns elsewhere should be audited for zero-length handling to prevent OOB reads and potential DoS.
- Demonstrates that even single-byte pre-boundary reads in kernel paths accessible to unprivileged users can destabilize the system.

[REQUEST]
Produce a detection plan for a CodeQL-based static checker that would detect similar pre-patch flaws.
Requirements for the plan:
- High-level detection goal (1–2 lines).
- A numbered list of detection steps (objective, conceptual AST/semantic signals, FP mitigation).
- Types of program elements to target (functions, call sites, allocation sites, condition checks, lock boundaries, function return-value uses, etc.).
- Dataflow/taint patterns to consider (if applicable), described conceptually.
- Minimal test cases to validate the checker (positive/negative examples).
- Estimated effort/priority (low/medium/high) and likely false-positive sources.
- A short "Limitations & Assumptions" block.

OUTPUT FORMAT (produce exactly this structure; no extra text):
1. Plan Summary
{one-line summary}

2. Detection Steps
1) Step 1: {objective — conceptual signals — FP mitigation}
2) Step 2: {objective — conceptual signals — FP mitigation}
...
(narrow to ≤12 steps)

3. Target Elements
- {list of element types to inspect}

4. Dataflow / Taint Considerations
- {conceptual taint/flow rules to track}

5. Validation & Test Cases
- Positive: {brief}
- Negative: {brief}
- Test harness notes: {brief}

6. Estimated Effort & Priority
{low/medium/high}

7. Likely False-Positive Sources & Mitigations
- {list}

8. Limitations & Assumptions
- {explicit missing info or assumptions}

CONSTRAINTS:
- Do not emit any CodeQL, SQL, pseudocode, or query fragments.
- Keep answers evidence-based and reference which provided field supported each major choice (e.g., “based on [PATCH_DIFF] hunk that adds X”).
- Output must be machine-parseable: keep the exact numbered section headings as above.