You are a senior static-analysis engineer and CodeQL design expert.
Task: Based only on the supplied materials, produce a human-readable detection plan (natural-language) for a CodeQL checker that would detect the same class of vulnerability described. DO NOT produce any query code or pseudocode — the output must be purely natural language steps and rationale.

Rules:
1. Only use evidence contained in the sections labeled [PATCH_DESCRIPTION], [PATCH_DIFF], and [ROOTCAUSE_ANALYSIS]. Do not invent facts.
2. The plan must be a step-by-step detection strategy in natural language (numbered steps). No code, no query snippets, no regex, no domain-specific language.
3. Each step must state: objective, signals to look for (AST/semantic patterns expressed conceptually), why it maps to the root cause, and how to reduce false positives.
4. Include a short test/validation strategy (what sample cases to run and expected outcomes).
5. List limitations and assumptions (what is Not determinable from inputs).
6. Keep the plan concise: overall ≤ 12 numbered steps and each step ≤ 2 concise sentences. Use bullets where helpful.
7. If information required to design an accurate checker is missing, state it explicitly under "Limitations & Assumptions".

[META]
CVE_NAME: CVE-2025-38497

[INFO]
[PATCH_DESCRIPTION]
    usb: gadget: configfs: Fix OOB read on empty string write
    When writing an an empty string to either 'qw_sign' or 'landingPage'
    sysfs attributes, the store functions attempt to access page[l - 1]
    before validating that the length 'l' is greater than zero.
    
    This patch fixes the vulnerability by adding a check at the beginning
    of os_desc_qw_sign_store() and webusb_landingPage_store() to handle
    the zero-length input case gracefully by returning immediately.

[PATCH_DIFF]
    @@ -1065,6 +1065,8 @@ static ssize_t webusb_landingPage_store(struct config_item *item, const char *pa
 	unsigned int bytes_to_strip = 0;
 	int l = len;

+	if (!len)
+		return len;
 	if (page[l - 1] == '\n') {
 		--l;
 		++bytes_to_strip;
    @@ -1188,6 +1190,8 @@ static ssize_t os_desc_qw_sign_store(struct config_item *item, const char *page,
 	struct gadget_info *gi = os_desc_item_to_gadget_info(item);
 	int res, l;

+	if (!len)
+		return len;
 	l = min_t(int, len, OS_STRING_QW_SIGN_LEN >> 1);
 	if (page[l - 1] == '\n')
 		--l;



[ROOTCAUSE_ANALYSIS]
1. CVE Identifier
{{CVE-2025-38497}}

2. Vulnerability Type
{{Out-of-bounds read (OOB read) due to missing zero-length input validation in sysfs/configfs store handlers}}

3. Root Cause Summary
{{Both webusb_landingPage_store() and os_desc_qw_sign_store() unconditionally accessed page[l - 1] to strip a trailing newline without first ensuring that len (and thus l) was greater than zero. Writing an empty string (len == 0) caused page[-1] to be read, resulting in an OOB read in kernel context.}}

4. Kernel Subsystem Analysis
1) Affected Subsystem:
{{USB gadget configfs (WebUSB and OS descriptors attributes)}}
2) Pre-Patch Flaw:
{{In webusb_landingPage_store(), l is set to len, then page[l - 1] is read; in os_desc_qw_sign_store(), l = min_t(int, len, OS_STRING_QW_SIGN_LEN >> 1) followed by page[l - 1] access. Neither function checked len > 0 before this read.}}
3) Trigger Condition:
{{A user writes an empty string to the configfs/sysfs attributes "landingPage" or "qw_sign" (len == 0).}}
4) Impact Mechanism:
{{The code reads page[-1], a byte preceding the provided buffer, causing an out-of-bounds read which can lead to a kernel fault/Oops or undefined behavior when the buffer starts at a page boundary.}}

5. Patch Analysis
1) Fix Approach:
{{Early return on zero-length input to avoid accessing page[l - 1].}}
2) Key Code Changes:
{{Inserted “if (!len) return len;” at the start of both webusb_landingPage_store() (around line 1065) and os_desc_qw_sign_store() (around line 1188), before any dereference of page[l - 1].}}
3) Locking/Concurrency Impact:
{{None. The patch only adds input-length validation; no locks or ordering were modified.}}

6. Broader Kernel Security Implications
{{Sysfs/configfs store handlers must defensively validate lengths before indexing buffers, especially when stripping trailing characters. This fix eliminates a trivial OOB read path in a sensitive kernel context, reducing the risk of crashes from malformed inputs and reinforcing safe input handling patterns across similar attribute handlers.}}

[REQUEST]
Produce a detection plan for a CodeQL-based static checker that would detect similar pre-patch flaws.
Requirements for the plan:
- High-level detection goal (1–2 lines).
- A numbered list of detection steps (objective, conceptual AST/semantic signals, FP mitigation).
- Types of program elements to target (functions, call sites, allocation sites, condition checks, lock boundaries, function return-value uses, etc.).
- Dataflow/taint patterns to consider (if applicable), described conceptually.
- Minimal test cases to validate the checker (positive/negative examples).
- Estimated effort/priority (low/medium/high) and likely false-positive sources.
- A short "Limitations & Assumptions" block.

OUTPUT FORMAT (produce exactly this structure; no extra text):
1. Plan Summary
{one-line summary}

2. Detection Steps
1) Step 1: {objective — conceptual signals — FP mitigation}
2) Step 2: {objective — conceptual signals — FP mitigation}
...
(narrow to ≤12 steps)

3. Target Elements
- {list of element types to inspect}

4. Dataflow / Taint Considerations
- {conceptual taint/flow rules to track}

5. Validation & Test Cases
- Positive: {brief}
- Negative: {brief}
- Test harness notes: {brief}

6. Estimated Effort & Priority
{low/medium/high}

7. Likely False-Positive Sources & Mitigations
- {list}

8. Limitations & Assumptions
- {explicit missing info or assumptions}

CONSTRAINTS:
- Do not emit any CodeQL, SQL, pseudocode, or query fragments.
- Keep answers evidence-based and reference which provided field supported each major choice (e.g., “based on [PATCH_DIFF] hunk that adds X”).
- Output must be machine-parseable: keep the exact numbered section headings as above.