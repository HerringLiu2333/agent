You are a senior static-analysis engineer and CodeQL design expert.
Task: Based only on the supplied materials, produce a human-readable detection plan (natural-language) for a CodeQL checker that would detect the same class of vulnerability described. DO NOT produce any query code or pseudocode — the output must be purely natural language steps and rationale.

Rules:
1. Only use evidence contained in the sections labeled [PATCH_DESCRIPTION], [PATCH_DIFF], [FUNCTION_CONTENT], and [ROOTCAUSE_ANALYSIS]. Do not invent facts.
2. The plan must be a step-by-step detection strategy in natural language (numbered steps). No code, no query snippets, no regex, no domain-specific language.
3. Each step must state: objective, signals to look for (AST/semantic patterns expressed conceptually), why it maps to the root cause, and how to reduce false positives.
4. Include a short test/validation strategy (what sample cases to run and expected outcomes).
5. List limitations and assumptions (what is Not determinable from inputs).
6. Keep the plan concise: overall ≤ 12 numbered steps and each step ≤ 2 concise sentences. Use bullets where helpful.
7. If information required to design an accurate checker is missing, state it explicitly under "Limitations & Assumptions".

[META]
CVE_NAME: CVE-2024-57948

[INFO]
[PATCH_DESCRIPTION]
 mac802154: check local interfaces before deleting sdata list
 syzkaller reported a corrupted list in ieee802154_if_remove. [1]

 Remove an IEEE 802.15.4 network interface after unregister an IEEE 802.15.4
 hardware device from the system.

 CPU0					CPU1
 ====					====
 genl_family_rcv_msg_doit		ieee802154_unregister_hw
 ieee802154_del_iface			ieee802154_remove_interfaces
 rdev_del_virtual_intf_deprecated	list_del(&sdata->list)
 ieee802154_if_remove
 list_del_rcu

 The net device has been unregistered, since the rcu grace period,
 unregistration must be run before ieee802154_if_remove.
 
 To avoid this issue, add a check for local->interfaces before deleting
 sdata list.

 [1]
 kernel BUG at lib/list_debug.c:58!
 Oops: invalid opcode: 0000 [#1] PREEMPT SMP KASAN PTI
 CPU: 0 UID: 0 PID: 6277 Comm: syz-executor157 Not tainted 6.12.0-rc6-syzkaller-00005-g557329bcecc2 #0
 Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 09/13/2024
 RIP: 0010:__list_del_entry_valid_or_report+0xf4/0x140 lib/list_debug.c:56
 Code: e8 a1 7e 00 07 90 0f 0b 48 c7 c7 e0 37 60 8c 4c 89 fe e8 8f 7e 00 07 90 0f 0b 48 c7 c7 40 38 60 8c 4c 89 fe e8 7d 7e 00 07 90 <0f> 0b 48 c7 c7 a0 38 60 8c 4c 89 fe e8 6b 7e 00 07 90 0f 0b 48 c7
 RSP: 0018:ffffc9000490f3d0 EFLAGS: 00010246
 RAX: 000000000000004e RBX: dead000000000122 RCX: d211eee56bb28d00
 RDX: 0000000000000000 RSI: 0000000080000000 RDI: 0000000000000000
 RBP: ffff88805b278dd8 R08: ffffffff8174a12c R09: 1ffffffff2852f0d
 R10: dffffc0000000000 R11: fffffbfff2852f0e R12: dffffc0000000000
 R13: dffffc0000000000 R14: dead000000000100 R15: ffff88805b278cc0
 FS:  0000555572f94380(0000) GS:ffff8880b8600000(0000) knlGS:0000000000000000
 CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
 CR2: 000056262e4a3000 CR3: 0000000078496000 CR4: 00000000003526f0
 DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
 DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
 Call Trace:
  <TASK>
  __list_del_entry_valid include/linux/list.h:124 [inline]
  __list_del_entry include/linux/list.h:215 [inline]
  list_del_rcu include/linux/rculist.h:157 [inline]
  ieee802154_if_remove+0x86/0x1e0 net/mac802154/iface.c:687
  rdev_del_virtual_intf_deprecated net/ieee802154/rdev-ops.h:24 [inline]
  ieee802154_del_iface+0x2c0/0x5c0 net/ieee802154/nl-phy.c:323
  genl_family_rcv_msg_doit net/netlink/genetlink.c:1115 [inline]
  genl_family_rcv_msg net/netlink/genetlink.c:1195 [inline]
  genl_rcv_msg+0xb14/0xec0 net/netlink/genetlink.c:1210
  netlink_rcv_skb+0x1e3/0x430 net/netlink/af_netlink.c:2551
  genl_rcv+0x28/0x40 net/netlink/genetlink.c:1219
  netlink_unicast_kernel net/netlink/af_netlink.c:1331 [inline]
  netlink_unicast+0x7f6/0x990 net/netlink/af_netlink.c:1357
  netlink_sendmsg+0x8e4/0xcb0 net/netlink/af_netlink.c:1901
  sock_sendmsg_nosec net/socket.c:729 [inline]
  __sock_sendmsg+0x221/0x270 net/socket.c:744
  ____sys_sendmsg+0x52a/0x7e0 net/socket.c:2607
  __sys_sendmsg+0x292/0x380 net/socket.c:2690
  do_syscall_x64 arch/x86/entry/common.c:52 [inline]
  do_syscall_64+0xf3/0x230 arch/x86/entry/common.c:83
  entry_SYSCALL_64_after_hwframe+0x77/0x7f

[PATCH_DIFF]
 diff --git a/net/mac802154/iface.c b/net/mac802154/iface.c
 index c0e2da5072bea2…9e4631fade90c9 100644
 --- a/net/mac802154/iface.c
 +++ b/net/mac802154/iface.c
 @@ -684,6 +684,10 @@ void ieee802154_if_remove(struct ieee802154_sub_if_data *sdata)
   ASSERT_RTNL();

   mutex_lock(&sdata->local->iflist_mtx);
+  if (list_empty(&sdata->local->interfaces)) {
+    mutex_unlock(&sdata->local->iflist_mtx);
+    return;
+  }
   list_del_rcu(&sdata->list);
   mutex_unlock(&sdata->local->iflist_mtx)

[FUNCTION_CONTENT]
void ieee802154_if_remove(struct ieee802154_sub_if_data *sdata)
{
	ASSERT_RTNL();

	mutex_lock(&sdata->local->iflist_mtx);
	list_del_rcu(&sdata->list);
	mutex_unlock(&sdata->local->iflist_mtx);

	synchronize_rcu();
	unregister_netdevice(sdata->dev);
}

/* ----- separator ----- */

	SET_NETDEV_DEV(ndev, &local->phy->dev);
	dev_net_set(ndev, wpan_phy_net(local->hw.phy));
	sdata = netdev_priv(ndev);
	ndev->ieee802154_ptr = &sdata->wpan_dev;
	memcpy(sdata->name, ndev->name, IFNAMSIZ);
	sdata->dev = ndev;
	sdata->wpan_dev.wpan_phy = local->hw.phy;
	sdata->local = local;
	INIT_LIST_HEAD(&sdata->wpan_dev.list);

	/* setup type-dependent data */
	ret = ieee802154_setup_sdata(sdata, type);
	if (ret)
		goto err;

	ret = register_netdevice(ndev);
	if (ret < 0)
		goto err;

	mutex_lock(&local->iflist_mtx);
	list_add_tail_rcu(&sdata->list, &local->interfaces);
	mutex_unlock(&local->iflist_mtx);

	return ndev;

err:
	free_netdev(ndev);
	return ERR_PTR(ret);
}

void ieee802154_if_remove(struct ieee802154_sub_if_data *sdata)
{
	ASSERT_RTNL();

	mutex_lock(&sdata->local->iflist_mtx);
	list_del_rcu(&sdata->list);
	mutex_unlock(&sdata->local->iflist_mtx);

	synchronize_rcu();
	unregister_netdevice(sdata->dev);
}

/* ----- separator ----- */

	INIT_LIST_HEAD(&sdata->wpan_dev.list);

	/* setup type-dependent data */
	ret = ieee802154_setup_sdata(sdata, type);
	if (ret)
		goto err;

	ret = register_netdevice(ndev);
	if (ret < 0)
		goto err;

	mutex_lock(&local->iflist_mtx);
	list_add_tail_rcu(&sdata->list, &local->interfaces);
	mutex_unlock(&local->iflist_mtx);

	return ndev;

err:
	free_netdev(ndev);
	return ERR_PTR(ret);
}

void ieee802154_if_remove(struct ieee802154_sub_if_data *sdata)
{
	ASSERT_RTNL();

	mutex_lock(&sdata->local->iflist_mtx);
	list_del_rcu(&sdata->list);
	mutex_unlock(&sdata->local->iflist_mtx);

	synchronize_rcu();
	unregister_netdevice(sdata->dev);
}

/* ----- separator ----- */

	ASSERT_RTNL();

	mutex_lock(&sdata->local->iflist_mtx);
	list_del_rcu(&sdata->list);
	mutex_unlock(&sdata->local->iflist_mtx);

	synchronize_rcu();
	unregister_netdevice(sdata->dev);
}

void ieee802154_remove_interfaces(struct ieee802154_local *local)
{
	struct ieee802154_sub_if_data *sdata, *tmp;

	mutex_lock(&local->iflist_mtx);
	list_for_each_entry_safe(sdata, tmp, &local->interfaces, list) {
		list_del(&sdata->list);

		unregister_netdevice(sdata->dev);
	}
	mutex_unlock(&local->iflist_mtx);
}



[ROOTCAUSE_ANALYSIS]
1. CVE Identifier
CVE-2024-57948

2. Vulnerability Type
Race condition leading to double list deletion and list corruption (potential kernel crash/DoS).

3. Root Cause Summary
ieee802154_if_remove() unconditionally removed the sub-interface from the interfaces list with list_del_rcu(&sdata->list) without verifying that the element was still linked. During concurrent hardware unregister, ieee802154_remove_interfaces() already removed the same list entry with list_del(), so a subsequent list_del_rcu() on the same sdata corrupted the list, triggering a list_debug BUG. The missing state validation before deletion is the core flaw.

4. Kernel Subsystem Analysis
1) Affected Subsystem:
mac802154 (IEEE 802.15.4 networking), interface lifecycle management in net/mac802154/iface.c.

2) Pre-Patch Flaw:
- ieee802154_if_remove() performed:
  mutex_lock(&sdata->local->iflist_mtx);
  list_del_rcu(&sdata->list);
  mutex_unlock(&sdata->local->iflist_mtx);
  with no check that sdata->list was still on local->interfaces.
- Concurrently, ieee802154_remove_interfaces() iterates local->interfaces and calls list_del(&sdata->list) for each entry under the same mutex, making a later list_del_rcu() on the same sdata a double-remove.

3) Trigger Condition:
- Parallel execution of:
  - CPU0: genl command path ieee802154_del_iface -> ieee802154_if_remove().
  - CPU1: device teardown path ieee802154_unregister_hw -> ieee802154_remove_interfaces(), which empties local->interfaces.
- After CPU1 has removed the entry (and possibly emptied the list), CPU0 still reaches ieee802154_if_remove() and attempts list_del_rcu() on an already unlinked node.

4) Impact Mechanism:
- Double deletion of a list node causes list corruption detected by list_debug (BUG at lib/list_debug.c:58 in __list_del_entry_valid_or_report), leading to kernel crash (DoS). Without list debugging, it risks silent list corruption with subsequent undefined behavior.

5. Patch Analysis
1) Fix Approach:
Add a defensive state check in ieee802154_if_remove() to avoid deleting the list entry if the local interfaces list has already been cleared during hardware removal.

2) Key Code Changes:
- In ieee802154_if_remove():
  - Added:
    if (list_empty(&sdata->local->interfaces)) {
      mutex_unlock(&sdata->local->iflist_mtx);
      return;
    }
  - This is inserted before the existing list_del_rcu(&sdata->list).
- No changes to RCU or unregister ordering in this patch; it strictly guards against double deletion after global list teardown.

3) Locking/Concurrency Impact:
- The new check executes under local->iflist_mtx, ensuring the emptiness test and decision are atomic with respect to other list mutations.
- It prevents the sequence where hardware teardown has emptied the list and a subsequent ieee802154_if_remove() performs a second deletion on an already unlinked node.
- The patch does not alter existing lock acquisition points; it introduces a conditional early return to avoid unsafe list mutation.

6. Broader Kernel Security Implications
- The bug enables a local attacker (via netlink) to trigger a kernel panic by racing interface deletion with device unregister, resulting in denial of service.
- It highlights the need for consistent list manipulation patterns and state checks across concurrent teardown paths (especially mixing list_del and list_del_rcu) and ensuring operations are idempotent or guarded by presence checks.

[REQUEST]
Produce a detection plan for a CodeQL-based static checker that would detect similar pre-patch flaws.
Requirements for the plan:
- High-level detection goal (1–2 lines).
- A numbered list of detection steps (objective, conceptual AST/semantic signals, FP mitigation).
- Types of program elements to target (functions, call sites, allocation sites, condition checks, lock boundaries, function return-value uses, etc.).
- Dataflow/taint patterns to consider (if applicable), described conceptually.
- Minimal test cases to validate the checker (positive/negative examples).
- Estimated effort/priority (low/medium/high) and likely false-positive sources.
- A short "Limitations & Assumptions" block.

OUTPUT FORMAT (produce exactly this structure; no extra text):
1. Plan Summary
{one-line summary}

2. Detection Steps
1) Step 1: {objective — conceptual signals — FP mitigation}
2) Step 2: {objective — conceptual signals — FP mitigation}
...
(narrow to ≤12 steps)

3. Target Elements
- {list of element types to inspect}

4. Dataflow / Taint Considerations
- {conceptual taint/flow rules to track}

5. Validation & Test Cases
- Positive: {brief}
- Negative: {brief}
- Test harness notes: {brief}

6. Estimated Effort & Priority
{low/medium/high}

7. Likely False-Positive Sources & Mitigations
- {list}

8. Limitations & Assumptions
- {explicit missing info or assumptions}

CONSTRAINTS:
- Do not emit any CodeQL, SQL, pseudocode, or query fragments.
- Keep answers evidence-based and reference which provided field supported each major choice (e.g., “based on [PATCH_DIFF] hunk that adds X”).
- Output must be machine-parseable: keep the exact numbered section headings as above.