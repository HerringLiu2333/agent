You are a senior static-analysis engineer and CodeQL design expert.
Task: Based only on the supplied materials, produce a human-readable detection plan (natural-language) for a CodeQL checker that would detect the same class of vulnerability described. DO NOT produce any query code or pseudocode — the output must be purely natural language steps and rationale.

Rules:
1. Only use evidence contained in the sections labeled [PATCH_DESCRIPTION], [PATCH_DIFF], [FILE_CONTENT], and [ROOTCAUSE_ANALYSIS]. Do not invent facts.
2. The plan must be a step-by-step detection strategy in natural language (numbered steps). No code, no query snippets, no regex, no domain-specific language.
3. Each step must state: objective, signals to look for (AST/semantic patterns expressed conceptually), why it maps to the root cause, and how to reduce false positives.
4. Include a short test/validation strategy (what sample cases to run and expected outcomes).
5. List limitations and assumptions (what is Not determinable from inputs).
6. Keep the plan concise: overall ≤ 12 numbered steps and each step ≤ 2 concise sentences. Use bullets where helpful.
7. If information required to design an accurate checker is missing, state it explicitly under "Limitations & Assumptions".

[META]
CVE_NAME: CVE-2024-58067

[INFO]
[PATCH_DESCRIPTION]
 clk: mmp: pxa1908-mpmu: Fix a NULL vs IS_ERR() check
 The devm_kzalloc() function returns NULL on error, not error pointers.
 Update the check to match.
 
 Fixes: ebac87cdd230 ("clk: mmp: Add Marvell PXA1908 MPMU driver")

[PATCH_DIFF]
 diff --git a/drivers/clk/mmp/clk-pxa1908-mpmu.c b/drivers/clk/mmp/clk-pxa1908-mpmu.c
 index e3337bacaadd5a…90b4b248857406 100644
 — a/drivers/clk/mmp/clk-pxa1908-mpmu.c
 +++ b/drivers/clk/mmp/clk-pxa1908-mpmu.c
 @@ -78,8 +78,8 @@ static int pxa1908_mpmu_probe(struct platform_device *pdev)
 struct pxa1908_clk_unit *pxa_unit;

 pxa_unit = devm_kzalloc(&pdev->dev, sizeof(*pxa_unit), GFP_KERNEL);
 - if (IS_ERR(pxa_unit))
 - return PTR_ERR(pxa_unit);
 + if (!pxa_unit)
 + return -ENOMEM;

 pxa_unit->base = devm_platform_ioremap_resource(pdev, 0);
 if (IS_ERR(pxa_unit->base))

[FILE_CONTENT]
// SPDX-License-Identifier: GPL-2.0-only
#include <linux/bits.h>
#include <linux/clk-provider.h>
#include <linux/module.h>
#include <linux/platform_device.h>
#include <linux/units.h>

#include <dt-bindings/clock/marvell,pxa1908.h>

#include "clk.h"

#define MPMU_UART_PLL		0x14

#define MPMU_NR_CLKS		39

struct pxa1908_clk_unit {
	struct mmp_clk_unit unit;
	void __iomem *base;
};

static struct mmp_param_fixed_rate_clk fixed_rate_clks[] = {
	{PXA1908_CLK_CLK32, "clk32", NULL, 0, 32768},
	{PXA1908_CLK_VCTCXO, "vctcxo", NULL, 0, 26 * HZ_PER_MHZ},
	{PXA1908_CLK_PLL1_624, "pll1_624", NULL, 0, 624 * HZ_PER_MHZ},
	{PXA1908_CLK_PLL1_416, "pll1_416", NULL, 0, 416 * HZ_PER_MHZ},
	{PXA1908_CLK_PLL1_499, "pll1_499", NULL, 0, 499 * HZ_PER_MHZ},
	{PXA1908_CLK_PLL1_832, "pll1_832", NULL, 0, 832 * HZ_PER_MHZ},
	{PXA1908_CLK_PLL1_1248, "pll1_1248", NULL, 0, 1248 * HZ_PER_MHZ},
};

static struct mmp_param_fixed_factor_clk fixed_factor_clks[] = {
	{PXA1908_CLK_PLL1_D2, "pll1_d2", "pll1_624", 1, 2, 0},
	{PXA1908_CLK_PLL1_D4, "pll1_d4", "pll1_d2", 1, 2, 0},
	{PXA1908_CLK_PLL1_D6, "pll1_d6", "pll1_d2", 1, 3, 0},
	{PXA1908_CLK_PLL1_D8, "pll1_d8", "pll1_d4", 1, 2, 0},
	{PXA1908_CLK_PLL1_D12, "pll1_d12", "pll1_d6", 1, 2, 0},
	{PXA1908_CLK_PLL1_D13, "pll1_d13", "pll1_624", 1, 13, 0},
	{PXA1908_CLK_PLL1_D16, "pll1_d16", "pll1_d8", 1, 2, 0},
	{PXA1908_CLK_PLL1_D24, "pll1_d24", "pll1_d12", 1, 2, 0},
	{PXA1908_CLK_PLL1_D48, "pll1_d48", "pll1_d24", 1, 2, 0},
	{PXA1908_CLK_PLL1_D96, "pll1_d96", "pll1_d48", 1, 2, 0},
	{PXA1908_CLK_PLL1_32, "pll1_32", "pll1_d13", 2, 3, 0},
	{PXA1908_CLK_PLL1_208, "pll1_208", "pll1_d2", 2, 3, 0},
	{PXA1908_CLK_PLL1_117, "pll1_117", "pll1_624", 3, 16, 0},
};

static struct u32_fract uart_factor_tbl[] = {
	{.numerator = 8125, .denominator = 1536},	/* 14.745MHz */
};

static struct mmp_clk_factor_masks uart_factor_masks = {
	.factor = 2,
	.num_mask = GENMASK(12, 0),
	.den_mask = GENMASK(12, 0),
	.num_shift = 16,
	.den_shift = 0,
};

static void pxa1908_pll_init(struct pxa1908_clk_unit *pxa_unit)
{
	struct mmp_clk_unit *unit = &pxa_unit->unit;

	mmp_register_fixed_rate_clks(unit, fixed_rate_clks,
					ARRAY_SIZE(fixed_rate_clks));

	mmp_register_fixed_factor_clks(unit, fixed_factor_clks,
					ARRAY_SIZE(fixed_factor_clks));

	mmp_clk_register_factor("uart_pll", "pll1_d4",
			CLK_SET_RATE_PARENT,
			pxa_unit->base + MPMU_UART_PLL,
			&uart_factor_masks, uart_factor_tbl,
			ARRAY_SIZE(uart_factor_tbl), NULL);
}

static int pxa1908_mpmu_probe(struct platform_device *pdev)
{
	struct pxa1908_clk_unit *pxa_unit;

	pxa_unit = devm_kzalloc(&pdev->dev, sizeof(*pxa_unit), GFP_KERNEL);
	if (IS_ERR(pxa_unit))
		return PTR_ERR(pxa_unit);

	pxa_unit->base = devm_platform_ioremap_resource(pdev, 0);
	if (IS_ERR(pxa_unit->base))
		return PTR_ERR(pxa_unit->base);

	mmp_clk_init(pdev->dev.of_node, &pxa_unit->unit, MPMU_NR_CLKS);

	pxa1908_pll_init(pxa_unit);

	return 0;
}

static const struct of_device_id pxa1908_mpmu_match_table[] = {
	{ .compatible = "marvell,pxa1908-mpmu" },
	{ }
};
MODULE_DEVICE_TABLE(of, pxa1908_mpmu_match_table);

static struct platform_driver pxa1908_mpmu_driver = {
	.probe = pxa1908_mpmu_probe,
	.driver = {
		.name = "pxa1908-mpmu",
		.of_match_table = pxa1908_mpmu_match_table
	}
};
module_platform_driver(pxa1908_mpmu_driver);

MODULE_AUTHOR("Duje Mihanović <duje.mihanovic@skole.hr>");
MODULE_DESCRIPTION("Marvell PXA1908 MPMU Clock Driver");
MODULE_LICENSE("GPL");




[ROOTCAUSE_ANALYSIS]
1. CVE Identifier
CVE-2024-58067

2. Vulnerability Type
NULL pointer dereference due to incorrect error handling (NULL vs ERR_PTR misuse)

3. Root Cause Summary
The probe routine in the PXA1908 MPMU clock driver incorrectly treats the result of devm_kzalloc() as an ERR_PTR and checks it with IS_ERR(), which never triggers on NULL. When devm_kzalloc() fails and returns NULL, the code proceeds to dereference the NULL pointer, causing a kernel NULL pointer dereference.

4. Kernel Subsystem Analysis
1) Affected Subsystem:
Linux clock framework, Marvell PXA1908 MPMU driver (drivers/clk/mmp/clk-pxa1908-mpmu.c)

2) Pre-Patch Flaw:
In pxa1908_mpmu_probe(), the code uses:
"pxa_unit = devm_kzalloc(&pdev->dev, sizeof(*pxa_unit), GFP_KERNEL);
 if (IS_ERR(pxa_unit))
  return PTR_ERR(pxa_unit);"
devm_kzalloc() returns NULL on failure, not ERR_PTR, so IS_ERR(pxa_unit) does not detect allocation failure.

3) Trigger Condition:
Allocation failure in devm_kzalloc() (e.g., memory pressure) during device probe.

4) Impact Mechanism:
Because the NULL is not detected, the subsequent write "pxa_unit->base = devm_platform_ioremap_resource(pdev, 0);" dereferences pxa_unit, leading to a NULL pointer dereference and kernel crash (DoS) during driver initialization.

5. Patch Analysis
1) Fix Approach:
Replace the incorrect IS_ERR()/PTR_ERR() check with a proper NULL check and return -ENOMEM to prevent dereferencing a NULL pointer.

2) Key Code Changes:
- Changed:
"if (IS_ERR(pxa_unit))
    return PTR_ERR(pxa_unit);"
to:
"if (!pxa_unit)
    return -ENOMEM;"
This aligns with devm_kzalloc() semantics (NULL on error).
No change to the subsequent IS_ERR() check for devm_platform_ioremap_resource(), which correctly returns ERR_PTR on error.

3) Locking/Concurrency Impact:
None. The change is confined to error handling in the single-threaded probe path and does not alter locking or concurrency behavior.

6. Broader Kernel Security Implications
Mixing NULL-returning allocators with ERR_PTR-style checks is a common source of NULL dereferences in driver probe paths, leading to system instability or denial of service during initialization. Ensuring correct error-handling patterns for devm_* APIs improves robustness of driver subsystems and reduces crash surfaces triggered by resource exhaustion or misconfiguration.

[REQUEST]
Produce a detection plan for a CodeQL-based static checker that would detect similar pre-patch flaws.
Requirements for the plan:
- High-level detection goal (1–2 lines).
- A numbered list of detection steps (objective, conceptual AST/semantic signals, FP mitigation).
- Types of program elements to target (functions, call sites, allocation sites, condition checks, lock boundaries, function return-value uses, etc.).
- Dataflow/taint patterns to consider (if applicable), described conceptually.
- Minimal test cases to validate the checker (positive/negative examples).
- Estimated effort/priority (low/medium/high) and likely false-positive sources.
- A short "Limitations & Assumptions" block.

OUTPUT FORMAT (produce exactly this structure; no extra text):
1. Plan Summary
{one-line summary}

2. Detection Steps
1) Step 1: {objective — conceptual signals — FP mitigation}
2) Step 2: {objective — conceptual signals — FP mitigation}
...
(narrow to ≤12 steps)

3. Target Elements
- {list of element types to inspect}

4. Dataflow / Taint Considerations
- {conceptual taint/flow rules to track}

5. Validation & Test Cases
- Positive: {brief}
- Negative: {brief}
- Test harness notes: {brief}

6. Estimated Effort & Priority
{low/medium/high}

7. Likely False-Positive Sources & Mitigations
- {list}

8. Limitations & Assumptions
- {explicit missing info or assumptions}

CONSTRAINTS:
- Do not emit any CodeQL, SQL, pseudocode, or query fragments.
- Keep answers evidence-based and reference which provided field supported each major choice (e.g., “based on [PATCH_DIFF] hunk that adds X”).
- Output must be machine-parseable: keep the exact numbered section headings as above.