You are a senior static-analysis engineer and CodeQL design expert.
Task: Based only on the supplied materials, produce a human-readable detection plan (natural-language) for a CodeQL checker that would detect the same class of vulnerability described. DO NOT produce any query code or pseudocode — the output must be purely natural language steps and rationale.

Rules:
1. Only use evidence contained in the sections labeled [PATCH_DESCRIPTION], [PATCH_DIFF], and [ROOTCAUSE_ANALYSIS]. Do not invent facts.
2. The plan must be a step-by-step detection strategy in natural language (numbered steps). No code, no query snippets, no regex, no domain-specific language.
3. Each step must state: objective, signals to look for (AST/semantic patterns expressed conceptually), why it maps to the root cause, and how to reduce false positives.
4. Include a short test/validation strategy (what sample cases to run and expected outcomes).
5. List limitations and assumptions (what is Not determinable from inputs).
6. Keep the plan concise: overall ≤ 12 numbered steps and each step ≤ 2 concise sentences. Use bullets where helpful.
7. If information required to design an accurate checker is missing, state it explicitly under "Limitations & Assumptions".

[META]
CVE_NAME: CVE-2024-58067

[INFO]
[PATCH_DESCRIPTION]
 clk: mmp: pxa1908-mpmu: Fix a NULL vs IS_ERR() check
 The devm_kzalloc() function returns NULL on error, not error pointers.
 Update the check to match.
 
 Fixes: ebac87cdd230 ("clk: mmp: Add Marvell PXA1908 MPMU driver")

[PATCH_DIFF]
 diff --git a/drivers/clk/mmp/clk-pxa1908-mpmu.c b/drivers/clk/mmp/clk-pxa1908-mpmu.c
 index e3337bacaadd5a…90b4b248857406 100644
 — a/drivers/clk/mmp/clk-pxa1908-mpmu.c
 +++ b/drivers/clk/mmp/clk-pxa1908-mpmu.c
 @@ -78,8 +78,8 @@ static int pxa1908_mpmu_probe(struct platform_device *pdev)
 struct pxa1908_clk_unit *pxa_unit;

 pxa_unit = devm_kzalloc(&pdev->dev, sizeof(*pxa_unit), GFP_KERNEL);
 - if (IS_ERR(pxa_unit))
 - return PTR_ERR(pxa_unit);
 + if (!pxa_unit)
 + return -ENOMEM;

 pxa_unit->base = devm_platform_ioremap_resource(pdev, 0);
 if (IS_ERR(pxa_unit->base))



[ROOTCAUSE_ANALYSIS]
1. CVE Identifier
CVE-2024-58067

2. Vulnerability Type
Improper error handling leading to NULL pointer dereference (kernel crash/DoS)

3. Root Cause Summary
In pxa1908_mpmu_probe(), the driver incorrectly used IS_ERR()/PTR_ERR() to check the result of devm_kzalloc(), which returns NULL on failure, not ERR_PTR(). As a result, allocation failures were not detected and the code immediately dereferenced the NULL pointer (pxa_unit->base = ...), causing a kernel NULL pointer dereference during probe. The patch corrects the check to (!pxa_unit) and returns -ENOMEM, preventing dereference on failure.

4. Kernel Subsystem Analysis
1) Affected Subsystem:
Clock framework, Marvell PXA1908 MPMU driver (drivers/clk/mmp/clk-pxa1908-mpmu.c)

2) Pre-Patch Flaw:
In pxa1908_mpmu_probe(), after pxa_unit = devm_kzalloc(...), the code did:
“if (IS_ERR(pxa_unit)) return PTR_ERR(pxa_unit);”
This is incorrect for devm_kzalloc(), which returns NULL on error; thus the failure path was not taken.

3) Trigger Condition:
devm_kzalloc(&pdev->dev, sizeof(*pxa_unit), GFP_KERNEL) returns NULL due to allocation failure (e.g., memory pressure) during device probe.

4) Impact Mechanism:
The code proceeds to use pxa_unit despite being NULL (e.g., “pxa_unit->base = devm_platform_ioremap_resource(pdev, 0);”), leading to a NULL pointer dereference and kernel oops/panic, resulting in denial-of-service during driver initialization.

5. Patch Analysis
1) Fix Approach:
Replace the erroneous IS_ERR()/PTR_ERR() error check with a proper NULL check and return -ENOMEM on allocation failure.

2) Key Code Changes:
- “if (IS_ERR(pxa_unit)) return PTR_ERR(pxa_unit);”
+ “if (!pxa_unit) return -ENOMEM;”
Subsequent use of IS_ERR() remains correct for devm_platform_ioremap_resource(), which can return ERR_PTR().

3) Locking/Concurrency Impact:
None. The change is confined to error handling in probe; no locking or concurrency semantics were modified.

6. Broader Kernel Security Implications
Incorrect use of IS_ERR() for functions that return NULL can convert ordinary allocation failures into kernel crashes, enabling system-wide denial-of-service during driver probe or module load. This fix improves robustness of the clk subsystem and emphasizes the need for correct error-handling patterns with devm_* helpers (distinguishing NULL returns from ERR_PTR() returns).

[REQUEST]
Produce a detection plan for a CodeQL-based static checker that would detect similar pre-patch flaws.
Requirements for the plan:
- High-level detection goal (1–2 lines).
- A numbered list of detection steps (objective, conceptual AST/semantic signals, FP mitigation).
- Types of program elements to target (functions, call sites, allocation sites, condition checks, lock boundaries, function return-value uses, etc.).
- Dataflow/taint patterns to consider (if applicable), described conceptually.
- Minimal test cases to validate the checker (positive/negative examples).
- Estimated effort/priority (low/medium/high) and likely false-positive sources.
- A short "Limitations & Assumptions" block.

OUTPUT FORMAT (produce exactly this structure; no extra text):
1. Plan Summary
{one-line summary}

2. Detection Steps
1) Step 1: {objective — conceptual signals — FP mitigation}
2) Step 2: {objective — conceptual signals — FP mitigation}
...
(narrow to ≤12 steps)

3. Target Elements
- {list of element types to inspect}

4. Dataflow / Taint Considerations
- {conceptual taint/flow rules to track}

5. Validation & Test Cases
- Positive: {brief}
- Negative: {brief}
- Test harness notes: {brief}

6. Estimated Effort & Priority
{low/medium/high}

7. Likely False-Positive Sources & Mitigations
- {list}

8. Limitations & Assumptions
- {explicit missing info or assumptions}

CONSTRAINTS:
- Do not emit any CodeQL, SQL, pseudocode, or query fragments.
- Keep answers evidence-based and reference which provided field supported each major choice (e.g., “based on [PATCH_DIFF] hunk that adds X”).
- Output must be machine-parseable: keep the exact numbered section headings as above.