You are a senior static-analysis engineer and CodeQL design expert.
Task: Based only on the supplied materials, produce a human-readable detection plan (natural-language) for a CodeQL checker that would detect the same class of vulnerability described. DO NOT produce any query code or pseudocode — the output must be purely natural language steps and rationale.

Rules:
1. Only use evidence contained in the sections labeled [PATCH_DESCRIPTION], [PATCH_DIFF], and [ROOTCAUSE_ANALYSIS]. Do not invent facts.
2. The plan must be a step-by-step detection strategy in natural language (numbered steps). No code, no query snippets, no regex, no domain-specific language.
3. Each step must state: objective, signals to look for (AST/semantic patterns expressed conceptually), why it maps to the root cause, and how to reduce false positives.
4. Include a short test/validation strategy (what sample cases to run and expected outcomes).
5. List limitations and assumptions (what is Not determinable from inputs).
6. Keep the plan concise: overall ≤ 12 numbered steps and each step ≤ 2 concise sentences. Use bullets where helpful.
7. If information required to design an accurate checker is missing, state it explicitly under "Limitations & Assumptions".

[META]
CVE_NAME: CVE-2025-38260

[INFO]
[PATCH_DESCRIPTION]
    btrfs: handle csum tree error with rescue=ibadroots correctly
    [BUG]
    There is syzbot based reproducer that can crash the kernel, with the
    following call trace: (With some debug output added)
    
     DEBUG: rescue=ibadroots parsed
     BTRFS: device fsid 14d642db-7b15-43e4-81e6-4b8fac6a25f8 devid 1 transid 8 /dev/loop0 (7:0) scanned by repro (1010)
     BTRFS info (device loop0): first mount of filesystem 14d642db-7b15-43e4-81e6-4b8fac6a25f8
     BTRFS info (device loop0): using blake2b (blake2b-256-generic) checksum algorithm
     BTRFS info (device loop0): using free-space-tree
     BTRFS warning (device loop0): checksum verify failed on logical 5312512 mirror 1 wanted 0xb043382657aede36608fd3386d6b001692ff406164733d94e2d9a180412c6003 found 0x810ceb2bacb7f0f9eb2bf3b2b15c02af867cb35ad450898169f3b1f0bd818651 level 0
     DEBUG: read tree root path failed for tree csum, ret=-5
     BTRFS warning (device loop0): checksum verify failed on logical 5328896 mirror 1 wanted 0x51be4e8b303da58e6340226815b70e3a93592dac3f30dd510c7517454de8567a found 0x51be4e8b303da58e634022a315b70e3a93592dac3f30dd510c7517454de8567a level 0
     BTRFS warning (device loop0): checksum verify failed on logical 5292032 mirror 1 wanted 0x1924ccd683be9efc2fa98582ef58760e3848e9043db8649ee382681e220cdee4 found 0x0cb6184f6e8799d9f8cb335dccd1d1832da1071d12290dab3b85b587ecacca6e level 0
     process 'repro' launched './file2' with NULL argv: empty string added
     DEBUG: no csum root, idatacsums=0 ibadroots=134217728
     Oops: general protection fault, probably for non-canonical address 0xdffffc0000000041: 0000 [#1] SMP KASAN NOPTI
     KASAN: null-ptr-deref in range [0x0000000000000208-0x000000000000020f]
     CPU: 5 UID: 0 PID: 1010 Comm: repro Tainted: G           OE       6.15.0-custom+ #249 PREEMPT(full)
     Hardware name: QEMU Standard PC (Q35 + ICH9, 2009), BIOS unknown 02/02/2022
     RIP: 0010:btrfs_lookup_csum+0x93/0x3d0 [btrfs]
     Call Trace:
      <TASK>
      btrfs_lookup_bio_sums+0x47a/0xdf0 [btrfs]
      btrfs_submit_bbio+0x43e/0x1a80 [btrfs]
      submit_one_bio+0xde/0x160 [btrfs]
      btrfs_readahead+0x498/0x6a0 [btrfs]
      read_pages+0x1c3/0xb20
      page_cache_ra_order+0x4b5/0xc20
      filemap_get_pages+0x2d3/0x19e0
      filemap_read+0x314/0xde0
      __kernel_read+0x35b/0x900
      bprm_execve+0x62e/0x1140
      do_execveat_common.isra.0+0x3fc/0x520
      __x64_sys_execveat+0xdc/0x130
      do_syscall_64+0x54/0x1d0
      entry_SYSCALL_64_after_hwframe+0x76/0x7e
     ---[ end trace 0000000000000000 ]---
    
    [CAUSE]
    Firstly the fs has a corrupted csum tree root, thus to mount the fs we
    have to go "ro,rescue=ibadroots" mount option.
    
    Normally with that mount option, a bad csum tree root should set
    BTRFS_FS_STATE_NO_DATA_CSUMS flag, so that any future data read will
    ignore csum search.
    
    But in this particular case, we have the following call trace that
    caused NULL csum root, but not setting BTRFS_FS_STATE_NO_DATA_CSUMS:
    
    load_global_roots_objectid():
    
    		ret = btrfs_search_slot();
    		/* Succeeded */
    		btrfs_item_key_to_cpu()
    		found = true;
    		/* We found the root item for csum tree. */
    		root = read_tree_root_path();
    		if (IS_ERR(root)) {
    			if (!btrfs_test_opt(fs_info, IGNOREBADROOTS))
    			/*
    			 * Since we have rescue=ibadroots mount option,
    			 * @ret is still 0.
    			 */
    			break;
    	if (!found || ret) {
    		/* @found is true, @ret is 0, error handling for csum
    		 * tree is skipped.
    		 */
    	}
    
    This means we completely skipped to set BTRFS_FS_STATE_NO_DATA_CSUMS if
    the csum tree is corrupted, which results unexpected later csum lookup.
    
    [FIX]
    If read_tree_root_path() failed, always populate @ret to the error
    number.
    
    As at the end of the function, we need @ret to determine if we need to
    do the extra error handling for csum tree.
    
    Fixes: abed4aaae4f7 ("btrfs: track the csum, extent, and free space trees in a rb tree")

[PATCH_DIFF]
    diff --git a/fs/btrfs/disk-io.c b/fs/btrfs/disk-io.c
    index f48f9d924a6216..0d6ad7512f217c 100644
    --- a/fs/btrfs/disk-io.c
    +++ b/fs/btrfs/disk-io.c
    @@ -2158,8 +2158,7 @@ static int load_global_roots_objectid(struct btrfs_root *tree_root,
     		found = true;
     		root = read_tree_root_path(tree_root, path, &key);
     		if (IS_ERR(root)) {
    -			if (!btrfs_test_opt(fs_info, IGNOREBADROOTS))
    -				ret = PTR_ERR(root);
    +			ret = PTR_ERR(root);
     			break;
     		}
     		set_bit(BTRFS_ROOT_TRACK_DIRTY, &root->state);



[ROOTCAUSE_ANALYSIS]
1. CVE Identifier
CVE-2025-38260

2. Vulnerability Type
Improper error handling leading to NULL pointer dereference (Denial of Service)

3. Root Cause Summary
When mounting a btrfs filesystem with a corrupted checksum (csum) tree and the rescue=ibadroots option, load_global_roots_objectid() failed to propagate the error from read_tree_root_path() into ret if IGNOREBADROOTS was set. The pre-patch logic “if (IS_ERR(root)) { if (!btrfs_test_opt(fs_info, IGNOREBADROOTS)) ret = PTR_ERR(root); break; }” left ret as 0 while found=true, causing the end-of-function error handling for the csum tree to be skipped. As a result, BTRFS_FS_STATE_NO_DATA_CSUMS was not set and the csum root remained NULL. Subsequent read paths performed checksum lookups (btrfs_lookup_bio_sums -> btrfs_lookup_csum) and dereferenced the NULL csum root, crashing the kernel.

4. Kernel Subsystem Analysis
1) Affected Subsystem:
Btrfs filesystem (fs/btrfs), disk-io global root loading and checksum tree handling

2) Pre-Patch Flaw:
In load_global_roots_objectid(), error from read_tree_root_path() was not recorded in ret when IGNOREBADROOTS (rescue=ibadroots) was enabled, due to the conditional:
“if (IS_ERR(root)) {
    if (!btrfs_test_opt(fs_info, IGNOREBADROOTS))
        ret = PTR_ERR(root);
    break;
}”
This caused subsequent logic that depends on ret to skip csum-tree-specific error handling (including setting BTRFS_FS_STATE_NO_DATA_CSUMS).

3) Trigger Condition:
- Filesystem with a corrupted csum tree root.
- Mounted with rescue=ibadroots (IGNOREBADROOTS option active), leading read_tree_root_path() to fail but ret remaining 0.
- Any data read path invoking checksum lookup (e.g., file read/readahead) after mount.

4) Impact Mechanism:
The csum root pointer remained NULL and the filesystem state flag to disable data checksums was not set. Later calls to btrfs_lookup_csum during I/O assumed a valid csum root and dereferenced NULL, causing a general protection fault and kernel crash (DoS).

5. Patch Analysis
1) Fix Approach:
Ensure error propagation regardless of IGNOREBADROOTS: always set ret = PTR_ERR(root) when read_tree_root_path() fails, so the end-of-function csum-tree error handling runs and flags are set appropriately.

2) Key Code Changes:
In fs/btrfs/disk-io.c: load_global_roots_objectid():
- Replaced conditional assignment with unconditional error propagation:
  Pre-patch: “if (!btrfs_test_opt(fs_info, IGNOREBADROOTS)) ret = PTR_ERR(root);”
  Post-patch: “ret = PTR_ERR(root);”
This guarantees ret reflects the failure for the csum root and triggers the code path that sets BTRFS_FS_STATE_NO_DATA_CSUMS.

3) Locking/Concurrency Impact:
No locking or concurrency changes. The patch solely adjusts error handling and state propagation; no modifications to lock acquisition/release or ordering.

6. Broader Kernel Security Implications
Proper error propagation in filesystem mount paths is critical to prevent kernel crashes from malformed or corrupted on-disk structures. This fix prevents unprivileged users from causing DoS by mounting or accessing a corrupted btrfs image with rescue options. It improves robustness by ensuring the read path does not attempt checksum lookups when the csum tree is invalid, reducing exposure to fuzzing-induced crashes and strengthening overall filesystem error handling.

[REQUEST]
Produce a detection plan for a CodeQL-based static checker that would detect similar pre-patch flaws.
Requirements for the plan:
- High-level detection goal (1–2 lines).
- A numbered list of detection steps (objective, conceptual AST/semantic signals, FP mitigation).
- Types of program elements to target (functions, call sites, allocation sites, condition checks, lock boundaries, function return-value uses, etc.).
- Dataflow/taint patterns to consider (if applicable), described conceptually.
- Minimal test cases to validate the checker (positive/negative examples).
- Estimated effort/priority (low/medium/high) and likely false-positive sources.
- A short "Limitations & Assumptions" block.

OUTPUT FORMAT (produce exactly this structure; no extra text):
1. Plan Summary
{one-line summary}

2. Detection Steps
1) Step 1: {objective — conceptual signals — FP mitigation}
2) Step 2: {objective — conceptual signals — FP mitigation}
...
(narrow to ≤12 steps)

3. Target Elements
- {list of element types to inspect}

4. Dataflow / Taint Considerations
- {conceptual taint/flow rules to track}

5. Validation & Test Cases
- Positive: {brief}
- Negative: {brief}
- Test harness notes: {brief}

6. Estimated Effort & Priority
{low/medium/high}

7. Likely False-Positive Sources & Mitigations
- {list}

8. Limitations & Assumptions
- {explicit missing info or assumptions}

CONSTRAINTS:
- Do not emit any CodeQL, SQL, pseudocode, or query fragments.
- Keep answers evidence-based and reference which provided field supported each major choice (e.g., “based on [PATCH_DIFF] hunk that adds X”).
- Output must be machine-parseable: keep the exact numbered section headings as above.