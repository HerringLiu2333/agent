You are a senior Linux kernel vulnerability analyst.
Task: Produce a structured root-cause analysis of the vulnerability that existed BEFORE the patch, strictly following the [OUTPUT FORMAT] below.

Rules:
1. Follow the [OUTPUT FORMAT] exactly and populate every field. Use evidence from [PATCH_DIFF], [PATCH_DESCRIPTION].
2. Root cause = the flawed or missing pre-patch logic that the patch corrects (e.g., missing validation, incorrect locking/ordering, race window, unsafe access, integer/length misuse, lifetime/refcount bug, pointer misuse).
3. Be evidence-driven: reference function names, local context, and hunk scope in the diff; you may quote 1–3 lines of original (pre-patch) code only when necessary to support claims; avoid long code dumps.
4. Patch analysis must map each fix to the identified root cause (e.g., added checks, lock adjustments, lifetime/RCU changes, bounds fixes, condition rewrites).
5. Concurrency/locking: when relevant, explicitly state missing/incorrect locks, RCU usage, atomicity, or ordering and what the patch changed (lock/unlock points, ordering changes).
6. Memory/safety: when relevant, specify trigger conditions and impact (UAF, OOB, double free, uninitialized use, integer overflow/underflow, length miscalculation, TOCTOU, etc.).
7. Use only the provided materials ([PATCH_DIFF], [PATCH_DESCRIPTION]). Do not speculate; when uncertain, state “Unknown/Not determinable”.
8. Keep it concise and technical: 3–8 clear sentences or bullet points per subsection.
9. Output nothing beyond the [OUTPUT FORMAT]; no extra headers, prefaces, or trailing notes.
10. If the root cause cannot be identified, state “Unknown/Not determinable” in the relevant subsection, but complete the remaining sections using available evidence.

[META]
CVE_NAME: CVE-2024-57949

[PATCH_DESCRIPTION]
 irqchip/gic-v3-its: Don't enable interrupts in its_irq_set_vcpu_affinity()
 commit 35cb2c6ce7da545f3b5cb1e6473ad7c3a6f08310 upstream.
 
 The following call-chain leads to enabling interrupts in a nested interrupt
 disabled section:

 irq_set_vcpu_affinity()
   irq_get_desc_lock()
      raw_spin_lock_irqsave()   <--- Disable interrupts
   its_irq_set_vcpu_affinity()
      guard(raw_spinlock_irq)   <--- Enables interrupts when leaving the guard()
   irq_put_desc_unlock()        <--- Warns because interrupts are enabled

 This was broken in commit b97e8a2f7130, which replaced the original
 raw_spin_[un]lock() pair with guard(raw_spinlock_irq).

 Fix the issue by using guard(raw_spinlock).

 [ tglx: Massaged change log ]
 
 Fixes: b97e8a2f7130 ("irqchip/gic-v3-its: Fix potential race condition in its_vlpi_prop_update()")

[PATCH_DIFF]
diff --git a/drivers/irqchip/irq-gic-v3-its.c b/drivers/irqchip/irq-gic-v3-its.c
index 30e60bcc3b4e0b...4f8512385870a8 100644
--- a/drivers/irqchip/irq-gic-v3-its.c
+++ b/drivers/irqchip/irq-gic-v3-its.c
@@ -1967,7 +1967,7 @@ static int its_irq_set_vcpu_affinity(struct irq_data *d, void vcpu_info)
	if (!is_v4(its_dev->its))
		return -EINVAL;

-	guard(raw_spinlock_irq)(&its_dev->event_map.vlpi_lock);
+	guard(raw_spinlock)(&its_dev->event_map.vlpi_lock);

	/* Unmap request? /
	if (!info)

[OUTPUT FORMAT]
1. CVE Identifier
{{CVE Identifier}}

2. Vulnerability Type
{{Vulnerability Type}}

3. Root Cause Summary
{{Root Cause Summary}}

4. Kernel Subsystem Analysis
1) Affected Subsystem:
{{Affected Subsystem}}
2) Pre-Patch Flaw:
{{Pre-Patch Flaw}}
3) Trigger Condition:
{{Trigger Condition}}
4) Impact Mechanism:
{{Impact Mechanism}}

5. Patch Analysis
1) Fix Approach:
{{Fix Approach}}
2) Key Code Changes:
{{Key Code Changes}}
3) Locking/Concurrency Impact:
{{Locking/Concurrency Impact}}

6. Broader Kernel Security Implications
{{Broader Kernel Security Implications}}