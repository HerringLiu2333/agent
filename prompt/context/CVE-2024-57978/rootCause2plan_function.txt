You are a senior static-analysis engineer and CodeQL design expert.
Task: Based only on the supplied materials, produce a human-readable detection plan (natural-language) for a CodeQL checker that would detect the same class of vulnerability described. DO NOT produce any query code or pseudocode — the output must be purely natural language steps and rationale.

Rules:
1. Only use evidence contained in the sections labeled [PATCH_DESCRIPTION], [PATCH_DIFF], [FUNCTION_CONTENT], and [ROOTCAUSE_ANALYSIS]. Do not invent facts.
2. The plan must be a step-by-step detection strategy in natural language (numbered steps). No code, no query snippets, no regex, no domain-specific language.
3. Each step must state: objective, signals to look for (AST/semantic patterns expressed conceptually), why it maps to the root cause, and how to reduce false positives.
4. Include a short test/validation strategy (what sample cases to run and expected outcomes).
5. List limitations and assumptions (what is Not determinable from inputs).
6. Keep the plan concise: overall ≤ 12 numbered steps and each step ≤ 2 concise sentences. Use bullets where helpful.
7. If information required to design an accurate checker is missing, state it explicitly under "Limitations & Assumptions".

[META]
CVE_NAME: CVE-2024-57978

[INFO]
[PATCH_DESCRIPTION]
 media: imx-jpeg: Fix potential error pointer dereference in detach_pm()
 commit 1378ffec30367233152b7dbf4fa6a25ee98585d1 upstream.
 
 The proble is on the first line:
 
 	if (jpeg->pd_dev[i] && !pm_runtime_suspended(jpeg->pd_dev[i]))
 
 If jpeg->pd_dev[i] is an error pointer, then passing it to
 pm_runtime_suspended() will lead to an Oops.  The other conditions
 check for both error pointers and NULL, but it would be more clear to
 use the IS_ERR_OR_NULL() check for that.

 Fixes: fd0af4cd35da ("media: imx-jpeg: Ensure power suppliers be suspended before detach them")

[PATCH_DIFF]
    diff --git a/drivers/media/platform/nxp/imx-jpeg/mxc-jpeg.c b/drivers/media/platform/nxp/imx-jpeg/mxc-jpeg.c
    index 26e010f8518464..f2ecd3322d1e3d 100644
    --- a/drivers/media/platform/nxp/imx-jpeg/mxc-jpeg.c
    +++ b/drivers/media/platform/nxp/imx-jpeg/mxc-jpeg.c
    @@ -2097,11 +2097,12 @@ static void mxc_jpeg_detach_pm_domains(struct mxc_jpeg_dev *jpeg)
     	int i;
     
     	for (i = 0; i < jpeg->num_domains; i++) {
    -		if (jpeg->pd_dev[i] && !pm_runtime_suspended(jpeg->pd_dev[i]))
    +		if (!IS_ERR_OR_NULL(jpeg->pd_dev[i]) &&
    +		    !pm_runtime_suspended(jpeg->pd_dev[i]))
     			pm_runtime_force_suspend(jpeg->pd_dev[i]);
    -		if (jpeg->pd_link[i] && !IS_ERR(jpeg->pd_link[i]))
    +		if (!IS_ERR_OR_NULL(jpeg->pd_link[i]))
     			device_link_del(jpeg->pd_link[i]);
    -		if (jpeg->pd_dev[i] && !IS_ERR(jpeg->pd_dev[i]))
    +		if (!IS_ERR_OR_NULL(jpeg->pd_dev[i]))
     			dev_pm_domain_detach(jpeg->pd_dev[i], true);
     		jpeg->pd_dev[i] = NULL;
     		jpeg->pd_link[i] = NULL;

[FUNCTION_CONTENT]
static void mxc_jpeg_detach_pm_domains(struct mxc_jpeg_dev *jpeg)
{
	int i;

	for (i = 0; i < jpeg->num_domains; i++) {
		if (jpeg->pd_dev[i] && !pm_runtime_suspended(jpeg->pd_dev[i]))
			pm_runtime_force_suspend(jpeg->pd_dev[i]);
		if (jpeg->pd_link[i] && !IS_ERR(jpeg->pd_link[i]))
			device_link_del(jpeg->pd_link[i]);
		if (jpeg->pd_dev[i] && !IS_ERR(jpeg->pd_dev[i]))
			dev_pm_domain_detach(jpeg->pd_dev[i], true);
		jpeg->pd_dev[i] = NULL;
		jpeg->pd_link[i] = NULL;
	}
}



[ROOTCAUSE_ANALYSIS]
1. CVE Identifier
CVE-2024-57978

2. Vulnerability Type
Error-pointer dereference (invalid pointer check leading to kernel Oops/DoS)

3. Root Cause Summary
The function mxc_jpeg_detach_pm_domains() only checked for non-NULL before calling pm_runtime_suspended(jpeg->pd_dev[i]), but jpeg->pd_dev[i] can be an ERR_PTR. Passing an ERR_PTR to pm_runtime_suspended() causes an Oops. Subsequent checks in the same function handled ERR_PTR with IS_ERR(), but the first conditional did not, creating an inconsistent and unsafe error-pointer handling path.

4. Kernel Subsystem Analysis
1) Affected Subsystem:
Media subsystem, NXP i.MX JPEG driver power-management detach path (drivers/media/platform/nxp/imx-jpeg/mxc-jpeg.c)

2) Pre-Patch Flaw:
In mxc_jpeg_detach_pm_domains(), the first conditional used "jpeg->pd_dev[i]" (non-NULL check) before pm_runtime_suspended(), failing to handle ERR_PTR values for pd_dev[i], unlike the later conditionals that used IS_ERR().

3) Trigger Condition:
jpeg->pd_dev[i] contains an ERR_PTR (e.g., from a prior failed domain attach or allocation), and mxc_jpeg_detach_pm_domains() is invoked, causing pm_runtime_suspended(ERR_PTR) to be executed.

4) Impact Mechanism:
pm_runtime_suspended() expects a valid struct device pointer and dereferences it; receiving an ERR_PTR leads to a kernel Oops, resulting in a denial of service.

5. Patch Analysis
1) Fix Approach:
Harden pointer validation by uniformly using IS_ERR_OR_NULL() on pd_dev[i] and pd_link[i] before invoking PM/runtime and device link/domain APIs, preventing ERR_PTR from being passed to pm_runtime_suspended(), device_link_del(), and dev_pm_domain_detach().

2) Key Code Changes:
- Replaced the first check:
  - From: if (jpeg->pd_dev[i] && !pm_runtime_suspended(jpeg->pd_dev[i]))
  - To: if (!IS_ERR_OR_NULL(jpeg->pd_dev[i]) && !pm_runtime_suspended(jpeg->pd_dev[i]))
- Simplified link and detach checks to also use IS_ERR_OR_NULL():
  - device_link_del(): if (!IS_ERR_OR_NULL(jpeg->pd_link[i]))
  - dev_pm_domain_detach(): if (!IS_ERR_OR_NULL(jpeg->pd_dev[i]))
These changes ensure no ERR_PTR or NULL is passed to the called functions.

3) Locking/Concurrency Impact:
No locking or ordering changes; the patch strictly adds safer pointer validation without affecting concurrency semantics.

6. Broader Kernel Security Implications
This highlights the necessity of consistent ERR_PTR handling for resources that can be encoded as error pointers, especially in cleanup/detach paths. Uniform use of IS_ERR_OR_NULL() prevents kernel crashes from error paths and improves robustness against partial-initialization failures across drivers using PM domains and runtime PM.

[REQUEST]
Produce a detection plan for a CodeQL-based static checker that would detect similar pre-patch flaws.
Requirements for the plan:
- High-level detection goal (1–2 lines).
- A numbered list of detection steps (objective, conceptual AST/semantic signals, FP mitigation).
- Types of program elements to target (functions, call sites, allocation sites, condition checks, lock boundaries, function return-value uses, etc.).
- Dataflow/taint patterns to consider (if applicable), described conceptually.
- Minimal test cases to validate the checker (positive/negative examples).
- Estimated effort/priority (low/medium/high) and likely false-positive sources.
- A short "Limitations & Assumptions" block.

OUTPUT FORMAT (produce exactly this structure; no extra text):
1. Plan Summary
{one-line summary}

2. Detection Steps
1) Step 1: {objective — conceptual signals — FP mitigation}
2) Step 2: {objective — conceptual signals — FP mitigation}
...
(narrow to ≤12 steps)

3. Target Elements
- {list of element types to inspect}

4. Dataflow / Taint Considerations
- {conceptual taint/flow rules to track}

5. Validation & Test Cases
- Positive: {brief}
- Negative: {brief}
- Test harness notes: {brief}

6. Estimated Effort & Priority
{low/medium/high}

7. Likely False-Positive Sources & Mitigations
- {list}

8. Limitations & Assumptions
- {explicit missing info or assumptions}

CONSTRAINTS:
- Do not emit any CodeQL, SQL, pseudocode, or query fragments.
- Keep answers evidence-based and reference which provided field supported each major choice (e.g., “based on [PATCH_DIFF] hunk that adds X”).
- Output must be machine-parseable: keep the exact numbered section headings as above.