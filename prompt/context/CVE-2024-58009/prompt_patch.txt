You are a senior Linux kernel vulnerability analyst.
Task: Produce a structured root-cause analysis of the vulnerability that existed BEFORE the patch, strictly following the [OUTPUT FORMAT] below.

Rules:
1. Follow the [OUTPUT FORMAT] exactly and populate every field. Use evidence from [PATCH_DIFF], [PATCH_DESCRIPTION].
2. Root cause = the flawed or missing pre-patch logic that the patch corrects (e.g., missing validation, incorrect locking/ordering, race window, unsafe access, integer/length misuse, lifetime/refcount bug, pointer misuse).
3. Be evidence-driven: reference function names, local context, and hunk scope in the diff; you may quote 1–3 lines of original (pre-patch) code only when necessary to support claims; avoid long code dumps.
4. Patch analysis must map each fix to the identified root cause (e.g., added checks, lock adjustments, lifetime/RCU changes, bounds fixes, condition rewrites).
5. Concurrency/locking: when relevant, explicitly state missing/incorrect locks, RCU usage, atomicity, or ordering and what the patch changed (lock/unlock points, ordering changes).
6. Memory/safety: when relevant, specify trigger conditions and impact (UAF, OOB, double free, uninitialized use, integer overflow/underflow, length miscalculation, TOCTOU, etc.).
7. Use only the provided materials ([PATCH_DIFF], [PATCH_DESCRIPTION]). Do not speculate; when uncertain, state “Unknown/Not determinable”.
8. Keep it concise and technical: 3–8 clear sentences or bullet points per subsection.
9. Output nothing beyond the [OUTPUT FORMAT]; no extra headers, prefaces, or trailing notes.
10. If the root cause cannot be identified, state “Unknown/Not determinable” in the relevant subsection, but complete the remaining sections using available evidence.

[META]
CVE_NAME: CVE-2024-58009

[PATCH_DESCRIPTION]
 Bluetooth: L2CAP: handle NULL sock pointer in l2cap_sock_alloc
 commit 5f397409f8ee5bc82901eeaf799e1cbc4f8edcf1 upstream.
 
 A NULL sock pointer is passed into l2cap_sock_alloc() when it is called
 from l2cap_sock_new_connection_cb() and the error handling paths should
 also be aware of it.

 Seemingly a more elegant solution would be to swap bt_sock_alloc() and
 l2cap_chan_create() calls since they are not interdependent to that moment
 but then l2cap_chan_create() adds the soon to be deallocated and still
 dummy-initialized channel to the global list accessible by many L2CAP
 paths. The channel would be removed from the list in short period of time
 but be a bit more straight-forward here and just check for NULL instead of
 changing the order of function calls.
 
 Found by Linux Verification Center (linuxtesting.org) with SVACE static
 analysis tool.
 
 Fixes: 7c4f78cdb8e7 ("Bluetooth: L2CAP: do not leave dangling sk pointer on error in l2cap_sock_create()")

[PATCH_DIFF]
 diff --git a/net/bluetooth/l2cap_sock.c b/net/bluetooth/l2cap_sock.c
 index 57035e46f71518…4a0e73d3996056 100644
 --- a/net/bluetooth/l2cap_sock.c
 +++ b/net/bluetooth/l2cap_sock.c
 @@ -1876,7 +1876,8 @@ static struct sock *l2cap_sock_alloc(struct net *net, struct socket *sock,
   chan = l2cap_chan_create();
   if (!chan) {
   sk_free(sk);
 - sock->sk = NULL;
 + if (sock)
 + sock->sk = NULL;
   return NULL;
   }

[OUTPUT FORMAT]
1. CVE Identifier
{{CVE Identifier}}

2. Vulnerability Type
{{Vulnerability Type}}

3. Root Cause Summary
{{Root Cause Summary}}

4. Kernel Subsystem Analysis
1) Affected Subsystem:
{{Affected Subsystem}}
2) Pre-Patch Flaw:
{{Pre-Patch Flaw}}
3) Trigger Condition:
{{Trigger Condition}}
4) Impact Mechanism:
{{Impact Mechanism}}

5. Patch Analysis
1) Fix Approach:
{{Fix Approach}}
2) Key Code Changes:
{{Key Code Changes}}
3) Locking/Concurrency Impact:
{{Locking/Concurrency Impact}}

6. Broader Kernel Security Implications
{{Broader Kernel Security Implications}}