You are a senior static-analysis engineer and CodeQL design expert.
Task: Based only on the supplied materials, produce a human-readable detection plan (natural-language) for a CodeQL checker that would detect the same class of vulnerability described. DO NOT produce any query code or pseudocode — the output must be purely natural language steps and rationale.

Rules:
1. Only use evidence contained in the sections labeled [PATCH_DESCRIPTION], [PATCH_DIFF], and [ROOTCAUSE_ANALYSIS]. Do not invent facts.
2. The plan must be a step-by-step detection strategy in natural language (numbered steps). No code, no query snippets, no regex, no domain-specific language.
3. Each step must state: objective, signals to look for (AST/semantic patterns expressed conceptually), why it maps to the root cause, and how to reduce false positives.
4. Include a short test/validation strategy (what sample cases to run and expected outcomes).
5. List limitations and assumptions (what is Not determinable from inputs).
6. Keep the plan concise: overall ≤ 12 numbered steps and each step ≤ 2 concise sentences. Use bullets where helpful.
7. If information required to design an accurate checker is missing, state it explicitly under "Limitations & Assumptions".

[META]
CVE_NAME: CVE-2024-58081

[INFO]
[PATCH_DESCRIPTION]
 clk: mmp2: call pm_genpd_init() only after genpd.name is set
 commit e24b15d4704dcb73920c3d18a6157abd18df08c1 upstream.
 
 Setting the genpd's struct device's name with dev_set_name() is
 happening within pm_genpd_init(). If it remains NULL, things can blow up
 later, such as when crafting the devfs hierarchy for the power domain:
 
   Unable to handle kernel NULL pointer dereference at virtual address 00000000 when read
   ...
   Call trace:
    strlen from start_creating+0x90/0x138
    start_creating from debugfs_create_dir+0x20/0x178
    debugfs_create_dir from genpd_debug_add.part.0+0x4c/0x144
    genpd_debug_add.part.0 from genpd_debug_init+0x74/0x90
    genpd_debug_init from do_one_initcall+0x5c/0x244
    do_one_initcall from kernel_init_freeable+0x19c/0x1f4
    kernel_init_freeable from kernel_init+0x1c/0x12c
    kernel_init from ret_from_fork+0x14/0x28
 
 Bisecting tracks this crash back to commit 899f44531fe6 ("pmdomain: core:
 Add GENPD_FLAG_DEV_NAME_FW flag"), which exchanges use of genpd->name
 with dev_name(&genpd->dev) in genpd_debug_add.part().
 
 Fixes: 899f44531fe6 ("pmdomain: core: Add GENPD_FLAG_DEV_NAME_FW flag")

[PATCH_DIFF]
 diff --git a/drivers/clk/mmp/pwr-island.c b/drivers/clk/mmp/pwr-island.c
 index edaa2433a472ad…eaf5d2c5e59337 100644
 --- a/drivers/clk/mmp/pwr-island.c
 +++ b/drivers/clk/mmp/pwr-island.c
 @@ -106,10 +106,10 @@ struct generic_pm_domain *mmp_pm_domain_register(const char *name,
   pm_domain->flags = flags;
   pm_domain->lock = lock;

 - pm_genpd_init(&pm_domain->genpd, NULL, true);
   pm_domain->genpd.name = name;
   pm_domain->genpd.power_on = mmp_pm_domain_power_on;
   pm_domain->genpd.power_off = mmp_pm_domain_power_off;
 + pm_genpd_init(&pm_domain->genpd, NULL, true);

   return &pm_domain->genpd;
 }



[ROOTCAUSE_ANALYSIS]
1. CVE Identifier
CVE-2024-58081

2. Vulnerability Type
NULL pointer dereference due to incorrect initialization order (logic/initialization bug leading to kernel crash/DoS)

3. Root Cause Summary
pm_genpd_init() derives and sets the embedded struct device’s name via dev_set_name() from genpd->name. In mmp_pm_domain_register(), pm_genpd_init() was invoked before genpd->name was assigned, leaving genpd->dev without a valid name (NULL). After upstream changes switched internal users to dev_name(&genpd->dev), later debugfs setup called strlen() on a NULL device name, causing a NULL pointer dereference and kernel crash.

4. Kernel Subsystem Analysis
1) Affected Subsystem:
- Clock subsystem for Marvell MMP (drivers/clk/mmp) integrating with the generic power domain (genpd) core.

2) Pre-Patch Flaw:
- In mmp_pm_domain_register(), pm_genpd_init(&pm_domain->genpd, NULL, true) was called before setting pm_domain->genpd.name = name.
- Because pm_genpd_init() sets the device name internally (via dev_set_name()), calling it before assigning genpd.name resulted in a NULL device name.

3) Trigger Condition:
- Registering the PM domain via mmp_pm_domain_register() with the above order, then later genpd core debug initialization (genpd_debug_init/genpd_debug_add) accessing dev_name(&genpd->dev).
- As per the call trace, debugfs_create_dir → strlen() dereferenced a NULL name during initcalls (e.g., at boot).

4) Impact Mechanism:
- dev_name(&genpd->dev) returned a pointer to a NULL name due to earlier incorrect initialization, leading to strlen(NULL) inside debugfs creation.
- Results in kernel NULL pointer dereference and panic, causing denial of service.

5. Patch Analysis
1) Fix Approach:
- Reorder initialization so that genpd.name and callbacks are set before invoking pm_genpd_init(), ensuring dev_set_name() receives a valid name.

2) Key Code Changes:
- In drivers/clk/mmp/pwr-island.c:mmp_pm_domain_register():
  - Moved pm_genpd_init(&pm_domain->genpd, NULL, true) to after:
    - pm_domain->genpd.name = name;
    - pm_domain->genpd.power_on = mmp_pm_domain_power_on;
    - pm_domain->genpd.power_off = mmp_pm_domain_power_off;
- This guarantees the embedded device’s name is properly initialized during pm_genpd_init().

3) Locking/Concurrency Impact:
- No locking or concurrency changes; the fix is purely an initialization order correction within a single-threaded registration path.

6. Broader Kernel Security Implications
- Highlights fragility when core APIs change semantics (using dev_name(&genpd->dev) instead of genpd->name): drivers must ensure proper initialization order so device names are valid before genpd/core consumes them.
- Similar drivers calling pm_genpd_init() before setting genpd.name may be susceptible to the same NULL dereference, potentially causing boot-time panics and system-wide DoS.

[REQUEST]
Produce a detection plan for a CodeQL-based static checker that would detect similar pre-patch flaws.
Requirements for the plan:
- High-level detection goal (1–2 lines).
- A numbered list of detection steps (objective, conceptual AST/semantic signals, FP mitigation).
- Types of program elements to target (functions, call sites, allocation sites, condition checks, lock boundaries, function return-value uses, etc.).
- Dataflow/taint patterns to consider (if applicable), described conceptually.
- Minimal test cases to validate the checker (positive/negative examples).
- Estimated effort/priority (low/medium/high) and likely false-positive sources.
- A short "Limitations & Assumptions" block.

OUTPUT FORMAT (produce exactly this structure; no extra text):
1. Plan Summary
{one-line summary}

2. Detection Steps
1) Step 1: {objective — conceptual signals — FP mitigation}
2) Step 2: {objective — conceptual signals — FP mitigation}
...
(narrow to ≤12 steps)

3. Target Elements
- {list of element types to inspect}

4. Dataflow / Taint Considerations
- {conceptual taint/flow rules to track}

5. Validation & Test Cases
- Positive: {brief}
- Negative: {brief}
- Test harness notes: {brief}

6. Estimated Effort & Priority
{low/medium/high}

7. Likely False-Positive Sources & Mitigations
- {list}

8. Limitations & Assumptions
- {explicit missing info or assumptions}

CONSTRAINTS:
- Do not emit any CodeQL, SQL, pseudocode, or query fragments.
- Keep answers evidence-based and reference which provided field supported each major choice (e.g., “based on [PATCH_DIFF] hunk that adds X”).
- Output must be machine-parseable: keep the exact numbered section headings as above.