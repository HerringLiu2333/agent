You are a senior static-analysis engineer and CodeQL design expert.
Task: Based only on the supplied materials, produce a human-readable detection plan (natural-language) for a CodeQL checker that would detect the same class of vulnerability described. DO NOT produce any query code or pseudocode — the output must be purely natural language steps and rationale.

Rules:
1. Only use evidence contained in the sections labeled [PATCH_DESCRIPTION], [PATCH_DIFF], [FILE_CONTENT], and [ROOTCAUSE_ANALYSIS]. Do not invent facts.
2. The plan must be a step-by-step detection strategy in natural language (numbered steps). No code, no query snippets, no regex, no domain-specific language.
3. Each step must state: objective, signals to look for (AST/semantic patterns expressed conceptually), why it maps to the root cause, and how to reduce false positives.
4. Include a short test/validation strategy (what sample cases to run and expected outcomes).
5. List limitations and assumptions (what is Not determinable from inputs).
6. Keep the plan concise: overall ≤ 12 numbered steps and each step ≤ 2 concise sentences. Use bullets where helpful.
7. If information required to design an accurate checker is missing, state it explicitly under "Limitations & Assumptions".

[META]
CVE_NAME: CVE-2024-58081

[INFO]
[PATCH_DESCRIPTION]
 clk: mmp2: call pm_genpd_init() only after genpd.name is set
 commit e24b15d4704dcb73920c3d18a6157abd18df08c1 upstream.
 
 Setting the genpd's struct device's name with dev_set_name() is
 happening within pm_genpd_init(). If it remains NULL, things can blow up
 later, such as when crafting the devfs hierarchy for the power domain:
 
   Unable to handle kernel NULL pointer dereference at virtual address 00000000 when read
   ...
   Call trace:
    strlen from start_creating+0x90/0x138
    start_creating from debugfs_create_dir+0x20/0x178
    debugfs_create_dir from genpd_debug_add.part.0+0x4c/0x144
    genpd_debug_add.part.0 from genpd_debug_init+0x74/0x90
    genpd_debug_init from do_one_initcall+0x5c/0x244
    do_one_initcall from kernel_init_freeable+0x19c/0x1f4
    kernel_init_freeable from kernel_init+0x1c/0x12c
    kernel_init from ret_from_fork+0x14/0x28
 
 Bisecting tracks this crash back to commit 899f44531fe6 ("pmdomain: core:
 Add GENPD_FLAG_DEV_NAME_FW flag"), which exchanges use of genpd->name
 with dev_name(&genpd->dev) in genpd_debug_add.part().
 
 Fixes: 899f44531fe6 ("pmdomain: core: Add GENPD_FLAG_DEV_NAME_FW flag")

[PATCH_DIFF]
 diff --git a/drivers/clk/mmp/pwr-island.c b/drivers/clk/mmp/pwr-island.c
 index edaa2433a472ad…eaf5d2c5e59337 100644
 --- a/drivers/clk/mmp/pwr-island.c
 +++ b/drivers/clk/mmp/pwr-island.c
 @@ -106,10 +106,10 @@ struct generic_pm_domain *mmp_pm_domain_register(const char *name,
   pm_domain->flags = flags;
   pm_domain->lock = lock;

 - pm_genpd_init(&pm_domain->genpd, NULL, true);
   pm_domain->genpd.name = name;
   pm_domain->genpd.power_on = mmp_pm_domain_power_on;
   pm_domain->genpd.power_off = mmp_pm_domain_power_off;
 + pm_genpd_init(&pm_domain->genpd, NULL, true);

   return &pm_domain->genpd;
 }

[FILE_CONTENT]
// SPDX-License-Identifier: GPL-2.0-or-later
/*
 * MMP PMU power island support
 *
 * Copyright (C) 2020 Lubomir Rintel <lkundrak@v3.sk>
 */

#include <linux/pm_domain.h>
#include <linux/slab.h>
#include <linux/io.h>

#include "clk.h"

#define to_mmp_pm_domain(genpd) container_of(genpd, struct mmp_pm_domain, genpd)

struct mmp_pm_domain {
	struct generic_pm_domain genpd;
	void __iomem *reg;
	spinlock_t *lock;
	u32 power_on;
	u32 reset;
	u32 clock_enable;
	unsigned int flags;
};

static int mmp_pm_domain_power_on(struct generic_pm_domain *genpd)
{
	struct mmp_pm_domain *pm_domain = to_mmp_pm_domain(genpd);
	unsigned long flags = 0;
	u32 val;

	if (pm_domain->lock)
		spin_lock_irqsave(pm_domain->lock, flags);

	val = readl(pm_domain->reg);

	/* Turn on the power island */
	val |= pm_domain->power_on;
	writel(val, pm_domain->reg);

	/* Disable isolation */
	val |= 0x100;
	writel(val, pm_domain->reg);

	/* Some blocks need to be reset after a power up */
	if (pm_domain->reset || pm_domain->clock_enable) {
		u32 after_power_on = val;

		val &= ~pm_domain->reset;
		writel(val, pm_domain->reg);

		val |= pm_domain->clock_enable;
		writel(val, pm_domain->reg);

		val |= pm_domain->reset;
		writel(val, pm_domain->reg);

		writel(after_power_on, pm_domain->reg);
	}

	if (pm_domain->lock)
		spin_unlock_irqrestore(pm_domain->lock, flags);

	return 0;
}

static int mmp_pm_domain_power_off(struct generic_pm_domain *genpd)
{
	struct mmp_pm_domain *pm_domain = to_mmp_pm_domain(genpd);
	unsigned long flags = 0;
	u32 val;

	if (pm_domain->flags & MMP_PM_DOMAIN_NO_DISABLE)
		return 0;

	if (pm_domain->lock)
		spin_lock_irqsave(pm_domain->lock, flags);

	/* Turn off and isolate the power island. */
	val = readl(pm_domain->reg);
	val &= ~pm_domain->power_on;
	val &= ~0x100;
	writel(val, pm_domain->reg);

	if (pm_domain->lock)
		spin_unlock_irqrestore(pm_domain->lock, flags);

	return 0;
}

struct generic_pm_domain *mmp_pm_domain_register(const char *name,
		void __iomem *reg,
		u32 power_on, u32 reset, u32 clock_enable,
		unsigned int flags, spinlock_t *lock)
{
	struct mmp_pm_domain *pm_domain;

	pm_domain = kzalloc(sizeof(*pm_domain), GFP_KERNEL);
	if (!pm_domain)
		return ERR_PTR(-ENOMEM);

	pm_domain->reg = reg;
	pm_domain->power_on = power_on;
	pm_domain->reset = reset;
	pm_domain->clock_enable = clock_enable;
	pm_domain->flags = flags;
	pm_domain->lock = lock;

	pm_genpd_init(&pm_domain->genpd, NULL, true);
	pm_domain->genpd.name = name;
	pm_domain->genpd.power_on = mmp_pm_domain_power_on;
	pm_domain->genpd.power_off = mmp_pm_domain_power_off;

	return &pm_domain->genpd;
}




[ROOTCAUSE_ANALYSIS]
1. CVE Identifier
CVE-2024-58081

2. Vulnerability Type
NULL pointer dereference due to improper initialization order (use of uninitialized/NULL field)

3. Root Cause Summary
The driver initialized the generic power domain (genpd) with pm_genpd_init() before assigning genpd.name in mmp_pm_domain_register(). pm_genpd_init() sets the embedded struct device’s name via dev_set_name() using genpd->name; with name still NULL, the device ends up unnamed. Later, core power-domain debug code uses dev_name(&genpd->dev), which leads to a NULL kobject name and a crash (strlen(NULL)) when creating debugfs entries. This became observable after commit 899f44531fe6 switched from genpd->name to dev_name(&genpd->dev) in genpd_debug_add.

4. Kernel Subsystem Analysis
1) Affected Subsystem:
- MMP clock/power island driver (drivers/clk/mmp/pwr-island.c) interacting with generic power domain (pmdomain) core.

2) Pre-Patch Flaw:
- Incorrect initialization order in mmp_pm_domain_register(): pm_genpd_init(&pm_domain->genpd, NULL, true) was called before setting pm_domain->genpd.name = name.

3) Trigger Condition:
- Registration of the MMP power domain with a NULL device name, followed by power domain debug initialization (genpd_debug_init), which creates debugfs entries using dev_name(&genpd->dev). This occurs during boot/initcalls when genpd debug is enabled.

4) Impact Mechanism:
- debugfs path creation calls strlen() on the device name derived from dev_name(&genpd->dev); since the name was never set, this results in a NULL pointer dereference and kernel crash (DoS) during initialization.

5. Patch Analysis
1) Fix Approach:
- Ensure genpd.name is assigned before invoking pm_genpd_init(), so dev_set_name() receives a valid name and the genpd device is properly named.

2) Key Code Changes:
- In mmp_pm_domain_register():
  - Removed the early pm_genpd_init() call.
  - Set pm_domain->genpd.name = name; and the power_on/power_off callbacks.
  - Re-invoked pm_genpd_init() after these assignments.
- Diff evidence: the call to pm_genpd_init() moved below setting genpd.name and callbacks in the function’s init sequence.

3) Locking/Concurrency Impact:
- None. The change only reorders initialization steps within a single-threaded setup path; no locks or synchronization primitives were added or modified.

6. Broader Kernel Security Implications
- This highlights a fragile interface contract: drivers must set genpd.name before pm_genpd_init() because the latter derives the device’s name from it. After the core change to use dev_name(), any similar misordering in other drivers can surface as boot-time NULL dereferences, leading to system-wide DoS. It underscores the need for strict initialization-order adherence and potential defensive checks in core paths that assume a valid device name.

[REQUEST]
Produce a detection plan for a CodeQL-based static checker that would detect similar pre-patch flaws.
Requirements for the plan:
- High-level detection goal (1–2 lines).
- A numbered list of detection steps (objective, conceptual AST/semantic signals, FP mitigation).
- Types of program elements to target (functions, call sites, allocation sites, condition checks, lock boundaries, function return-value uses, etc.).
- Dataflow/taint patterns to consider (if applicable), described conceptually.
- Minimal test cases to validate the checker (positive/negative examples).
- Estimated effort/priority (low/medium/high) and likely false-positive sources.
- A short "Limitations & Assumptions" block.

OUTPUT FORMAT (produce exactly this structure; no extra text):
1. Plan Summary
{one-line summary}

2. Detection Steps
1) Step 1: {objective — conceptual signals — FP mitigation}
2) Step 2: {objective — conceptual signals — FP mitigation}
...
(narrow to ≤12 steps)

3. Target Elements
- {list of element types to inspect}

4. Dataflow / Taint Considerations
- {conceptual taint/flow rules to track}

5. Validation & Test Cases
- Positive: {brief}
- Negative: {brief}
- Test harness notes: {brief}

6. Estimated Effort & Priority
{low/medium/high}

7. Likely False-Positive Sources & Mitigations
- {list}

8. Limitations & Assumptions
- {explicit missing info or assumptions}

CONSTRAINTS:
- Do not emit any CodeQL, SQL, pseudocode, or query fragments.
- Keep answers evidence-based and reference which provided field supported each major choice (e.g., “based on [PATCH_DIFF] hunk that adds X”).
- Output must be machine-parseable: keep the exact numbered section headings as above.