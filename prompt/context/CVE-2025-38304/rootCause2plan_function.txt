You are a senior static-analysis engineer and CodeQL design expert.
Task: Based only on the supplied materials, produce a human-readable detection plan (natural-language) for a CodeQL checker that would detect the same class of vulnerability described. DO NOT produce any query code or pseudocode — the output must be purely natural language steps and rationale.

Rules:
1. Only use evidence contained in the sections labeled [PATCH_DESCRIPTION], [PATCH_DIFF], [FUNCTION_CONTENT], and [ROOTCAUSE_ANALYSIS]. Do not invent facts.
2. The plan must be a step-by-step detection strategy in natural language (numbered steps). No code, no query snippets, no regex, no domain-specific language.
3. Each step must state: objective, signals to look for (AST/semantic patterns expressed conceptually), why it maps to the root cause, and how to reduce false positives.
4. Include a short test/validation strategy (what sample cases to run and expected outcomes).
5. List limitations and assumptions (what is Not determinable from inputs).
6. Keep the plan concise: overall ≤ 12 numbered steps and each step ≤ 2 concise sentences. Use bullets where helpful.
7. If information required to design an accurate checker is missing, state it explicitly under "Limitations & Assumptions".

[META]
CVE_NAME: CVE-2025-38304

[INFO]
[PATCH_DESCRIPTION]
    Bluetooth: Fix NULL pointer deference on eir_get_service_data
    The len parameter is considered optional so it can be NULL so it cannot
    be used for skipping to next entry of EIR_SERVICE_DATA.

[PATCH_DIFF]
    @@ -366,17 +366,19 @@ u8 eir_create_scan_rsp(struct hci_dev *hdev, u8 instance, u8 *ptr)
     
     void *eir_get_service_data(u8 *eir, size_t eir_len, u16 uuid, size_t *len)
     {
    -	while ((eir = eir_get_data(eir, eir_len, EIR_SERVICE_DATA, len))) {
    +	size_t dlen;
    +
    +	while ((eir = eir_get_data(eir, eir_len, EIR_SERVICE_DATA, &dlen))) {
     		u16 value = get_unaligned_le16(eir);
     
     		if (uuid == value) {
     			if (len)
    -				*len -= 2;
    +				*len = dlen - 2;
     			return &eir[2];
     		}
     
    -		eir += *len;
    -		eir_len -= *len;
    +		eir += dlen;
    +		eir_len -= dlen;
     	}
     
     	return NULL;

[FUNCTION_CONTENT]
void *eir_get_service_data(u8 *eir, size_t eir_len, u16 uuid, size_t *len)
{
	while ((eir = eir_get_data(eir, eir_len, EIR_SERVICE_DATA, len))) {
		u16 value = get_unaligned_le16(eir);

		if (uuid == value) {
			if (len)
				*len -= 2;
			return &eir[2];
		}

		eir += *len;
		eir_len -= *len;
	}

	return NULL;
}



[ROOTCAUSE_ANALYSIS]
1. CVE Identifier
CVE-2025-38304

2. Vulnerability Type
NULL pointer dereference (improper handling of optional pointer parameter)

3. Root Cause Summary
The pre-patch implementation of eir_get_service_data used the caller-provided optional length pointer (len) both to advance parsing and for output without checking for NULL. Specifically, it unconditionally performed pointer arithmetic with “eir += *len; eir_len -= *len;” in the mismatch path, dereferencing len even when the caller passed NULL. The function also passed len directly to eir_get_data, conflating an optional output parameter with internal traversal state.

4. Kernel Subsystem Analysis
1) Affected Subsystem:
Bluetooth stack (EIR parsing within HCI), function eir_get_service_data

2) Pre-Patch Flaw:
Inside eir_get_service_data, the loop advanced using “*len” regardless of whether len was NULL, and len was also modified on match (“*len -= 2”) without isolating traversal state from the optional output parameter. Code lines evidencing the flaw:
- “while ((eir = eir_get_data(eir, eir_len, EIR_SERVICE_DATA, len)))”
- “eir += *len;”
- “eir_len -= *len;”

3) Trigger Condition:
eir_get_service_data is called with len == NULL and at least one EIR_SERVICE_DATA element does not match the requested uuid, causing the mismatch path to execute and dereference the NULL len in “eir += *len; eir_len -= *len;”.

4) Impact Mechanism:
Dereferencing a NULL pointer in kernel space triggers an OOPS/BUG, leading to a kernel crash or denial of service in Bluetooth processing paths.

5. Patch Analysis
1) Fix Approach:
Decouple internal traversal length management from the optional output parameter by introducing a local variable (dlen) to always hold the current record length. Use dlen for iteration and only write to *len when non-NULL and a match is found.

2) Key Code Changes:
- Replace eir_get_data(..., len) with eir_get_data(..., &dlen) to ensure a non-NULL length sink for parsing.
- On match, set the optional output length explicitly: “*len = dlen - 2” (instead of “*len -= 2”).
- Use dlen for advancing the buffer: “eir += dlen; eir_len -= dlen” instead of dereferencing the possibly NULL len.

3) Locking/Concurrency Impact:
None. The changes are confined to local variable usage and pointer arithmetic within a parsing routine; no locks or ordering semantics are introduced or altered.

6. Broader Kernel Security Implications
This fix hardens the Bluetooth EIR parsing against crashes caused by optional output parameters, reinforcing a best practice to avoid using caller-supplied optional pointers for internal control flow. Similar patterns in other parsers or helpers should be audited to prevent kernel-level DoS from NULL dereferences and to ensure robust handling of optional arguments.

[REQUEST]
Produce a detection plan for a CodeQL-based static checker that would detect similar pre-patch flaws.
Requirements for the plan:
- High-level detection goal (1–2 lines).
- A numbered list of detection steps (objective, conceptual AST/semantic signals, FP mitigation).
- Types of program elements to target (functions, call sites, allocation sites, condition checks, lock boundaries, function return-value uses, etc.).
- Dataflow/taint patterns to consider (if applicable), described conceptually.
- Minimal test cases to validate the checker (positive/negative examples).
- Estimated effort/priority (low/medium/high) and likely false-positive sources.
- A short "Limitations & Assumptions" block.

OUTPUT FORMAT (produce exactly this structure; no extra text):
1. Plan Summary
{one-line summary}

2. Detection Steps
1) Step 1: {objective — conceptual signals — FP mitigation}
2) Step 2: {objective — conceptual signals — FP mitigation}
...
(narrow to ≤12 steps)

3. Target Elements
- {list of element types to inspect}

4. Dataflow / Taint Considerations
- {conceptual taint/flow rules to track}

5. Validation & Test Cases
- Positive: {brief}
- Negative: {brief}
- Test harness notes: {brief}

6. Estimated Effort & Priority
{low/medium/high}

7. Likely False-Positive Sources & Mitigations
- {list}

8. Limitations & Assumptions
- {explicit missing info or assumptions}

CONSTRAINTS:
- Do not emit any CodeQL, SQL, pseudocode, or query fragments.
- Keep answers evidence-based and reference which provided field supported each major choice (e.g., “based on [PATCH_DIFF] hunk that adds X”).
- Output must be machine-parseable: keep the exact numbered section headings as above.