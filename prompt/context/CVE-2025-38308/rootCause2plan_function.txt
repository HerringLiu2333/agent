You are a senior static-analysis engineer and CodeQL design expert.
Task: Based only on the supplied materials, produce a human-readable detection plan (natural-language) for a CodeQL checker that would detect the same class of vulnerability described. DO NOT produce any query code or pseudocode — the output must be purely natural language steps and rationale.

Rules:
1. Only use evidence contained in the sections labeled [PATCH_DESCRIPTION], [PATCH_DIFF], [FUNCTION_CONTENT], and [ROOTCAUSE_ANALYSIS]. Do not invent facts.
2. The plan must be a step-by-step detection strategy in natural language (numbered steps). No code, no query snippets, no regex, no domain-specific language.
3. Each step must state: objective, signals to look for (AST/semantic patterns expressed conceptually), why it maps to the root cause, and how to reduce false positives.
4. Include a short test/validation strategy (what sample cases to run and expected outcomes).
5. List limitations and assumptions (what is Not determinable from inputs).
6. Keep the plan concise: overall ≤ 12 numbered steps and each step ≤ 2 concise sentences. Use bullets where helpful.
7. If information required to design an accurate checker is missing, state it explicitly under "Limitations & Assumptions".

[META]
CVE_NAME: CVE-2025-38308

[INFO]
[PATCH_DESCRIPTION]
    ASoC: Intel: avs: Fix possible null-ptr-deref when initing hw
    Search result of avs_dai_find_path_template() shall be verified before
    being used. As 'template' is already known when
    avs_hw_constraints_init() is fired, drop the search entirely.

[PATCH_DIFF]
     @@ -83,10 +83,8 @@ void avs_period_elapsed(struct snd_pcm_substream *substream)
      static int hw_rule_param_size(struct snd_pcm_hw_params *params, struct snd_pcm_hw_rule *rule);
      static int avs_hw_constraints_init(struct snd_pcm_substream *substream, struct snd_soc_dai *dai)
      {
     -	struct snd_soc_pcm_runtime *rtd = snd_soc_substream_to_rtd(substream);
      	struct snd_pcm_runtime *runtime = substream->runtime;
      	struct snd_pcm_hw_constraint_list *r, *c, *s;
     -	struct avs_tplg_path_template *template;
      	struct avs_dma_data *data;
      	int ret;
      
     @@ -99,8 +97,7 @@ static int avs_hw_constraints_init(struct snd_pcm_substream *substream, struct s
      	c = &(data->channels_list);
      	s = &(data->sample_bits_list);
      
     -	template = avs_dai_find_path_template(dai, !rtd->dai_link->no_pcm, substream->stream);
     -	ret = avs_path_set_constraint(data->adev, template, r, c, s);
     +	ret = avs_path_set_constraint(data->adev, data->template, r, c, s);
      	if (ret <= 0)
      		return ret;

[FUNCTION_CONTENT]
static int avs_hw_constraints_init(struct snd_pcm_substream *substream, struct snd_soc_dai *dai)
{
	struct snd_soc_pcm_runtime *rtd = snd_soc_substream_to_rtd(substream);
	struct snd_pcm_runtime *runtime = substream->runtime;
	struct snd_pcm_hw_constraint_list *r, *c, *s;
	struct avs_tplg_path_template *template;
	struct avs_dma_data *data;
	int ret;

	ret = snd_pcm_hw_constraint_integer(runtime, SNDRV_PCM_HW_PARAM_PERIODS);
	if (ret < 0)
		return ret;

	data = snd_soc_dai_get_dma_data(dai, substream);
	r = &(data->rate_list);
	c = &(data->channels_list);
	s = &(data->sample_bits_list);

	template = avs_dai_find_path_template(dai, !rtd->dai_link->no_pcm, substream->stream);
	ret = avs_path_set_constraint(data->adev, template, r, c, s);
	if (ret <= 0)
		return ret;

	ret = snd_pcm_hw_constraint_list(runtime, 0, SNDRV_PCM_HW_PARAM_RATE, r);
	if (ret < 0)
		return ret;

	ret = snd_pcm_hw_constraint_list(runtime, 0, SNDRV_PCM_HW_PARAM_CHANNELS, c);
	if (ret < 0)
		return ret;

	ret = snd_pcm_hw_constraint_list(runtime, 0, SNDRV_PCM_HW_PARAM_SAMPLE_BITS, s);
	if (ret < 0)
		return ret;

	return 0;
}



[ROOTCAUSE_ANALYSIS]
1. CVE Identifier
CVE-2025-38308

2. Vulnerability Type
Null pointer dereference due to missing return-value validation

3. Root Cause Summary
avs_hw_constraints_init() obtained a path template via avs_dai_find_path_template() and passed it directly to avs_path_set_constraint() without verifying it was non-NULL. When the lookup failed (e.g., no matching topology/path for the given DAI/stream), the template pointer could be NULL, leading to a null-ptr-deref in avs_path_set_constraint(). Evidence: pre-patch code shows "template = avs_dai_find_path_template(...);" followed immediately by "ret = avs_path_set_constraint(..., template, ...);".

4. Kernel Subsystem Analysis
1) Affected Subsystem:
ALSA System on Chip (ASoC) Intel AVS driver

2) Pre-Patch Flaw:
Missing validation of avs_dai_find_path_template()’s return value in avs_hw_constraints_init(), combined with unsafe use of the result in avs_path_set_constraint(). The function also depended on rtd->dai_link->no_pcm when performing the lookup, but did not guard against the lookup failing.

3) Trigger Condition:
Initialization of HW constraints for a substream where avs_dai_find_path_template(dai, !rtd->dai_link->no_pcm, substream->stream) returns NULL (e.g., topology/path template absent or mismatch for the specified DAI/no_pcm/stream combination).

4) Impact Mechanism:
Passing a NULL template into avs_path_set_constraint() causes a null pointer dereference within that function or its callees, resulting in a kernel oops/panic and denial of service.

5. Patch Analysis
1) Fix Approach:
Eliminate the fragile runtime lookup and use a pre-associated, known-valid template (data->template) that is already available when avs_hw_constraints_init() is called. This removes the possibility of a NULL template and thereby the null-ptr-deref.

2) Key Code Changes:
- Removed local rtd variable and the call to avs_dai_find_path_template().
- Replaced "ret = avs_path_set_constraint(data->adev, template, r, c, s);" with "ret = avs_path_set_constraint(data->adev, data->template, r, c, s);".
- This ensures avs_path_set_constraint() receives a validated template pointer.

3) Locking/Concurrency Impact:
No locking or concurrency changes were introduced; the patch strictly alters parameter sourcing to avoid NULL usage.

6. Broader Kernel Security Implications
Using a pre-validated template removes a class of null pointer dereference crashes triggered by unexpected or malformed topology states, improving robustness against denial-of-service conditions. It reinforces a safer pattern of validating and binding critical objects earlier, reducing runtime error surfaces in audio driver initialization paths.

[REQUEST]
Produce a detection plan for a CodeQL-based static checker that would detect similar pre-patch flaws.
Requirements for the plan:
- High-level detection goal (1–2 lines).
- A numbered list of detection steps (objective, conceptual AST/semantic signals, FP mitigation).
- Types of program elements to target (functions, call sites, allocation sites, condition checks, lock boundaries, function return-value uses, etc.).
- Dataflow/taint patterns to consider (if applicable), described conceptually.
- Minimal test cases to validate the checker (positive/negative examples).
- Estimated effort/priority (low/medium/high) and likely false-positive sources.
- A short "Limitations & Assumptions" block.

OUTPUT FORMAT (produce exactly this structure; no extra text):
1. Plan Summary
{one-line summary}

2. Detection Steps
1) Step 1: {objective — conceptual signals — FP mitigation}
2) Step 2: {objective — conceptual signals — FP mitigation}
...
(narrow to ≤12 steps)

3. Target Elements
- {list of element types to inspect}

4. Dataflow / Taint Considerations
- {conceptual taint/flow rules to track}

5. Validation & Test Cases
- Positive: {brief}
- Negative: {brief}
- Test harness notes: {brief}

6. Estimated Effort & Priority
{low/medium/high}

7. Likely False-Positive Sources & Mitigations
- {list}

8. Limitations & Assumptions
- {explicit missing info or assumptions}

CONSTRAINTS:
- Do not emit any CodeQL, SQL, pseudocode, or query fragments.
- Keep answers evidence-based and reference which provided field supported each major choice (e.g., “based on [PATCH_DIFF] hunk that adds X”).
- Output must be machine-parseable: keep the exact numbered section headings as above.