You are a senior static-analysis engineer and CodeQL design expert.
Task: Based only on the supplied materials, produce a human-readable detection plan (natural-language) for a CodeQL checker that would detect the same class of vulnerability described. DO NOT produce any query code or pseudocode — the output must be purely natural language steps and rationale.

Rules:
1. Only use evidence contained in the sections labeled [PATCH_DESCRIPTION], [PATCH_DIFF], and [ROOTCAUSE_ANALYSIS]. Do not invent facts.
2. The plan must be a step-by-step detection strategy in natural language (numbered steps). No code, no query snippets, no regex, no domain-specific language.
3. Each step must state: objective, signals to look for (AST/semantic patterns expressed conceptually), why it maps to the root cause, and how to reduce false positives.
4. Include a short test/validation strategy (what sample cases to run and expected outcomes).
5. List limitations and assumptions (what is Not determinable from inputs).
6. Keep the plan concise: overall ≤ 12 numbered steps and each step ≤ 2 concise sentences. Use bullets where helpful.
7. If information required to design an accurate checker is missing, state it explicitly under "Limitations & Assumptions".

[META]
CVE_NAME: CVE-2024-57953

[INFO]
[PATCH_DESCRIPTION]
 rtc: tps6594: Fix integer overflow on 32bit systems
 [ Upstream commit 09c4a610153286cef54d4f0c85398f4e32fc227e ]

 The problem is this multiply in tps6594_rtc_set_offset()
 
 	tmp = offset * TICKS_PER_HOUR;
 
 The "tmp" variable is an s64 but "offset" is a long in the
 (-277774)-277774 range.  On 32bit systems a long can hold numbers up to
 approximately two billion.  The number of TICKS_PER_HOUR is really large,
 (32768 * 3600) or roughly a hundred million.  When you start multiplying
 by a hundred million it doesn't take long to overflow the two billion
 mark.
 
 Probably the safest way to fix this is to change the type of
 TICKS_PER_HOUR to long long because it's such a large number.
 
 Fixes: 9f67c1e63976 ("rtc: tps6594: Add driver for TPS6594 RTC")

[PATCH_DIFF]
 diff --git a/drivers/rtc/rtc-tps6594.c b/drivers/rtc/rtc-tps6594.c
 index e696676341378e…7c6246e3f02923 100644
 --- a/drivers/rtc/rtc-tps6594.c
 +++ b/drivers/rtc/rtc-tps6594.c
 @@ -37,7 +37,7 @@
  #define MAX_OFFSET (277774)

 // Number of ticks per hour
 -#define TICKS_PER_HOUR (32768 * 3600)
 +#define TICKS_PER_HOUR (32768 * 3600LL)

 // Multiplier for ppb conversions
  #define PPB_MULT NANO



[ROOTCAUSE_ANALYSIS]
1. CVE Identifier
CVE-2024-57953

2. Vulnerability Type
Integer overflow due to 32-bit arithmetic promotion

3. Root Cause Summary
In tps6594_rtc_set_offset(), the product tmp = offset * TICKS_PER_HOUR was computed using 32-bit arithmetic on 32-bit builds because TICKS_PER_HOUR was defined as (32768 * 3600) (an int-typed constant). Although tmp is s64, C performs the multiplication in the type of the operands; with offset being long (32-bit on 32-bit systems) and TICKS_PER_HOUR as int, the intermediate result overflowed 32-bit before being assigned to s64. This led to wraparound and incorrect tmp values used to program the RTC offset.

4. Kernel Subsystem Analysis
1) Affected Subsystem:
RTC subsystem, TPS6594 RTC driver (drivers/rtc/rtc-tps6594.c)

2) Pre-Patch Flaw:
- The macro TICKS_PER_HOUR was defined as (32768 * 3600), which is an int-sized constant.
- In tps6594_rtc_set_offset(), tmp = offset * TICKS_PER_HOUR computed the product in 32-bit on 32-bit systems (offset is long), causing overflow before assignment to s64.

3) Trigger Condition:
- Any 32-bit build invoking tps6594_rtc_set_offset() with an offset magnitude large enough that offset * 117,964,800 exceeds INT_MAX (~2.147e9), i.e., |offset| ≳ 19.
- Given the driver’s allowed range (MAX_OFFSET 277774), many valid offsets would trigger the overflow.

4) Impact Mechanism:
- The 32-bit overflow produces a wrapped/truncated result that is then stored in s64 tmp, yielding incorrect sign/magnitude.
- This erroneous tmp propagates to RTC offset register programming, resulting in incorrect time offset adjustments (time skew, misconfiguration). Memory safety impact is not indicated.

5. Patch Analysis
1) Fix Approach:
Force 64-bit arithmetic for the multiplication by making TICKS_PER_HOUR a 64-bit constant, ensuring the product is computed in at least 64-bit width and fits within s64.

2) Key Code Changes:
- Changed definition:
  - Before: #define TICKS_PER_HOUR (32768 * 3600)
  - After:  #define TICKS_PER_HOUR (32768 * 3600LL)
- This change ensures offset (long) is promoted to long long and the multiplication does not overflow on 32-bit systems.

3) Locking/Concurrency Impact:
None. The patch only alters constant type to correct arithmetic width; no synchronization or ordering changes.

6. Broader Kernel Security Implications
- Cross-architecture arithmetic width mismatches (32-bit vs 64-bit) can silently cause overflows and logic faults despite using wider destination types; constants must enforce correct promotion.
- Large scaling factors (e.g., ticks per hour) require explicit 64-bit constants or casts to avoid intermediate overflow.
- Similar time/scale conversions across drivers should be audited for implicit 32-bit arithmetic, especially where user or configuration inputs are multiplied by large constants.

[REQUEST]
Produce a detection plan for a CodeQL-based static checker that would detect similar pre-patch flaws.
Requirements for the plan:
- High-level detection goal (1–2 lines).
- A numbered list of detection steps (objective, conceptual AST/semantic signals, FP mitigation).
- Types of program elements to target (functions, call sites, allocation sites, condition checks, lock boundaries, function return-value uses, etc.).
- Dataflow/taint patterns to consider (if applicable), described conceptually.
- Minimal test cases to validate the checker (positive/negative examples).
- Estimated effort/priority (low/medium/high) and likely false-positive sources.
- A short "Limitations & Assumptions" block.

OUTPUT FORMAT (produce exactly this structure; no extra text):
1. Plan Summary
{one-line summary}

2. Detection Steps
1) Step 1: {objective — conceptual signals — FP mitigation}
2) Step 2: {objective — conceptual signals — FP mitigation}
...
(narrow to ≤12 steps)

3. Target Elements
- {list of element types to inspect}

4. Dataflow / Taint Considerations
- {conceptual taint/flow rules to track}

5. Validation & Test Cases
- Positive: {brief}
- Negative: {brief}
- Test harness notes: {brief}

6. Estimated Effort & Priority
{low/medium/high}

7. Likely False-Positive Sources & Mitigations
- {list}

8. Limitations & Assumptions
- {explicit missing info or assumptions}

CONSTRAINTS:
- Do not emit any CodeQL, SQL, pseudocode, or query fragments.
- Keep answers evidence-based and reference which provided field supported each major choice (e.g., “based on [PATCH_DIFF] hunk that adds X”).
- Output must be machine-parseable: keep the exact numbered section headings as above.