You are a senior static-analysis engineer and CodeQL design expert.
Task: Based only on the supplied materials, produce a human-readable detection plan (natural-language) for a CodeQL checker that would detect the same class of vulnerability described. DO NOT produce any query code or pseudocode — the output must be purely natural language steps and rationale.

Rules:
1. Only use evidence contained in the sections labeled [PATCH_DESCRIPTION], [PATCH_DIFF], [FUNCTION_CONTENT], and [ROOTCAUSE_ANALYSIS]. Do not invent facts.
2. The plan must be a step-by-step detection strategy in natural language (numbered steps). No code, no query snippets, no regex, no domain-specific language.
3. Each step must state: objective, signals to look for (AST/semantic patterns expressed conceptually), why it maps to the root cause, and how to reduce false positives.
4. Include a short test/validation strategy (what sample cases to run and expected outcomes).
5. List limitations and assumptions (what is Not determinable from inputs).
6. Keep the plan concise: overall ≤ 12 numbered steps and each step ≤ 2 concise sentences. Use bullets where helpful.
7. If information required to design an accurate checker is missing, state it explicitly under "Limitations & Assumptions".

[META]
CVE_NAME: CVE-2024-57953

[INFO]
[PATCH_DESCRIPTION]
 rtc: tps6594: Fix integer overflow on 32bit systems
 [ Upstream commit 09c4a610153286cef54d4f0c85398f4e32fc227e ]

 The problem is this multiply in tps6594_rtc_set_offset()
 
 	tmp = offset * TICKS_PER_HOUR;
 
 The "tmp" variable is an s64 but "offset" is a long in the
 (-277774)-277774 range.  On 32bit systems a long can hold numbers up to
 approximately two billion.  The number of TICKS_PER_HOUR is really large,
 (32768 * 3600) or roughly a hundred million.  When you start multiplying
 by a hundred million it doesn't take long to overflow the two billion
 mark.
 
 Probably the safest way to fix this is to change the type of
 TICKS_PER_HOUR to long long because it's such a large number.
 
 Fixes: 9f67c1e63976 ("rtc: tps6594: Add driver for TPS6594 RTC")

[PATCH_DIFF]
 diff --git a/drivers/rtc/rtc-tps6594.c b/drivers/rtc/rtc-tps6594.c
 index e696676341378e…7c6246e3f02923 100644
 --- a/drivers/rtc/rtc-tps6594.c
 +++ b/drivers/rtc/rtc-tps6594.c
 @@ -37,7 +37,7 @@
  #define MAX_OFFSET (277774)

 // Number of ticks per hour
 -#define TICKS_PER_HOUR (32768 * 3600)
 +#define TICKS_PER_HOUR (32768 * 3600LL)

 // Multiplier for ppb conversions
  #define PPB_MULT NANO

[FUNCTION_CONTENT]




[ROOTCAUSE_ANALYSIS]
1. CVE Identifier
CVE-2024-57953

2. Vulnerability Type
Integer overflow due to insufficient type width and incorrect integer promotion in arithmetic

3. Root Cause Summary
The macro TICKS_PER_HOUR was defined as (32768 * 3600), which is of type int. In tps6594_rtc_set_offset(), the expression tmp = offset * TICKS_PER_HOUR was evaluated using 32-bit arithmetic on 32-bit systems because offset is a long (32-bit there) and TICKS_PER_HOUR is int, leading to a 32-bit intermediate result. This intermediate multiplication overflows for |offset| > ~18 since TICKS_PER_HOUR ≈ 117,964,800, corrupting the value before it is assigned to the s64 tmp. The patch changes TICKS_PER_HOUR to (32768 * 3600LL), forcing 64-bit arithmetic and eliminating the overflow.

4. Kernel Subsystem Analysis
1) Affected Subsystem:
RTC subsystem, TPS6594 RTC driver (drivers/rtc/rtc-tps6594.c)

2) Pre-Patch Flaw:
- TICKS_PER_HOUR defined as an int-sized constant, causing 32-bit multiplication with a 32-bit long on 32-bit architectures.
- In tps6594_rtc_set_offset(), the code “tmp = offset * TICKS_PER_HOUR;” performs the multiply in 32 bits, despite tmp being s64, so the overflow occurs before assignment.

3) Trigger Condition:
- Building/running on 32-bit systems.
- Calling tps6594_rtc_set_offset() with offset magnitude greater than approximately 18 (well within the documented range up to MAX_OFFSET 277774), causing the 32-bit product to exceed INT32/LONG32 bounds.

4) Impact Mechanism:
- The overflowed intermediate result wraps modulo 2^32 and is then stored in s64, yielding an incorrect tmp.
- This leads to misprogramming of the RTC offset/frequency correction, causing erroneous timekeeping adjustments and potentially large time drift or incorrect RTC behavior.

5. Patch Analysis
1) Fix Approach:
- Ensure 64-bit arithmetic in the multiplication by widening the constant, so the compiler promotes operands to 64-bit before performing the operation.

2) Key Code Changes:
- Change macro definition:
  - From: #define TICKS_PER_HOUR (32768 * 3600)
  - To:   #define TICKS_PER_HOUR (32768 * 3600LL)
- This forces TICKS_PER_HOUR to be long long, making offset * TICKS_PER_HOUR computed in 64-bit and safely stored in s64 tmp.

3) Locking/Concurrency Impact:
- None. The patch only changes constant type to correct arithmetic width; no locking or ordering changes are involved.

6. Broader Kernel Security Implications
- While not a memory-safety issue, incorrect time offset programming can lead to significant timekeeping errors, affecting logs, timers, and time-based controls.
- Erroneous RTC adjustments can undermine system reliability and may impact security mechanisms relying on accurate time (e.g., certificate validation windows, scheduled tasks).
- Highlights the importance of using appropriately wide types for large constants and cross-architecture integer promotion to prevent silent arithmetic corruption.

[REQUEST]
Produce a detection plan for a CodeQL-based static checker that would detect similar pre-patch flaws.
Requirements for the plan:
- High-level detection goal (1–2 lines).
- A numbered list of detection steps (objective, conceptual AST/semantic signals, FP mitigation).
- Types of program elements to target (functions, call sites, allocation sites, condition checks, lock boundaries, function return-value uses, etc.).
- Dataflow/taint patterns to consider (if applicable), described conceptually.
- Minimal test cases to validate the checker (positive/negative examples).
- Estimated effort/priority (low/medium/high) and likely false-positive sources.
- A short "Limitations & Assumptions" block.

OUTPUT FORMAT (produce exactly this structure; no extra text):
1. Plan Summary
{one-line summary}

2. Detection Steps
1) Step 1: {objective — conceptual signals — FP mitigation}
2) Step 2: {objective — conceptual signals — FP mitigation}
...
(narrow to ≤12 steps)

3. Target Elements
- {list of element types to inspect}

4. Dataflow / Taint Considerations
- {conceptual taint/flow rules to track}

5. Validation & Test Cases
- Positive: {brief}
- Negative: {brief}
- Test harness notes: {brief}

6. Estimated Effort & Priority
{low/medium/high}

7. Likely False-Positive Sources & Mitigations
- {list}

8. Limitations & Assumptions
- {explicit missing info or assumptions}

CONSTRAINTS:
- Do not emit any CodeQL, SQL, pseudocode, or query fragments.
- Keep answers evidence-based and reference which provided field supported each major choice (e.g., “based on [PATCH_DIFF] hunk that adds X”).
- Output must be machine-parseable: keep the exact numbered section headings as above.