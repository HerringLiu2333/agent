You are a senior static-analysis engineer and CodeQL design expert.
Task: Based only on the supplied materials, produce a human-readable detection plan (natural-language) for a CodeQL checker that would detect the same class of vulnerability described. DO NOT produce any query code or pseudocode — the output must be purely natural language steps and rationale.

Rules:
1. Only use evidence contained in the sections labeled [PATCH_DESCRIPTION], [PATCH_DIFF], and [ROOTCAUSE_ANALYSIS]. Do not invent facts.
2. The plan must be a step-by-step detection strategy in natural language (numbered steps). No code, no query snippets, no regex, no domain-specific language.
3. Each step must state: objective, signals to look for (AST/semantic patterns expressed conceptually), why it maps to the root cause, and how to reduce false positives.
4. Include a short test/validation strategy (what sample cases to run and expected outcomes).
5. List limitations and assumptions (what is Not determinable from inputs).
6. Keep the plan concise: overall ≤ 12 numbered steps and each step ≤ 2 concise sentences. Use bullets where helpful.
7. If information required to design an accurate checker is missing, state it explicitly under "Limitations & Assumptions".

[META]
CVE_NAME: CVE-2024-57989

[INFO]
[PATCH_DESCRIPTION]
 wifi: mt76: mt7925: fix NULL deref check in mt7925_change_vif_links
 In mt7925_change_vif_links() devm_kzalloc() may return NULL but this
 returned value is not checked.

 Fixes: 69acd6d910b0 ("wifi: mt76: mt7925: add mt7925_change_vif_links")

[PATCH_DIFF]
    diff --git a/drivers/net/wireless/mediatek/mt76/mt7925/main.c b/drivers/net/wireless/mediatek/mt76/mt7925/main.c
    index 791c8b00e11264..a5110f8485e526 100644
    --- a/drivers/net/wireless/mediatek/mt76/mt7925/main.c
    +++ b/drivers/net/wireless/mediatek/mt76/mt7925/main.c
    @@ -1946,6 +1946,8 @@ mt7925_change_vif_links(struct ieee80211_hw *hw, struct ieee80211_vif *vif,
     					     GFP_KERNEL);
     			mlink = devm_kzalloc(dev->mt76.dev, sizeof(*mlink),
     					     GFP_KERNEL);
    +			if (!mconf || !mlink)
    +				return -ENOMEM;
     		}
     
     		mconfs[link_id] = mconf;



[ROOTCAUSE_ANALYSIS]
1. CVE Identifier
CVE-2024-57989

2. Vulnerability Type
NULL pointer dereference due to missing allocation failure check

3. Root Cause Summary
mt7925_change_vif_links() allocates per-link structures (mconf, mlink) using devm_kzalloc() but did not check for NULL returns before using these pointers. When devm_kzalloc() fails under memory pressure, the function proceeds, leading to subsequent dereference of NULL pointers. This oversight in pre-patch logic causes a kernel crash (DoS) during VIF link changes.

4. Kernel Subsystem Analysis
1) Affected Subsystem:
MediaTek mt76 mt7925 Wi-Fi driver (drivers/net/wireless/mediatek/mt76/mt7925/main.c)

2) Pre-Patch Flaw:
Within mt7925_change_vif_links(), two devm_kzalloc() calls allocate mconf and mlink, but the code did not validate the returned pointers. The function continues to operate (e.g., “mconfs[link_id] = mconf;”) and later uses these structures without ensuring they are non-NULL, making a NULL dereference possible.

3) Trigger Condition:
Memory allocation failure in devm_kzalloc() for either mconf or mlink during a change of VIF links (e.g., under low-memory conditions).

4) Impact Mechanism:
Subsequent access to fields of mconf or mlink (or via mconfs[]/mlinks[] entries) results in a NULL pointer dereference, causing a kernel oops/panic and denial of service.

5. Patch Analysis
1) Fix Approach:
Introduce an early error-return on allocation failures, ensuring the function exits with -ENOMEM before any use of potentially NULL pointers.

2) Key Code Changes:
Added:
“if (!mconf || !mlink)
    return -ENOMEM;”
immediately after both devm_kzalloc() calls in mt7925_change_vif_links().

3) Locking/Concurrency Impact:
None. The patch only adds allocation failure checks and an early return; it does not modify locking or concurrency behavior. Any concurrency implications are Unknown/Not determinable from the provided diff.

6. Broader Kernel Security Implications
Validating memory allocation results is critical in kernel drivers to prevent crashes under memory pressure. This fix hardens the mt7925 driver against unprivileged denial-of-service scenarios that could be triggered by operations involving VIF link changes when memory is constrained. Ensuring consistent error handling and propagation reduces the kernel’s susceptibility to reliability and availability issues across the wireless subsystem.

[REQUEST]
Produce a detection plan for a CodeQL-based static checker that would detect similar pre-patch flaws.
Requirements for the plan:
- High-level detection goal (1–2 lines).
- A numbered list of detection steps (objective, conceptual AST/semantic signals, FP mitigation).
- Types of program elements to target (functions, call sites, allocation sites, condition checks, lock boundaries, function return-value uses, etc.).
- Dataflow/taint patterns to consider (if applicable), described conceptually.
- Minimal test cases to validate the checker (positive/negative examples).
- Estimated effort/priority (low/medium/high) and likely false-positive sources.
- A short "Limitations & Assumptions" block.

OUTPUT FORMAT (produce exactly this structure; no extra text):
1. Plan Summary
{one-line summary}

2. Detection Steps
1) Step 1: {objective — conceptual signals — FP mitigation}
2) Step 2: {objective — conceptual signals — FP mitigation}
...
(narrow to ≤12 steps)

3. Target Elements
- {list of element types to inspect}

4. Dataflow / Taint Considerations
- {conceptual taint/flow rules to track}

5. Validation & Test Cases
- Positive: {brief}
- Negative: {brief}
- Test harness notes: {brief}

6. Estimated Effort & Priority
{low/medium/high}

7. Likely False-Positive Sources & Mitigations
- {list}

8. Limitations & Assumptions
- {explicit missing info or assumptions}

CONSTRAINTS:
- Do not emit any CodeQL, SQL, pseudocode, or query fragments.
- Keep answers evidence-based and reference which provided field supported each major choice (e.g., “based on [PATCH_DIFF] hunk that adds X”).
- Output must be machine-parseable: keep the exact numbered section headings as above.