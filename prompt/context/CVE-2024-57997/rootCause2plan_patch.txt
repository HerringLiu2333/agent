You are a senior static-analysis engineer and CodeQL design expert.
Task: Based only on the supplied materials, produce a human-readable detection plan (natural-language) for a CodeQL checker that would detect the same class of vulnerability described. DO NOT produce any query code or pseudocode — the output must be purely natural language steps and rationale.

Rules:
1. Only use evidence contained in the sections labeled [PATCH_DESCRIPTION], [PATCH_DIFF], and [ROOTCAUSE_ANALYSIS]. Do not invent facts.
2. The plan must be a step-by-step detection strategy in natural language (numbered steps). No code, no query snippets, no regex, no domain-specific language.
3. Each step must state: objective, signals to look for (AST/semantic patterns expressed conceptually), why it maps to the root cause, and how to reduce false positives.
4. Include a short test/validation strategy (what sample cases to run and expected outcomes).
5. List limitations and assumptions (what is Not determinable from inputs).
6. Keep the plan concise: overall ≤ 12 numbered steps and each step ≤ 2 concise sentences. Use bullets where helpful.
7. If information required to design an accurate checker is missing, state it explicitly under "Limitations & Assumptions".

[META]
CVE_NAME: CVE-2024-57997

[INFO]
[PATCH_DESCRIPTION]
 wifi: wcn36xx: fix channel survey memory allocation size
 [ Upstream commit 6200d947f050efdba4090dfefd8a01981363d954 ]
 
 KASAN reported a memory allocation issue in wcn->chan_survey
 due to incorrect size calculation.
 This commit uses kcalloc to allocate memory for wcn->chan_survey,
 ensuring proper initialization and preventing the use of uninitialized
 values when there are no frames on the channel.

 Fixes: 29696e0aa413 ("wcn36xx: Track SNR and RSSI for each RX frame")

[PATCH_DIFF]
 diff --git a/drivers/net/wireless/ath/wcn36xx/main.c b/drivers/net/wireless/ath/wcn36xx/main.c
 index 2bd1163177f08f…9bbbc86fd2d93d 100644
 --- a/drivers/net/wireless/ath/wcn36xx/main.c
 +++ b/drivers/net/wireless/ath/wcn36xx/main.c
 @@ -1586,7 +1586,10 @@ static int wcn36xx_probe(struct platform_device *pdev)
 }

   n_channels = wcn_band_2ghz.n_channels + wcn_band_5ghz.n_channels;
 - wcn->chan_survey = devm_kmalloc(wcn->dev, n_channels, GFP_KERNEL);
 + wcn->chan_survey = devm_kcalloc(wcn->dev,
 + n_channels,
 + sizeof(struct wcn36xx_chan_survey),
 + GFP_KERNEL);
   if (!wcn->chan_survey) {
   ret = -ENOMEM;
   goto out_wq;



[ROOTCAUSE_ANALYSIS]
1. CVE Identifier
CVE-2024-57997

2. Vulnerability Type
- Heap buffer overflow (undersized allocation for array of structs)
- Use of uninitialized heap memory (secondary effect)

3. Root Cause Summary
The driver allocated memory for an array of struct wcn36xx_chan_survey using devm_kmalloc with the element count (n_channels) as the size instead of n_channels * sizeof(struct wcn36xx_chan_survey). This under-allocates the buffer, causing out-of-bounds writes/reads when indexing per-channel survey data. Additionally, using kmalloc left the buffer uninitialized, leading to potential use of uninitialized values when channels had no frames.

4. Kernel Subsystem Analysis
1) Affected Subsystem:
- Wireless networking, Qualcomm Atheros wcn36xx driver (drivers/net/wireless/ath/wcn36xx)

2) Pre-Patch Flaw:
- In wcn36xx_probe(), the code allocated the survey array with: devm_kmalloc(wcn->dev, n_channels, GFP_KERNEL); instead of allocating n_channels elements of struct wcn36xx_chan_survey.
- The buffer was not zero-initialized, so fields could be read before being set when no frames were received on a channel.

3) Trigger Condition:
- Any path that indexes wcn->chan_survey by channel (e.g., tracking SNR/RSSI per RX frame added by “wcn36xx: Track SNR and RSSI for each RX frame”) or reporting survey data, after probe initializes the array with the undersized allocation.

4) Impact Mechanism:
- Out-of-bounds heap accesses when accessing chan_survey[i] beyond the mistakenly allocated n_channels bytes, leading to memory corruption and potential kernel crashes.
- Reading uninitialized fields from the survey array could propagate undefined/bogus values (and potentially expose stale data) when no frames have been seen on a channel.

5. Patch Analysis
1) Fix Approach:
- Correct the allocation to account for element size and ensure zero-initialization by switching to devm_kcalloc with n_channels and sizeof(struct wcn36xx_chan_survey).

2) Key Code Changes:
- Replaced:
  - wcn->chan_survey = devm_kmalloc(wcn->dev, n_channels, GFP_KERNEL);
- With:
  - wcn->chan_survey = devm_kcalloc(wcn->dev, n_channels, sizeof(struct wcn36xx_chan_survey), GFP_KERNEL);
- This fixes the size miscalculation and initializes memory to zero to avoid uninitialized use.

3) Locking/Concurrency Impact:
- None. The change is limited to allocation during probe; no locking semantics or ordering were modified.

6. Broader Kernel Security Implications
- Highlights a common and severe class of bugs: array allocations using element count instead of count * sizeof(element), leading to heap overflows.
- Reinforces best practices to use kcalloc for array allocations to both compute sizes safely and obtain zeroed memory, reducing risks of both OOB and uninitialized-use bugs.
- Validates the usefulness of KASAN for detecting such memory errors early in development/testing.

[REQUEST]
Produce a detection plan for a CodeQL-based static checker that would detect similar pre-patch flaws.
Requirements for the plan:
- High-level detection goal (1–2 lines).
- A numbered list of detection steps (objective, conceptual AST/semantic signals, FP mitigation).
- Types of program elements to target (functions, call sites, allocation sites, condition checks, lock boundaries, function return-value uses, etc.).
- Dataflow/taint patterns to consider (if applicable), described conceptually.
- Minimal test cases to validate the checker (positive/negative examples).
- Estimated effort/priority (low/medium/high) and likely false-positive sources.
- A short "Limitations & Assumptions" block.

OUTPUT FORMAT (produce exactly this structure; no extra text):
1. Plan Summary
{one-line summary}

2. Detection Steps
1) Step 1: {objective — conceptual signals — FP mitigation}
2) Step 2: {objective — conceptual signals — FP mitigation}
...
(narrow to ≤12 steps)

3. Target Elements
- {list of element types to inspect}

4. Dataflow / Taint Considerations
- {conceptual taint/flow rules to track}

5. Validation & Test Cases
- Positive: {brief}
- Negative: {brief}
- Test harness notes: {brief}

6. Estimated Effort & Priority
{low/medium/high}

7. Likely False-Positive Sources & Mitigations
- {list}

8. Limitations & Assumptions
- {explicit missing info or assumptions}

CONSTRAINTS:
- Do not emit any CodeQL, SQL, pseudocode, or query fragments.
- Keep answers evidence-based and reference which provided field supported each major choice (e.g., “based on [PATCH_DIFF] hunk that adds X”).
- Output must be machine-parseable: keep the exact numbered section headings as above.