You are a senior static-analysis engineer and CodeQL design expert.
Task: Based only on the supplied materials, produce a human-readable detection plan (natural-language) for a CodeQL checker that would detect the same class of vulnerability described. DO NOT produce any query code or pseudocode — the output must be purely natural language steps and rationale.

Rules:
1. Only use evidence contained in the sections labeled [PATCH_DESCRIPTION], [PATCH_DIFF], and [ROOTCAUSE_ANALYSIS]. Do not invent facts.
2. The plan must be a step-by-step detection strategy in natural language (numbered steps). No code, no query snippets, no regex, no domain-specific language.
3. Each step must state: objective, signals to look for (AST/semantic patterns expressed conceptually), why it maps to the root cause, and how to reduce false positives.
4. Include a short test/validation strategy (what sample cases to run and expected outcomes).
5. List limitations and assumptions (what is Not determinable from inputs).
6. Keep the plan concise: overall ≤ 12 numbered steps and each step ≤ 2 concise sentences. Use bullets where helpful.
7. If information required to design an accurate checker is missing, state it explicitly under "Limitations & Assumptions".

[META]
CVE_NAME: CVE-2025-38273

[INFO]
[PATCH_DESCRIPTION]
    net: tipc: fix refcount warning in tipc_aead_encrypt
    syzbot reported a refcount warning [1] caused by calling get_net() on
    a network namespace that is being destroyed (refcount=0). This happens
    when a TIPC discovery timer fires during network namespace cleanup.
    
    The recently added get_net() call in commit e279024617134 ("net/tipc:
    fix slab-use-after-free Read in tipc_aead_encrypt_done") attempts to
    hold a reference to the network namespace. However, if the namespace
    is already being destroyed, its refcount might be zero, leading to the
'   use-after-free warning.
    
    Replace get_net() with maybe_get_net(), which safely checks if the
    refcount is non-zero before incrementing it. If the namespace is being
    destroyed, return -ENODEV early, after releasing the bearer reference.

[PATCH_DIFF]
     @@ -818,7 +818,11 @@ static int tipc_aead_encrypt(struct tipc_aead *aead, struct sk_buff *skb,
      	}
      
      	/* Get net to avoid freed tipc_crypto when delete namespace */
     -	get_net(aead->crypto->net);
     +	if (!maybe_get_net(aead->crypto->net)) {
     +		tipc_bearer_put(b);
     +		rc = -ENODEV;
     +		goto exit;
     +	}
      
      	/* Now, do encrypt */
      	rc = crypto_aead_encrypt(req);



[ROOTCAUSE_ANALYSIS]
1. CVE Identifier
CVE-2025-38273

2. Vulnerability Type
Use-after-free due to improper reference counting (race with network namespace teardown)

3. Root Cause Summary
tipc_aead_encrypt() unconditionally called get_net(aead->crypto->net) to pin the network namespace even when the namespace was already in teardown with a zero refcount. get_net() uses a strict refcount increment that warns (and can imply UAF) when invoked on an object whose refcount is 0. When a TIPC discovery timer fired during netns destruction, this led to a refcount warning and potential use-after-free on the net namespace (and associated tipc_crypto) objects. The pre-patch logic lacked a safe, conditional ref acquisition and an early abort path for a dying namespace.

4. Kernel Subsystem Analysis
1) Affected Subsystem:
- Networking, TIPC (Transparent Inter-Process Communication) crypto path (AEAD), interaction with network namespaces.

2) Pre-Patch Flaw:
- In tipc_aead_encrypt(), the code did “get_net(aead->crypto->net)” without verifying that the namespace was still alive.
- This unconditional refcount increment could be executed after the namespace refcount reached 0 during teardown, violating refcount semantics and risking UAF.

3) Trigger Condition:
- A TIPC discovery timer firing while a network namespace is being destroyed (netns refcount already at 0).
- The timer-driven path enters tipc_aead_encrypt() and executes get_net() on the dying namespace.

4) Impact Mechanism:
- get_net() on a zero-refcount netns triggers a refcount warning and logically “resurrects” a freed object, enabling subsequent operations (e.g., crypto_aead_encrypt) to access memory tied to a freed namespace/tipc_crypto.
- This creates a use-after-free window with undefined behavior, potentially leading to crashes or memory corruption.

5. Patch Analysis
1) Fix Approach:
- Replace get_net() with maybe_get_net(), which only increments the namespace refcount if it is non-zero, preventing refcount misuse on a dying namespace.
- If the namespace cannot be safely referenced, abort the operation early with -ENODEV after releasing the bearer reference to avoid leaks.

2) Key Code Changes:
- In tipc_aead_encrypt():
  - Pre-patch: get_net(aead->crypto->net);
  - Post-patch: if (!maybe_get_net(aead->crypto->net)) { tipc_bearer_put(b); rc = -ENODEV; goto exit; }
- Adds a safe acquisition pattern and an explicit early-return path when the netns is in teardown.

3) Locking/Concurrency Impact:
- Addresses a race between timer context and netns teardown via safe ref acquisition (maybe_get_net uses inc-not-zero semantics).
- No new locks are introduced; correctness is achieved by conditional refcounting and early exit, preventing operations from running on objects with potentially freed lifetimes.
- Ensures proper resource release on failure path (tipc_bearer_put(b)) to maintain refcount balance.

6. Broader Kernel Security Implications
- Demonstrates the importance of conditional reference acquisition when interacting with objects that can be concurrently torn down (e.g., network namespaces). 
- Encourages use of maybe_get_net() (or equivalent inc-not-zero patterns) in timer/workqueue paths that race with teardown to prevent UAFs. 
- Reinforces that fixes for one lifetime issue (adding get_net) must account for teardown races to avoid introducing new refcount/UAF bugs.

[REQUEST]
Produce a detection plan for a CodeQL-based static checker that would detect similar pre-patch flaws.
Requirements for the plan:
- High-level detection goal (1–2 lines).
- A numbered list of detection steps (objective, conceptual AST/semantic signals, FP mitigation).
- Types of program elements to target (functions, call sites, allocation sites, condition checks, lock boundaries, function return-value uses, etc.).
- Dataflow/taint patterns to consider (if applicable), described conceptually.
- Minimal test cases to validate the checker (positive/negative examples).
- Estimated effort/priority (low/medium/high) and likely false-positive sources.
- A short "Limitations & Assumptions" block.

OUTPUT FORMAT (produce exactly this structure; no extra text):
1. Plan Summary
{one-line summary}

2. Detection Steps
1) Step 1: {objective — conceptual signals — FP mitigation}
2) Step 2: {objective — conceptual signals — FP mitigation}
...
(narrow to ≤12 steps)

3. Target Elements
- {list of element types to inspect}

4. Dataflow / Taint Considerations
- {conceptual taint/flow rules to track}

5. Validation & Test Cases
- Positive: {brief}
- Negative: {brief}
- Test harness notes: {brief}

6. Estimated Effort & Priority
{low/medium/high}

7. Likely False-Positive Sources & Mitigations
- {list}

8. Limitations & Assumptions
- {explicit missing info or assumptions}

CONSTRAINTS:
- Do not emit any CodeQL, SQL, pseudocode, or query fragments.
- Keep answers evidence-based and reference which provided field supported each major choice (e.g., “based on [PATCH_DIFF] hunk that adds X”).
- Output must be machine-parseable: keep the exact numbered section headings as above.