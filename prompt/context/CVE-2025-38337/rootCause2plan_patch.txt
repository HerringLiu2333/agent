You are a senior static-analysis engineer and CodeQL design expert.
Task: Based only on the supplied materials, produce a human-readable detection plan (natural-language) for a CodeQL checker that would detect the same class of vulnerability described. DO NOT produce any query code or pseudocode — the output must be purely natural language steps and rationale.

Rules:
1. Only use evidence contained in the sections labeled [PATCH_DESCRIPTION], [PATCH_DIFF], and [ROOTCAUSE_ANALYSIS]. Do not invent facts.
2. The plan must be a step-by-step detection strategy in natural language (numbered steps). No code, no query snippets, no regex, no domain-specific language.
3. Each step must state: objective, signals to look for (AST/semantic patterns expressed conceptually), why it maps to the root cause, and how to reduce false positives.
4. Include a short test/validation strategy (what sample cases to run and expected outcomes).
5. List limitations and assumptions (what is Not determinable from inputs).
6. Keep the plan concise: overall ≤ 12 numbered steps and each step ≤ 2 concise sentences. Use bullets where helpful.
7. If information required to design an accurate checker is missing, state it explicitly under "Limitations & Assumptions".

[META]
CVE_NAME: CVE-2025-38337

[INFO]
[PATCH_DESCRIPTION]
    jbd2: fix data-race and null-ptr-deref in jbd2_journal_dirty_metadata()
    Since handle->h_transaction may be a NULL pointer, so we should change it
    to call is_handle_aborted(handle) first before dereferencing it.
    
    And the following data-race was reported in my fuzzer:
    
    ==================================================================
    BUG: KCSAN: data-race in jbd2_journal_dirty_metadata / jbd2_journal_dirty_metadata
    
    write to 0xffff888011024104 of 4 bytes by task 10881 on cpu 1:
     jbd2_journal_dirty_metadata+0x2a5/0x770 fs/jbd2/transaction.c:1556
     __ext4_handle_dirty_metadata+0xe7/0x4b0 fs/ext4/ext4_jbd2.c:358
     ext4_do_update_inode fs/ext4/inode.c:5220 [inline]
     ext4_mark_iloc_dirty+0x32c/0xd50 fs/ext4/inode.c:5869
     __ext4_mark_inode_dirty+0xe1/0x450 fs/ext4/inode.c:6074
     ext4_dirty_inode+0x98/0xc0 fs/ext4/inode.c:6103
    ....
    
    read to 0xffff888011024104 of 4 bytes by task 10880 on cpu 0:
     jbd2_journal_dirty_metadata+0xf2/0x770 fs/jbd2/transaction.c:1512
     __ext4_handle_dirty_metadata+0xe7/0x4b0 fs/ext4/ext4_jbd2.c:358
     ext4_do_update_inode fs/ext4/inode.c:5220 [inline]
     ext4_mark_iloc_dirty+0x32c/0xd50 fs/ext4/inode.c:5869
     __ext4_mark_inode_dirty+0xe1/0x450 fs/ext4/inode.c:6074
     ext4_dirty_inode+0x98/0xc0 fs/ext4/inode.c:6103
    ....
    
    value changed: 0x00000000 -> 0x00000001
    ==================================================================
    
    This issue is caused by missing data-race annotation for jh->b_modified.
    Therefore, the missing annotation needs to be added.

[PATCH_DIFF]
    @@ -1509,7 +1509,7 @@ int jbd2_journal_dirty_metadata(handle_t *handle, struct buffer_head *bh)
     				jh->b_next_transaction == transaction);
     		spin_unlock(&jh->b_state_lock);
     	}
    -	if (jh->b_modified == 1) {
    +	if (data_race(jh->b_modified == 1)) {
     		/* If it's in our transaction it must be in BJ_Metadata list. */
     		if (data_race(jh->b_transaction == transaction &&
     		    jh->b_jlist != BJ_Metadata)) {
    @@ -1528,7 +1528,6 @@ int jbd2_journal_dirty_metadata(handle_t *handle, struct buffer_head *bh)
     		goto out;
     	}
     
    -	journal = transaction->t_journal;
     	spin_lock(&jh->b_state_lock);
     
     	if (is_handle_aborted(handle)) {
    @@ -1543,6 +1542,8 @@ int jbd2_journal_dirty_metadata(handle_t *handle, struct buffer_head *bh)
     		goto out_unlock_bh;
     	}
     
    +	journal = transaction->t_journal;
    +
     	if (jh->b_modified == 0) {
     		/*
     		 * This buffer's got modified and becoming part



[ROOTCAUSE_ANALYSIS]
1. CVE Identifier
CVE-2025-38337

2. Vulnerability Type
- Null pointer dereference
- Race condition (missing data-race annotation on intentional lockless read)

3. Root Cause Summary
- jbd2_journal_dirty_metadata() dereferenced transaction->t_journal (via “journal = transaction->t_journal;”) before verifying that the handle was not aborted and that handle->h_transaction (i.e., transaction) was non-NULL, enabling a NULL pointer dereference when the handle has been aborted.
- The function performed an unsynchronized read of jh->b_modified (“if (jh->b_modified == 1)”) without data_race() annotation, producing a KCSAN-reported data race with concurrent writers, even though the pattern is intended to be a benign lockless check.

4. Kernel Subsystem Analysis
1) Affected Subsystem:
- jbd2 journaling layer, fs/jbd2/transaction.c, function jbd2_journal_dirty_metadata()

2) Pre-Patch Flaw:
- Unconditional dereference: “journal = transaction->t_journal;” executed before calling is_handle_aborted(handle), so a NULL handle->h_transaction could be dereferenced.
- Missing data-race annotation for an intentional lockless read: “if (jh->b_modified == 1)” was read outside of a lock without data_race(), unlike nearby fields already annotated.

3) Trigger Condition:
- The function is called while the journaling handle has been aborted, leaving handle->h_transaction == NULL, yet the code dereferences transaction->t_journal before checking is_handle_aborted(handle).
- Concurrent CPUs reading/writing jh->b_modified in jbd2_journal_dirty_metadata(), as seen in the KCSAN report, with one CPU writing and another CPU reading without annotation.

4) Impact Mechanism:
- Null pointer dereference of transaction->t_journal causes a kernel Oops/DoS.
- The data-race yields KCSAN-reported races and potentially inconsistent observations of jh->b_modified; functional impact beyond the report is Unknown/Not determinable.

5. Patch Analysis
1) Fix Approach:
- Safety ordering: defer dereference of transaction->t_journal until after checking is_handle_aborted(handle), avoiding a NULL dereference when the handle was aborted.
- Concurrency annotation: wrap the lockless read of jh->b_modified with data_race() to document the intentional benign race and silence false-positive reports.

2) Key Code Changes:
- Replace “if (jh->b_modified == 1)” with “if (data_race(jh->b_modified == 1))” (fs/jbd2/transaction.c: around line 1509).
- Move “journal = transaction->t_journal;” from before the lock/abort check to after the is_handle_aborted(handle) check (deleted near line 1528 and reinserted near line 1542), preventing dereference when transaction may be NULL.

3) Locking/Concurrency Impact:
- No new locking introduced; existing spin_lock(&jh->b_state_lock) usage retained.
- The data_race() annotation acknowledges and documents the intentional lockless read of jh->b_modified.
- Reordering ensures transaction->t_journal is not accessed if the handle is aborted, removing the race-to-crash window with a NULL transaction pointer.

6. Broader Kernel Security Implications
- Prevents a straightforward kernel DoS via NULL pointer dereference during metadata dirtying when journaling handles are aborted.
- Clarifies benign lockless patterns with annotations, improving KCSAN signal quality and reducing noise for future concurrency bug detection.
- Highlights the importance of validating handle/transaction state before dereferencing transaction-dependent fields across jbd2 paths.

[REQUEST]
Produce a detection plan for a CodeQL-based static checker that would detect similar pre-patch flaws.
Requirements for the plan:
- High-level detection goal (1–2 lines).
- A numbered list of detection steps (objective, conceptual AST/semantic signals, FP mitigation).
- Types of program elements to target (functions, call sites, allocation sites, condition checks, lock boundaries, function return-value uses, etc.).
- Dataflow/taint patterns to consider (if applicable), described conceptually.
- Minimal test cases to validate the checker (positive/negative examples).
- Estimated effort/priority (low/medium/high) and likely false-positive sources.
- A short "Limitations & Assumptions" block.

OUTPUT FORMAT (produce exactly this structure; no extra text):
1. Plan Summary
{one-line summary}

2. Detection Steps
1) Step 1: {objective — conceptual signals — FP mitigation}
2) Step 2: {objective — conceptual signals — FP mitigation}
...
(narrow to ≤12 steps)

3. Target Elements
- {list of element types to inspect}

4. Dataflow / Taint Considerations
- {conceptual taint/flow rules to track}

5. Validation & Test Cases
- Positive: {brief}
- Negative: {brief}
- Test harness notes: {brief}

6. Estimated Effort & Priority
{low/medium/high}

7. Likely False-Positive Sources & Mitigations
- {list}

8. Limitations & Assumptions
- {explicit missing info or assumptions}

CONSTRAINTS:
- Do not emit any CodeQL, SQL, pseudocode, or query fragments.
- Keep answers evidence-based and reference which provided field supported each major choice (e.g., “based on [PATCH_DIFF] hunk that adds X”).
- Output must be machine-parseable: keep the exact numbered section headings as above.