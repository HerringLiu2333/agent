You are a senior static-analysis engineer and CodeQL design expert.
Task: Based only on the supplied materials, produce a human-readable detection plan (natural-language) for a CodeQL checker that would detect the same class of vulnerability described. DO NOT produce any query code or pseudocode — the output must be purely natural language steps and rationale.

Rules:
1. Only use evidence contained in the sections labeled [PATCH_DESCRIPTION], [PATCH_DIFF], [FUNCTION_CONTENT], and [ROOTCAUSE_ANALYSIS]. Do not invent facts.
2. The plan must be a step-by-step detection strategy in natural language (numbered steps). No code, no query snippets, no regex, no domain-specific language.
3. Each step must state: objective, signals to look for (AST/semantic patterns expressed conceptually), why it maps to the root cause, and how to reduce false positives.
4. Include a short test/validation strategy (what sample cases to run and expected outcomes).
5. List limitations and assumptions (what is Not determinable from inputs).
6. Keep the plan concise: overall ≤ 12 numbered steps and each step ≤ 2 concise sentences. Use bullets where helpful.
7. If information required to design an accurate checker is missing, state it explicitly under "Limitations & Assumptions".

[META]
CVE_NAME: CVE-2024-58094

[INFO]
[PATCH_DESCRIPTION]
 jfs: add check read-only before truncation in jfs_truncate_nolock()
 [ Upstream commit b5799dd77054c1ec49b0088b006c9908e256843b ]
 
 Added a check for "read-only" mode in the `jfs_truncate_nolock`
 function to avoid errors related to writing to a read-only
 filesystem.
 
 Call stack:
 
 block_write_begin() {
   jfs_write_failed() {
     jfs_truncate() {
       jfs_truncate_nolock() {
         txEnd() {
           ...
           log = JFS_SBI(tblk->sb)->log;
           // (log == NULL)
 
 If the `isReadOnly(ip)` condition is triggered in
 `jfs_truncate_nolock`, the function execution will stop, and no
 further data modification will occur. Instead, the `xtTruncate`
 function will be called with the "COMMIT_WMAP" flag, preventing
 modifications in "read-only" mode.

 Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")

[PATCH_DIFF]
 diff --git a/fs/jfs/inode.c b/fs/jfs/inode.c
 index 07cfdc4405968b…60fc92dee24d20 100644
 --- a/fs/jfs/inode.c
 +++ b/fs/jfs/inode.c
 @@ -369,7 +369,7 @@ void jfs_truncate_nolock(struct inode *ip, loff_t length)

   ASSERT(length >= 0);

 - if (test_cflag(COMMIT_Nolink, ip)) {
 + if (test_cflag(COMMIT_Nolink, ip) || isReadOnly(ip)) {
   xtTruncate(0, ip, length, COMMIT_WMAP);
   return;
 }

[FUNCTION_CONTENT]
void jfs_truncate_nolock(struct inode *ip, loff_t length)
{
	loff_t newsize;
	tid_t tid;

	ASSERT(length >= 0);

	if (test_cflag(COMMIT_Nolink, ip)) {
		xtTruncate(0, ip, length, COMMIT_WMAP);
		return;
	}

	do {
		tid = txBegin(ip->i_sb, 0);

		/*
		 * The commit_mutex cannot be taken before txBegin.
		 * txBegin may block and there is a chance the inode
		 * could be marked dirty and need to be committed
		 * before txBegin unblocks
		 */
		mutex_lock(&JFS_IP(ip)->commit_mutex);

		newsize = xtTruncate(tid, ip, length,
				     COMMIT_TRUNCATE | COMMIT_PWMAP);
		if (newsize < 0) {
			txEnd(tid);
			mutex_unlock(&JFS_IP(ip)->commit_mutex);
			break;
		}

		inode_set_mtime_to_ts(ip, inode_set_ctime_current(ip));
		mark_inode_dirty(ip);

		txCommit(tid, 1, &ip, 0);
		txEnd(tid);
		mutex_unlock(&JFS_IP(ip)->commit_mutex);
	} while (newsize > length);	/* Truncate isn't always atomic */
}

/* ----- separator ----- */


	ASSERT(length >= 0);

	if (test_cflag(COMMIT_Nolink, ip)) {
		xtTruncate(0, ip, length, COMMIT_WMAP);
		return;
	}



[ROOTCAUSE_ANALYSIS]
1. CVE Identifier
CVE-2024-58094

2. Vulnerability Type
Missing read-only state validation leading to NULL pointer dereference in the JFS journaling path (kernel crash/DoS) and unintended write attempt on a read-only filesystem.

3. Root Cause Summary
jfs_truncate_nolock() lacked a check for read-only filesystem state and unconditionally entered the transactional truncate path (txBegin/txCommit/txEnd). On read-only mounts, JFS_SBI(sb)->log can be NULL, and txEnd() dereferences this NULL log, causing a crash. The patch adds isReadOnly(ip) to the early bailout path to avoid starting a transaction and uses a non-transactional xtTruncate(…, COMMIT_WMAP), preventing modification attempts on a read-only filesystem.

4. Kernel Subsystem Analysis
1) Affected Subsystem:
JFS filesystem (fs/jfs), inode truncation and journaling/transaction management.

2) Pre-Patch Flaw:
jfs_truncate_nolock() only checked test_cflag(COMMIT_Nolink, ip) before choosing the non-transactional path; it did not check isReadOnly(ip), so it proceeded with txBegin/txCommit/txEnd even when the filesystem was read-only.

3) Trigger Condition:
When block_write_begin() → jfs_write_failed() → jfs_truncate() → jfs_truncate_nolock() is invoked on a read-only filesystem where COMMIT_Nolink is not set. In this sequence, txEnd() reaches JFS_SBI(tblk->sb)->log with log == NULL (as noted in the provided call stack).

4) Impact Mechanism:
Entering the transactional path on a read-only filesystem leads to txEnd() dereferencing a NULL journal log pointer, causing a kernel NULL pointer dereference (oops/panic). Additionally, it attempts metadata changes (truncate) contrary to read-only policy, risking integrity issues.

5. Patch Analysis
1) Fix Approach:
Introduce a read-only guard and short-circuit the function to a safe, non-transactional path when the inode/filesystem is read-only, preventing transaction creation and commits.

2) Key Code Changes:
Modified the early conditional from:
- if (test_cflag(COMMIT_Nolink, ip)) {
to:
+ if (test_cflag(COMMIT_Nolink, ip) || isReadOnly(ip)) {
This routes read-only cases to xtTruncate(0, ip, length, COMMIT_WMAP) and returns, avoiding txBegin/txCommit/txEnd.

3) Locking/Concurrency Impact:
The new early return prevents acquiring JFS_IP(ip)->commit_mutex and starting a transaction on read-only filesystems, removing the faulty path without altering existing locking semantics in the transactional case.

6. Broader Kernel Security Implications
Strengthening read-only checks in filesystem mutation paths reduces the risk of kernel crashes (DoS) triggered by file operations on read-only mounts. It reinforces policy compliance and prevents unintended journal/metadata updates when journaling structures may be unavailable. This defensive validation lowers attack surface across error paths and aligns truncation logic with mount state, improving overall filesystem robustness.

[REQUEST]
Produce a detection plan for a CodeQL-based static checker that would detect similar pre-patch flaws.
Requirements for the plan:
- High-level detection goal (1–2 lines).
- A numbered list of detection steps (objective, conceptual AST/semantic signals, FP mitigation).
- Types of program elements to target (functions, call sites, allocation sites, condition checks, lock boundaries, function return-value uses, etc.).
- Dataflow/taint patterns to consider (if applicable), described conceptually.
- Minimal test cases to validate the checker (positive/negative examples).
- Estimated effort/priority (low/medium/high) and likely false-positive sources.
- A short "Limitations & Assumptions" block.

OUTPUT FORMAT (produce exactly this structure; no extra text):
1. Plan Summary
{one-line summary}

2. Detection Steps
1) Step 1: {objective — conceptual signals — FP mitigation}
2) Step 2: {objective — conceptual signals — FP mitigation}
...
(narrow to ≤12 steps)

3. Target Elements
- {list of element types to inspect}

4. Dataflow / Taint Considerations
- {conceptual taint/flow rules to track}

5. Validation & Test Cases
- Positive: {brief}
- Negative: {brief}
- Test harness notes: {brief}

6. Estimated Effort & Priority
{low/medium/high}

7. Likely False-Positive Sources & Mitigations
- {list}

8. Limitations & Assumptions
- {explicit missing info or assumptions}

CONSTRAINTS:
- Do not emit any CodeQL, SQL, pseudocode, or query fragments.
- Keep answers evidence-based and reference which provided field supported each major choice (e.g., “based on [PATCH_DIFF] hunk that adds X”).
- Output must be machine-parseable: keep the exact numbered section headings as above.