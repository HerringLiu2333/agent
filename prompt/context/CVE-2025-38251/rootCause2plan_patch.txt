You are a senior static-analysis engineer and CodeQL design expert.
Task: Based only on the supplied materials, produce a human-readable detection plan (natural-language) for a CodeQL checker that would detect the same class of vulnerability described. DO NOT produce any query code or pseudocode — the output must be purely natural language steps and rationale.

Rules:
1. Only use evidence contained in the sections labeled [PATCH_DESCRIPTION], [PATCH_DIFF], and [ROOTCAUSE_ANALYSIS]. Do not invent facts.
2. The plan must be a step-by-step detection strategy in natural language (numbered steps). No code, no query snippets, no regex, no domain-specific language.
3. Each step must state: objective, signals to look for (AST/semantic patterns expressed conceptually), why it maps to the root cause, and how to reduce false positives.
4. Include a short test/validation strategy (what sample cases to run and expected outcomes).
5. List limitations and assumptions (what is Not determinable from inputs).
6. Keep the plan concise: overall ≤ 12 numbered steps and each step ≤ 2 concise sentences. Use bullets where helpful.
7. If information required to design an accurate checker is missing, state it explicitly under "Limitations & Assumptions".

[META]
CVE_NAME: CVE-2025-38251

[INFO]
[PATCH_DESCRIPTION]
    atm: clip: prevent NULL deref in clip_push()
    Blamed commit missed that vcc_destroy_socket() calls
    clip_push() with a NULL skb.
    
    If clip_devs is NULL, clip_push() then crashes when reading
    skb->truesize.
    
    Fixes: 93a2014afbac ("atm: fix a UAF in lec_arp_clear_vccs()")

[PATCH_DIFF]
    @@ -193,12 +193,6 @@ static void clip_push(struct atm_vcc *vcc, struct sk_buff *skb)
     
     	pr_debug("\n");
     
    -	if (!clip_devs) {
    -		atm_return(vcc, skb->truesize);
    -		kfree_skb(skb);
    -		return;
    -	}
    -
     	if (!skb) {
     		pr_debug("removing VCC %p\n", clip_vcc);
     		if (clip_vcc->entry)
    @@ -208,6 +202,11 @@ static void clip_push(struct atm_vcc *vcc, struct sk_buff *skb)
     		return;
     	}
     	atm_return(vcc, skb->truesize);
    +	if (!clip_devs) {
    +		kfree_skb(skb);
    +		return;
    +	}
    +
     	skb->dev = clip_vcc->entry ? clip_vcc->entry->neigh->dev : clip_devs;
     	if (!skb->dev) {



[ROOTCAUSE_ANALYSIS]
1. CVE Identifier
CVE-2025-38251

2. Vulnerability Type
NULL pointer dereference leading to kernel crash (DoS)

3. Root Cause Summary
clip_push() dereferenced skb->truesize in an early-return path when clip_devs was NULL, before verifying that skb itself was non-NULL. Because clip_push() can be invoked with skb == NULL (e.g., from vcc_destroy_socket()), this ordering bug caused a NULL dereference.

4. Kernel Subsystem Analysis
1) Affected Subsystem:
- ATM networking, Classical IP over ATM (CLIP) path (function: clip_push)

2) Pre-Patch Flaw:
- In clip_push(), the first conditional handled the “no device” case:
  - if (!clip_devs) { atm_return(vcc, skb->truesize); kfree_skb(skb); return; }
- This executed before the function checked if (!skb).
- When called with skb == NULL and clip_devs == NULL, the code accessed skb->truesize, dereferencing a NULL pointer.

3) Trigger Condition:
- clip_push() is called with skb == NULL (as noted: vcc_destroy_socket() calls clip_push() with NULL skb) while clip_devs == NULL.

4) Impact Mechanism:
- Accessing skb->truesize with skb == NULL triggers a kernel NULL pointer dereference, resulting in an oops/panic and denial of service.

5. Patch Analysis
1) Fix Approach:
- Reorder control flow to handle skb == NULL before any use of skb.
- Remove the early !clip_devs branch that used skb->truesize prior to the NULL check.
- After confirming skb is non-NULL, perform atm_return(vcc, skb->truesize), then handle the !clip_devs case by freeing skb and returning.

2) Key Code Changes:
- Deleted the initial block:
  - if (!clip_devs) { atm_return(vcc, skb->truesize); kfree_skb(skb); return; }
- Retained and positioned the skb NULL check before any skb dereference:
  - if (!skb) { ... return; }
- Added a new !clip_devs block after safely calling atm_return with a non-NULL skb:
  - atm_return(vcc, skb->truesize);
  - if (!clip_devs) { kfree_skb(skb); return; }
- Ensures skb->truesize is never read when skb is NULL.

3) Locking/Concurrency Impact:
- No locking or concurrency primitives were added or changed.
- The fix is purely an ordering change to avoid NULL dereference; accounting via atm_return remains but is now guaranteed to receive a non-NULL skb.

6. Broader Kernel Security Implications
- Highlights the need to prioritize NULL checks for skb in cleanup and teardown paths, especially when APIs may pass NULL sk_buffs.
- Emphasizes careful ordering in error/early-return paths to avoid dereferencing potentially NULL objects.
- Suggests auditing similar push/cleanup callbacks in networking subsystems for assumptions about non-NULL skb when global/device state may be NULL.

[REQUEST]
Produce a detection plan for a CodeQL-based static checker that would detect similar pre-patch flaws.
Requirements for the plan:
- High-level detection goal (1–2 lines).
- A numbered list of detection steps (objective, conceptual AST/semantic signals, FP mitigation).
- Types of program elements to target (functions, call sites, allocation sites, condition checks, lock boundaries, function return-value uses, etc.).
- Dataflow/taint patterns to consider (if applicable), described conceptually.
- Minimal test cases to validate the checker (positive/negative examples).
- Estimated effort/priority (low/medium/high) and likely false-positive sources.
- A short "Limitations & Assumptions" block.

OUTPUT FORMAT (produce exactly this structure; no extra text):
1. Plan Summary
{one-line summary}

2. Detection Steps
1) Step 1: {objective — conceptual signals — FP mitigation}
2) Step 2: {objective — conceptual signals — FP mitigation}
...
(narrow to ≤12 steps)

3. Target Elements
- {list of element types to inspect}

4. Dataflow / Taint Considerations
- {conceptual taint/flow rules to track}

5. Validation & Test Cases
- Positive: {brief}
- Negative: {brief}
- Test harness notes: {brief}

6. Estimated Effort & Priority
{low/medium/high}

7. Likely False-Positive Sources & Mitigations
- {list}

8. Limitations & Assumptions
- {explicit missing info or assumptions}

CONSTRAINTS:
- Do not emit any CodeQL, SQL, pseudocode, or query fragments.
- Keep answers evidence-based and reference which provided field supported each major choice (e.g., “based on [PATCH_DIFF] hunk that adds X”).
- Output must be machine-parseable: keep the exact numbered section headings as above.