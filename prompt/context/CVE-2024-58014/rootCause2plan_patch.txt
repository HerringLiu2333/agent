You are a senior static-analysis engineer and CodeQL design expert.
Task: Based only on the supplied materials, produce a human-readable detection plan (natural-language) for a CodeQL checker that would detect the same class of vulnerability described. DO NOT produce any query code or pseudocode — the output must be purely natural language steps and rationale.

Rules:
1. Only use evidence contained in the sections labeled [PATCH_DESCRIPTION], [PATCH_DIFF], and [ROOTCAUSE_ANALYSIS]. Do not invent facts.
2. The plan must be a step-by-step detection strategy in natural language (numbered steps). No code, no query snippets, no regex, no domain-specific language.
3. Each step must state: objective, signals to look for (AST/semantic patterns expressed conceptually), why it maps to the root cause, and how to reduce false positives.
4. Include a short test/validation strategy (what sample cases to run and expected outcomes).
5. List limitations and assumptions (what is Not determinable from inputs).
6. Keep the plan concise: overall ≤ 12 numbered steps and each step ≤ 2 concise sentences. Use bullets where helpful.
7. If information required to design an accurate checker is missing, state it explicitly under "Limitations & Assumptions".

[META]
CVE_NAME: CVE-2024-58014

[INFO]
[PATCH_DESCRIPTION]
 wifi: brcmsmac: add gain range check to wlc_phy_iqcal_gainparams_nphy()
 [ Upstream commit 3f4a0948c3524ae50f166dbc6572a3296b014e62 ]
 
 In 'wlc_phy_iqcal_gainparams_nphy()', add gain range check to WARN()
 instead of possible out-of-bounds 'tbl_iqcal_gainparams_nphy' access.
 Compile tested only.

 Found by Linux Verification Center (linuxtesting.org) with SVACE.

[PATCH_DIFF]
 diff --git a/drivers/net/wireless/broadcom/brcm80211/brcmsmac/phy/phy_n.c b/drivers/net/wireless/broadcom/brcm80211/brcmsmac/phy/phy_n.c
 index 8580a275478918…42e7bc67e9143e 100644
 --- a/drivers/net/wireless/broadcom/brcm80211/brcmsmac/phy/phy_n.c
 +++ b/drivers/net/wireless/broadcom/brcm80211/brcmsmac/phy/phy_n.c
 @@ -23427,6 +23427,9 @@ wlc_phy_iqcal_gainparams_nphy(struct brcms_phy *pi, u16 core_no,
   break;
 }

 + if (WARN_ON(k == NPHY_IQCAL_NUMGAINS))
 + return;
 +
   params->txgm = tbl_iqcal_gainparams_nphy[band_idx][k][1];
   params->pga = tbl_iqcal_gainparams_nphy[band_idx][k][2];
   params->pad = tbl_iqcal_gainparams_nphy[band_idx][k][3];



[ROOTCAUSE_ANALYSIS]
1. CVE Identifier
CVE-2024-58014

2. Vulnerability Type
Out-of-bounds array access (read) due to missing bounds validation

3. Root Cause Summary
The function wlc_phy_iqcal_gainparams_nphy() computed an index k for a calibration table and then immediately indexed tbl_iqcal_gainparams_nphy[band_idx][k][...] without verifying that k was within the valid range. If k equaled the sentinel/upper bound NPHY_IQCAL_NUMGAINS, the subsequent accesses read past the end of the table. The patch adds a bounds check with WARN_ON and an early return to prevent the out-of-bounds access.

4. Kernel Subsystem Analysis
1) Affected Subsystem:
- Broadcom brcmsmac wireless driver, N-PHY calibration (drivers/net/wireless/broadcom/brcm80211/brcmsmac/phy/phy_n.c).

2) Pre-Patch Flaw:
- After a switch/break determining k, the code used k to index the gain-parameter table:
  - params->txgm = tbl_iqcal_gainparams_nphy[band_idx][k][1];
  - params->pga  = tbl_iqcal_gainparams_nphy[band_idx][k][2];
  - params->pad  = tbl_iqcal_gainparams_nphy[band_idx][k][3];
- There was no check ensuring k < NPHY_IQCAL_NUMGAINS, so k equal to NPHY_IQCAL_NUMGAINS led to an out-of-bounds read.

3) Trigger Condition:
- When the earlier logic leaves k at NPHY_IQCAL_NUMGAINS (likely indicating no valid gain entry found). The exact control-flow conditions that produce this value are not included in the provided diff and are therefore Unknown/Not determinable.

4) Impact Mechanism:
- Out-of-bounds read from tbl_iqcal_gainparams_nphy can fetch memory beyond the table, potentially causing a kernel crash (e.g., page fault/KASAN report) or propagating invalid calibration parameters into subsequent PHY programming, leading to instability. Information disclosure potential is Unknown/Not determinable.

5. Patch Analysis
1) Fix Approach:
- Defensive validation: add a boundary check for k against NPHY_IQCAL_NUMGAINS and abort the operation if violated, logging via WARN_ON.

2) Key Code Changes:
- Inserted immediately before the table dereferences:
  - if (WARN_ON(k == NPHY_IQCAL_NUMGAINS))
    return;
- This prevents indexing tbl_iqcal_gainparams_nphy[band_idx][k][...] when k is out of range.

3) Locking/Concurrency Impact:
- None. The change is purely a local bounds check without altering locking, RCU usage, or ordering.

6. Broader Kernel Security Implications
- Table-driven calibration logic is common in wireless drivers; missing bounds checks on computed indices can lead to similar OOB reads. Proactive validation of indices and sentinel values should be enforced across such code paths. While this instance is a read, such bugs can still cause denial-of-service and complicate debugging; comprehensive static analysis and targeted audits of calibration/lookup tables are advisable.

[REQUEST]
Produce a detection plan for a CodeQL-based static checker that would detect similar pre-patch flaws.
Requirements for the plan:
- High-level detection goal (1–2 lines).
- A numbered list of detection steps (objective, conceptual AST/semantic signals, FP mitigation).
- Types of program elements to target (functions, call sites, allocation sites, condition checks, lock boundaries, function return-value uses, etc.).
- Dataflow/taint patterns to consider (if applicable), described conceptually.
- Minimal test cases to validate the checker (positive/negative examples).
- Estimated effort/priority (low/medium/high) and likely false-positive sources.
- A short "Limitations & Assumptions" block.

OUTPUT FORMAT (produce exactly this structure; no extra text):
1. Plan Summary
{one-line summary}

2. Detection Steps
1) Step 1: {objective — conceptual signals — FP mitigation}
2) Step 2: {objective — conceptual signals — FP mitigation}
...
(narrow to ≤12 steps)

3. Target Elements
- {list of element types to inspect}

4. Dataflow / Taint Considerations
- {conceptual taint/flow rules to track}

5. Validation & Test Cases
- Positive: {brief}
- Negative: {brief}
- Test harness notes: {brief}

6. Estimated Effort & Priority
{low/medium/high}

7. Likely False-Positive Sources & Mitigations
- {list}

8. Limitations & Assumptions
- {explicit missing info or assumptions}

CONSTRAINTS:
- Do not emit any CodeQL, SQL, pseudocode, or query fragments.
- Keep answers evidence-based and reference which provided field supported each major choice (e.g., “based on [PATCH_DIFF] hunk that adds X”).
- Output must be machine-parseable: keep the exact numbered section headings as above.