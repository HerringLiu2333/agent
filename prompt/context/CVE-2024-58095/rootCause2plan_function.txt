You are a senior static-analysis engineer and CodeQL design expert.
Task: Based only on the supplied materials, produce a human-readable detection plan (natural-language) for a CodeQL checker that would detect the same class of vulnerability described. DO NOT produce any query code or pseudocode — the output must be purely natural language steps and rationale.

Rules:
1. Only use evidence contained in the sections labeled [PATCH_DESCRIPTION], [PATCH_DIFF], [FUNCTION_CONTENT], and [ROOTCAUSE_ANALYSIS]. Do not invent facts.
2. The plan must be a step-by-step detection strategy in natural language (numbered steps). No code, no query snippets, no regex, no domain-specific language.
3. Each step must state: objective, signals to look for (AST/semantic patterns expressed conceptually), why it maps to the root cause, and how to reduce false positives.
4. Include a short test/validation strategy (what sample cases to run and expected outcomes).
5. List limitations and assumptions (what is Not determinable from inputs).
6. Keep the plan concise: overall ≤ 12 numbered steps and each step ≤ 2 concise sentences. Use bullets where helpful.
7. If information required to design an accurate checker is missing, state it explicitly under "Limitations & Assumptions".

[META]
CVE_NAME: CVE-2024-58095

[INFO]
[PATCH_DESCRIPTION]
 jfs: add check read-only before txBeginAnon() call
 [ Upstream commit 0176e69743ecc02961f2ae1ea42439cd2bf9ed58 ]
 
 Added a read-only check before calling `txBeginAnon` in `extAlloc`
 and `extRecord`. This prevents modification attempts on a read-only
 mounted filesystem, avoiding potential errors or crashes.
 
 Call trace:
  txBeginAnon+0xac/0x154
  extAlloc+0xe8/0xdec fs/jfs/jfs_extent.c:78
  jfs_get_block+0x340/0xb98 fs/jfs/inode.c:248
  __block_write_begin_int+0x580/0x166c fs/buffer.c:2128
  __block_write_begin fs/buffer.c:2177 [inline]
  block_write_begin+0x98/0x11c fs/buffer.c:2236
  jfs_write_begin+0x44/0x88 fs/jfs/inode.c:299
 
 Fixes: 1da177e4c3f4 ("Linux-2.6.12-rc2")

[PATCH_DIFF]
 diff --git a/fs/jfs/jfs_extent.c b/fs/jfs/jfs_extent.c
 index 63d21822d309be…46529bcc8297ea 100644
 --- a/fs/jfs/jfs_extent.c
 +++ b/fs/jfs/jfs_extent.c
 @@ -74,6 +74,11 @@ extAlloc(struct inode ip, s64 xlen, s64 pno, xad_t * xp, bool abnr)
   int rc;
   int xflag;

 + if (isReadOnly(ip)) {
 + jfs_error(ip->i_sb, “read-only filesystem\n”);
 + return -EIO;
 + }
 +
   / This blocks if we are low on resources /
   txBeginAnon(ip->i_sb);

 @@ -253,6 +258,11 @@ int extRecord(struct inode *ip, xad_t * xp)
   {
   int rc;

 + if (isReadOnly(ip)) {
 + jfs_error(ip->i_sb, “read-only filesystem\n”);
 + return -EIO;
 + }
 +
   txBeginAnon(ip->i_sb);

   mutex_lock(&JFS_IP(ip)->commit_mutex);

[FUNCTION_CONTENT]
int
extAlloc(struct inode *ip, s64 xlen, s64 pno, xad_t * xp, bool abnr)
{
	struct jfs_sb_info *sbi = JFS_SBI(ip->i_sb);
	s64 nxlen, nxaddr, xoff, hint, xaddr = 0;
	int rc;
	int xflag;

	/* This blocks if we are low on resources */
	txBeginAnon(ip->i_sb);

	/* Avoid race with jfs_commit_inode() */
	mutex_lock(&JFS_IP(ip)->commit_mutex);

	/* validate extent length */
	if (xlen > MAXXLEN)
		xlen = MAXXLEN;

	/* get the page's starting extent offset */
	xoff = pno << sbi->l2nbperpage;

	/* check if an allocation hint was provided */
	if ((hint = addressXAD(xp))) {
		/* get the size of the extent described by the hint */
		nxlen = lengthXAD(xp);

		/* check if the hint is for the portion of the file
		 * immediately previous to the current allocation
		 * request and if hint extent has the same abnr
		 * value as the current request.  if so, we can
		 * extend the hint extent to include the current
		 * extent if we can allocate the blocks immediately
		 * following the hint extent.
		 */
		if (offsetXAD(xp) + nxlen == xoff &&
		    abnr == ((xp->flag & XAD_NOTRECORDED) ? true : false))
			xaddr = hint + nxlen;

		/* adjust the hint to the last block of the extent */
		hint += (nxlen - 1);
	}

	/* allocate the disk blocks for the extent.  initially, extBalloc()
	 * will try to allocate disk blocks for the requested size (xlen).
	 * if this fails (xlen contiguous free blocks not available), it'll
	 * try to allocate a smaller number of blocks (producing a smaller
	 * extent), with this smaller number of blocks consisting of the
	 * requested number of blocks rounded down to the next smaller
	 * power of 2 number (i.e. 16 -> 8).  it'll continue to round down
	 * and retry the allocation until the number of blocks to allocate
	 * is smaller than the number of blocks per page.
	 */
	nxlen = xlen;
	if ((rc = extBalloc(ip, hint ? hint : INOHINT(ip), &nxlen, &nxaddr))) {
		mutex_unlock(&JFS_IP(ip)->commit_mutex);
		return (rc);
	}

	/* Allocate blocks to quota. */
	rc = dquot_alloc_block(ip, nxlen);
	if (rc) {
		dbFree(ip, nxaddr, (s64) nxlen);
		mutex_unlock(&JFS_IP(ip)->commit_mutex);
		return rc;
	}

	/* determine the value of the extent flag */
	xflag = abnr ? XAD_NOTRECORDED : 0;

	/* if we can extend the hint extent to cover the current request,
	 * extend it.  otherwise, insert a new extent to
	 * cover the current request.
	 */
	if (xaddr && xaddr == nxaddr)
		rc = xtExtend(0, ip, xoff, (int) nxlen, 0);
	else
		rc = xtInsert(0, ip, xflag, xoff, (int) nxlen, &nxaddr, 0);

	/* if the extend or insert failed,
	 * free the newly allocated blocks and return the error.
	 */
	if (rc) {
		dbFree(ip, nxaddr, nxlen);
		dquot_free_block(ip, nxlen);
		mutex_unlock(&JFS_IP(ip)->commit_mutex);
		return (rc);
	}

	/* set the results of the extent allocation */
	XADaddress(xp, nxaddr);
	XADlength(xp, nxlen);
	XADoffset(xp, xoff);
	xp->flag = xflag;

	mark_inode_dirty(ip);

	mutex_unlock(&JFS_IP(ip)->commit_mutex);
	/*
	 * COMMIT_SyncList flags an anonymous tlock on page that is on
	 * sync list.
	 * We need to commit the inode to get the page written to the disk.
	 */
	if (test_and_clear_cflag(COMMIT_Synclist,ip))
		jfs_commit_inode(ip, 0);

	return (0);
}

/* ----- separator ----- */

int extRecord(struct inode *ip, xad_t * xp)
{
	int rc;

	txBeginAnon(ip->i_sb);

	mutex_lock(&JFS_IP(ip)->commit_mutex);

	/* update the extent */
	rc = xtUpdate(0, ip, xp);

	mutex_unlock(&JFS_IP(ip)->commit_mutex);
	return rc;
}



[ROOTCAUSE_ANALYSIS]
1. CVE Identifier
CVE-2024-58095

2. Vulnerability Type
Missing state validation / improper enforcement of read-only mount semantics leading to denial of service (kernel crash)

3. Root Cause Summary
The JFS extent routines extAlloc and extRecord unconditionally initiated a transaction via txBeginAnon without verifying that the filesystem was mounted writable. On a read-only mount, attempting to begin a transaction and perform extent allocation/update violates mount flags and can drive journaling/extent code into error paths, resulting in kernel errors or crashes. The patch adds a read-only check (isReadOnly(ip)) and early return to prevent entering txBeginAnon and subsequent modification logic when the superblock is read-only.

4. Kernel Subsystem Analysis
1) Affected Subsystem:
JFS filesystem extent management and journaling transaction initiation (fs/jfs/jfs_extent.c: extAlloc, extRecord)

2) Pre-Patch Flaw:
Both extAlloc and extRecord called txBeginAnon(ip->i_sb) at function entry with no guard against read-only mounts. Example (pre-patch): "txBeginAnon(ip->i_sb);" appears at the start of extAlloc and extRecord, enabling write-related operations regardless of mount state.

3) Trigger Condition:
Any write path that reaches JFS extent allocation or recording on a read-only mounted JFS filesystem. The provided call trace shows extAlloc invoked via jfs_get_block and jfs_write_begin during a write to a file on a read-only mount.

4) Impact Mechanism:
Starting an anonymous transaction and attempting extent allocation/update on a read-only superblock can cause internal journaling/metadata operations to access or modify structures that are not writable, leading to errors or kernel crashes. This manifests as a denial of service when user-space triggers write operations on a read-only JFS mount.

5. Patch Analysis
1) Fix Approach:
Defensive gating: add an explicit read-only check before any transaction initiation or extent mutation in extAlloc and extRecord, returning an error to prevent modification attempts on read-only mounts.

2) Key Code Changes:
- In extAlloc: inserted "if (isReadOnly(ip)) { jfs_error(ip->i_sb, 'read-only filesystem'); return -EIO; }" prior to txBeginAnon.
- In extRecord: inserted the same read-only check and early return before txBeginAnon.
These changes ensure txBeginAnon and subsequent extent/journal operations are not executed when ip->i_sb is read-only.

3) Locking/Concurrency Impact:
No changes to locking primitives or ordering; the commit_mutex is no longer acquired in read-only scenarios due to the early return, which reduces unnecessary lock operations. The primary effect is preventing transaction start and lock acquisition on an invalid (read-only) state, thereby avoiding potential error paths and crashes.

6. Broader Kernel Security Implications
Enforcing read-only mount semantics at low-level filesystem mutation points is critical to prevent privilege escalation via unintended metadata changes and to avoid denial of service from journal/metadata inconsistencies. This patch strengthens JFS’s adherence to VFS mount flags and reduces the attack surface where user-space write attempts on read-only filesystems could destabilize the kernel. Similar checks should be audited across other JFS mutation paths to ensure comprehensive protection against RO violations.

[REQUEST]
Produce a detection plan for a CodeQL-based static checker that would detect similar pre-patch flaws.
Requirements for the plan:
- High-level detection goal (1–2 lines).
- A numbered list of detection steps (objective, conceptual AST/semantic signals, FP mitigation).
- Types of program elements to target (functions, call sites, allocation sites, condition checks, lock boundaries, function return-value uses, etc.).
- Dataflow/taint patterns to consider (if applicable), described conceptually.
- Minimal test cases to validate the checker (positive/negative examples).
- Estimated effort/priority (low/medium/high) and likely false-positive sources.
- A short "Limitations & Assumptions" block.

OUTPUT FORMAT (produce exactly this structure; no extra text):
1. Plan Summary
{one-line summary}

2. Detection Steps
1) Step 1: {objective — conceptual signals — FP mitigation}
2) Step 2: {objective — conceptual signals — FP mitigation}
...
(narrow to ≤12 steps)

3. Target Elements
- {list of element types to inspect}

4. Dataflow / Taint Considerations
- {conceptual taint/flow rules to track}

5. Validation & Test Cases
- Positive: {brief}
- Negative: {brief}
- Test harness notes: {brief}

6. Estimated Effort & Priority
{low/medium/high}

7. Likely False-Positive Sources & Mitigations
- {list}

8. Limitations & Assumptions
- {explicit missing info or assumptions}

CONSTRAINTS:
- Do not emit any CodeQL, SQL, pseudocode, or query fragments.
- Keep answers evidence-based and reference which provided field supported each major choice (e.g., “based on [PATCH_DIFF] hunk that adds X”).
- Output must be machine-parseable: keep the exact numbered section headings as above.