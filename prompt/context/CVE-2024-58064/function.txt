static void test_cfg80211_parse_colocated_ap(struct kunit *test)
{
	const struct cfg80211_parse_colocated_ap_case *params = test->param_value;
	struct sk_buff *input = kunit_zalloc_skb(test, 1024, GFP_KERNEL);
	struct cfg80211_bss_ies *ies;
	struct ieee80211_neighbor_ap_info info;
	LIST_HEAD(coloc_ap_list);
	int count;

	KUNIT_ASSERT_NOT_NULL(test, input);

	info = params->info;

	/* Reasonable values for a colocated AP */
	if (!info.tbtt_info_len)
		info.tbtt_info_len = sizeof(params->tbtt_long);
	if (!info.op_class)
		info.op_class = 131;
	if (!info.channel)
		info.channel = 33;
	/* Zero is the correct default for .btt_info_hdr (one entry, TBTT type) */

	skb_put_u8(input, WLAN_EID_SSID);
	skb_put_u8(input, 4);
	skb_put_data(input, "TEST", 4);

	skb_put_u8(input, WLAN_EID_REDUCED_NEIGHBOR_REPORT);
	skb_put_u8(input, sizeof(info) + info.tbtt_info_len + (params->add_junk ? 3 : 0));
	skb_put_data(input, &info, sizeof(info));
	skb_put_data(input, &params->tbtt_long, info.tbtt_info_len);

	if (params->add_junk)
		skb_put_data(input, "123", 3);

	ies = kunit_kzalloc(test, struct_size(ies, data, input->len), GFP_KERNEL);
	ies->len = input->len;
	memcpy(ies->data, input->data, input->len);

	count = cfg80211_parse_colocated_ap(ies, &coloc_ap_list);

	KUNIT_EXPECT_EQ(test, count, params->valid);
	KUNIT_EXPECT_EQ(test, list_count_nodes(&coloc_ap_list), params->valid);

	if (params->valid && !list_empty(&coloc_ap_list)) {
		struct cfg80211_colocated_ap *ap;

		ap = list_first_entry(&coloc_ap_list, typeof(*ap), list);
		if (info.tbtt_info_len <= sizeof(params->tbtt_short))
			KUNIT_EXPECT_MEMEQ(test, ap->bssid, params->tbtt_short.bssid, ETH_ALEN);
		else
			KUNIT_EXPECT_MEMEQ(test, ap->bssid, params->tbtt_long.bssid, ETH_ALEN);

		if (params->same_ssid) {
			KUNIT_EXPECT_EQ(test, ap->ssid_len, 4);
			KUNIT_EXPECT_MEMEQ(test, ap->ssid, "TEST", 4);
		} else {
			KUNIT_EXPECT_EQ(test, ap->ssid_len, 0);
		}
	}

	cfg80211_free_coloc_ap_list(&coloc_ap_list);
}

/* ----- separator ----- */

KUNIT_ARRAY_PARAM_DESC(cfg80211_parse_colocated_ap, cfg80211_parse_colocated_ap_cases, desc)

static void test_cfg80211_parse_colocated_ap(struct kunit *test)
{
	const struct cfg80211_parse_colocated_ap_case *params = test->param_value;
	struct sk_buff *input = kunit_zalloc_skb(test, 1024, GFP_KERNEL);
	struct cfg80211_bss_ies *ies;
	struct ieee80211_neighbor_ap_info info;
	LIST_HEAD(coloc_ap_list);
	int count;

	KUNIT_ASSERT_NOT_NULL(test, input);

	info = params->info;

	/* Reasonable values for a colocated AP */
	if (!info.tbtt_info_len)
		info.tbtt_info_len = sizeof(params->tbtt_long);
	if (!info.op_class)
		info.op_class = 131;
	if (!info.channel)
		info.channel = 33;
	/* Zero is the correct default for .btt_info_hdr (one entry, TBTT type) */

	skb_put_u8(input, WLAN_EID_SSID);
	skb_put_u8(input, 4);
	skb_put_data(input, "TEST", 4);

	skb_put_u8(input, WLAN_EID_REDUCED_NEIGHBOR_REPORT);
	skb_put_u8(input, sizeof(info) + info.tbtt_info_len + (params->add_junk ? 3 : 0));
	skb_put_data(input, &info, sizeof(info));
	skb_put_data(input, &params->tbtt_long, info.tbtt_info_len);

	if (params->add_junk)
		skb_put_data(input, "123", 3);

	ies = kunit_kzalloc(test, struct_size(ies, data, input->len), GFP_KERNEL);
	ies->len = input->len;
	memcpy(ies->data, input->data, input->len);

	count = cfg80211_parse_colocated_ap(ies, &coloc_ap_list);

	KUNIT_EXPECT_EQ(test, count, params->valid);
	KUNIT_EXPECT_EQ(test, list_count_nodes(&coloc_ap_list), params->valid);

	if (params->valid && !list_empty(&coloc_ap_list)) {
		struct cfg80211_colocated_ap *ap;

		ap = list_first_entry(&coloc_ap_list, typeof(*ap), list);
		if (info.tbtt_info_len <= sizeof(params->tbtt_short))
			KUNIT_EXPECT_MEMEQ(test, ap->bssid, params->tbtt_short.bssid, ETH_ALEN);
		else
			KUNIT_EXPECT_MEMEQ(test, ap->bssid, params->tbtt_long.bssid, ETH_ALEN);

		if (params->same_ssid) {
			KUNIT_EXPECT_EQ(test, ap->ssid_len, 4);
			KUNIT_EXPECT_MEMEQ(test, ap->ssid, "TEST", 4);
		} else {
			KUNIT_EXPECT_EQ(test, ap->ssid_len, 0);
		}
	}

	cfg80211_free_coloc_ap_list(&coloc_ap_list);
}

/* ----- separator ----- */

	LIST_HEAD(coloc_ap_list);
	int count;

	KUNIT_ASSERT_NOT_NULL(test, input);

	info = params->info;

	/* Reasonable values for a colocated AP */
	if (!info.tbtt_info_len)
		info.tbtt_info_len = sizeof(params->tbtt_long);
	if (!info.op_class)
		info.op_class = 131;
	if (!info.channel)
		info.channel = 33;
	/* Zero is the correct default for .btt_info_hdr (one entry, TBTT type) */

	skb_put_u8(input, WLAN_EID_SSID);
	skb_put_u8(input, 4);
	skb_put_data(input, "TEST", 4);

	skb_put_u8(input, WLAN_EID_REDUCED_NEIGHBOR_REPORT);
	skb_put_u8(input, sizeof(info) + info.tbtt_info_len + (params->add_junk ? 3 : 0));
	skb_put_data(input, &info, sizeof(info));
	skb_put_data(input, &params->tbtt_long, info.tbtt_info_len);

	if (params->add_junk)
		skb_put_data(input, "123", 3);

	ies = kunit_kzalloc(test, struct_size(ies, data, input->len), GFP_KERNEL);
	ies->len = input->len;
	memcpy(ies->data, input->data, input->len);

	count = cfg80211_parse_colocated_ap(ies, &coloc_ap_list);

	KUNIT_EXPECT_EQ(test, count, params->valid);
	KUNIT_EXPECT_EQ(test, list_count_nodes(&coloc_ap_list), params->valid);

	if (params->valid && !list_empty(&coloc_ap_list)) {
		struct cfg80211_colocated_ap *ap;

		ap = list_first_entry(&coloc_ap_list, typeof(*ap), list);
		if (info.tbtt_info_len <= sizeof(params->tbtt_short))
			KUNIT_EXPECT_MEMEQ(test, ap->bssid, params->tbtt_short.bssid, ETH_ALEN);
		else
			KUNIT_EXPECT_MEMEQ(test, ap->bssid, params->tbtt_long.bssid, ETH_ALEN);

		if (params->same_ssid) {
			KUNIT_EXPECT_EQ(test, ap->ssid_len, 4);
			KUNIT_EXPECT_MEMEQ(test, ap->ssid, "TEST", 4);
		} else {
			KUNIT_EXPECT_EQ(test, ap->ssid_len, 0);
		}
	}

/* ----- separator ----- */


	KUNIT_ASSERT_NOT_NULL(test, input);

	info = params->info;

	/* Reasonable values for a colocated AP */
	if (!info.tbtt_info_len)
		info.tbtt_info_len = sizeof(params->tbtt_long);
	if (!info.op_class)
		info.op_class = 131;
	if (!info.channel)
		info.channel = 33;
	/* Zero is the correct default for .btt_info_hdr (one entry, TBTT type) */

	skb_put_u8(input, WLAN_EID_SSID);
	skb_put_u8(input, 4);
	skb_put_data(input, "TEST", 4);

	skb_put_u8(input, WLAN_EID_REDUCED_NEIGHBOR_REPORT);
	skb_put_u8(input, sizeof(info) + info.tbtt_info_len + (params->add_junk ? 3 : 0));
	skb_put_data(input, &info, sizeof(info));
	skb_put_data(input, &params->tbtt_long, info.tbtt_info_len);

	if (params->add_junk)
		skb_put_data(input, "123", 3);

	ies = kunit_kzalloc(test, struct_size(ies, data, input->len), GFP_KERNEL);
	ies->len = input->len;
	memcpy(ies->data, input->data, input->len);

	count = cfg80211_parse_colocated_ap(ies, &coloc_ap_list);

	KUNIT_EXPECT_EQ(test, count, params->valid);
	KUNIT_EXPECT_EQ(test, list_count_nodes(&coloc_ap_list), params->valid);

	if (params->valid && !list_empty(&coloc_ap_list)) {
		struct cfg80211_colocated_ap *ap;

		ap = list_first_entry(&coloc_ap_list, typeof(*ap), list);
		if (info.tbtt_info_len <= sizeof(params->tbtt_short))
			KUNIT_EXPECT_MEMEQ(test, ap->bssid, params->tbtt_short.bssid, ETH_ALEN);
		else
			KUNIT_EXPECT_MEMEQ(test, ap->bssid, params->tbtt_long.bssid, ETH_ALEN);

		if (params->same_ssid) {
			KUNIT_EXPECT_EQ(test, ap->ssid_len, 4);
			KUNIT_EXPECT_MEMEQ(test, ap->ssid, "TEST", 4);
		} else {
			KUNIT_EXPECT_EQ(test, ap->ssid_len, 0);
		}
	}