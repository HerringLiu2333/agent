You are a senior static-analysis engineer and CodeQL design expert.
Task: Based only on the supplied materials, produce a human-readable detection plan (natural-language) for a CodeQL checker that would detect the same class of vulnerability described. DO NOT produce any query code or pseudocode — the output must be purely natural language steps and rationale.

Rules:
1. Only use evidence contained in the sections labeled [PATCH_DESCRIPTION], [PATCH_DIFF], and [ROOTCAUSE_ANALYSIS]. Do not invent facts.
2. The plan must be a step-by-step detection strategy in natural language (numbered steps). No code, no query snippets, no regex, no domain-specific language.
3. Each step must state: objective, signals to look for (AST/semantic patterns expressed conceptually), why it maps to the root cause, and how to reduce false positives.
4. Include a short test/validation strategy (what sample cases to run and expected outcomes).
5. List limitations and assumptions (what is Not determinable from inputs).
6. Keep the plan concise: overall ≤ 12 numbered steps and each step ≤ 2 concise sentences. Use bullets where helpful.
7. If information required to design an accurate checker is missing, state it explicitly under "Limitations & Assumptions".

[META]
CVE_NAME: CVE-2024-57983

[INFO]
[PATCH_DESCRIPTION]
 mailbox: th1520: Fix memory corruption due to incorrect array size
 The functions th1520_mbox_suspend_noirq and th1520_mbox_resume_noirq are
 intended to save and restore the interrupt mask registers in the MBOX
 ICU0. However, the array used to store these registers was incorrectly
 sized, leading to memory corruption when accessing all four registers.

 This commit corrects the array size to accommodate all four interrupt
 mask registers, preventing memory corruption during suspend and resume
 operations.

 Fixes: 5d4d263e1c6b ("mailbox: Introduce support for T-head TH1520 Mailbox driver")

[PATCH_DIFF]
    diff --git a/drivers/mailbox/mailbox-th1520.c b/drivers/mailbox/mailbox-th1520.c
    index e16e7c85ee3cd5..a6b2aa9ae95206 100644
    --- a/drivers/mailbox/mailbox-th1520.c
    +++ b/drivers/mailbox/mailbox-th1520.c
    @@ -41,7 +41,7 @@
     #ifdef CONFIG_PM_SLEEP
     /* store MBOX context across system-wide suspend/resume transitions /
     struct th1520_mbox_context {
    -	u32 intr_mask[TH_1520_MBOX_CHANS - 1];
    +	u32 intr_mask[TH_1520_MBOX_CHANS];
     };
     #endif



[ROOTCAUSE_ANALYSIS]
1. CVE Identifier
CVE-2024-57983

2. Vulnerability Type
Out-of-bounds array access (off-by-one) leading to kernel memory corruption during suspend/resume state save/restore.

3. Root Cause Summary
The context buffer used to save/restore interrupt mask registers in the TH1520 mailbox driver was sized one element too small: intr_mask[TH_1520_MBOX_CHANS - 1]. The suspend/resume code accesses all four MBOX ICU0 interrupt mask registers, resulting in a write/read one u32 past the end of the array. This off-by-one buffer overrun corrupts adjacent kernel memory.

4. Kernel Subsystem Analysis
1) Affected Subsystem:
- Mailbox subsystem, TH1520 mailbox driver (drivers/mailbox/mailbox-th1520.c).

2) Pre-Patch Flaw:
- In struct th1520_mbox_context, the array was declared as u32 intr_mask[TH_1520_MBOX_CHANS - 1];.
- The power management paths th1520_mbox_suspend_noirq and th1520_mbox_resume_noirq save/restore all four MBOX ICU0 interrupt mask registers, exceeding the allocated array bounds by one element.

3) Trigger Condition:
- System-wide suspend or resume with CONFIG_PM_SLEEP enabled, when th1520_mbox_suspend_noirq/th1520_mbox_resume_noirq iterate over all four interrupt mask registers.
- Access to the fourth register causes an out-of-bounds write/read into memory adjacent to intr_mask.

4) Impact Mechanism:
- One u32 is written beyond the end of the intr_mask array during suspend, and possibly read during resume, corrupting neighboring kernel memory.
- This can lead to crashes, undefined behavior, or potentially exploitable memory corruption depending on adjacent data layout (exact exploitability is Unknown/Not determinable).

5. Patch Analysis
1) Fix Approach:
- Correct the array dimension to match the number of interrupt mask registers being saved/restored, eliminating the off-by-one overflow.

2) Key Code Changes:
- In drivers/mailbox/mailbox-th1520.c, within #ifdef CONFIG_PM_SLEEP:
  - Changed: u32 intr_mask[TH_1520_MBOX_CHANS - 1];
  - To:     u32 intr_mask[TH_1520_MBOX_CHANS];
- This aligns storage capacity with the actual usage in th1520_mbox_suspend_noirq/th1520_mbox_resume_noirq (as described in the patch description).

3) Locking/Concurrency Impact:
- No locking or ordering semantics were modified. The change is purely a buffer size correction in the suspend noirq path; concurrency behavior remains unchanged.

6. Broader Kernel Security Implications
- Off-by-one buffer overruns in kernel drivers can corrupt internal state and potentially be leveraged for privilege escalation, particularly if attacker-influenced values are saved/restored (here, exploitability is Unknown/Not determinable). 
- The bug activates in a global suspend/resume path, risking system instability and data corruption during power transitions.
- This fix underscores the need for careful alignment between data structure sizing and hardware register enumeration in PM context state saving to avoid subtle memory safety violations.

[REQUEST]
Produce a detection plan for a CodeQL-based static checker that would detect similar pre-patch flaws.
Requirements for the plan:
- High-level detection goal (1–2 lines).
- A numbered list of detection steps (objective, conceptual AST/semantic signals, FP mitigation).
- Types of program elements to target (functions, call sites, allocation sites, condition checks, lock boundaries, function return-value uses, etc.).
- Dataflow/taint patterns to consider (if applicable), described conceptually.
- Minimal test cases to validate the checker (positive/negative examples).
- Estimated effort/priority (low/medium/high) and likely false-positive sources.
- A short "Limitations & Assumptions" block.

OUTPUT FORMAT (produce exactly this structure; no extra text):
1. Plan Summary
{one-line summary}

2. Detection Steps
1) Step 1: {objective — conceptual signals — FP mitigation}
2) Step 2: {objective — conceptual signals — FP mitigation}
...
(narrow to ≤12 steps)

3. Target Elements
- {list of element types to inspect}

4. Dataflow / Taint Considerations
- {conceptual taint/flow rules to track}

5. Validation & Test Cases
- Positive: {brief}
- Negative: {brief}
- Test harness notes: {brief}

6. Estimated Effort & Priority
{low/medium/high}

7. Likely False-Positive Sources & Mitigations
- {list}

8. Limitations & Assumptions
- {explicit missing info or assumptions}

CONSTRAINTS:
- Do not emit any CodeQL, SQL, pseudocode, or query fragments.
- Keep answers evidence-based and reference which provided field supported each major choice (e.g., “based on [PATCH_DIFF] hunk that adds X”).
- Output must be machine-parseable: keep the exact numbered section headings as above.