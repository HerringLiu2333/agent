You are a senior static-analysis engineer and CodeQL design expert.
Task: Based only on the supplied materials, produce a human-readable detection plan (natural-language) for a CodeQL checker that would detect the same class of vulnerability described. DO NOT produce any query code or pseudocode — the output must be purely natural language steps and rationale.

Rules:
1. Only use evidence contained in the sections labeled [PATCH_DESCRIPTION], [PATCH_DIFF], [FUNCTION_CONTENT], and [ROOTCAUSE_ANALYSIS]. Do not invent facts.
2. The plan must be a step-by-step detection strategy in natural language (numbered steps). No code, no query snippets, no regex, no domain-specific language.
3. Each step must state: objective, signals to look for (AST/semantic patterns expressed conceptually), why it maps to the root cause, and how to reduce false positives.
4. Include a short test/validation strategy (what sample cases to run and expected outcomes).
5. List limitations and assumptions (what is Not determinable from inputs).
6. Keep the plan concise: overall ≤ 12 numbered steps and each step ≤ 2 concise sentences. Use bullets where helpful.
7. If information required to design an accurate checker is missing, state it explicitly under "Limitations & Assumptions".

[META]
CVE_NAME: CVE-2024-57983

[INFO]
[PATCH_DESCRIPTION]
 mailbox: th1520: Fix memory corruption due to incorrect array size
 The functions th1520_mbox_suspend_noirq and th1520_mbox_resume_noirq are
 intended to save and restore the interrupt mask registers in the MBOX
 ICU0. However, the array used to store these registers was incorrectly
 sized, leading to memory corruption when accessing all four registers.

 This commit corrects the array size to accommodate all four interrupt
 mask registers, preventing memory corruption during suspend and resume
 operations.

 Fixes: 5d4d263e1c6b ("mailbox: Introduce support for T-head TH1520 Mailbox driver")

[PATCH_DIFF]
    diff --git a/drivers/mailbox/mailbox-th1520.c b/drivers/mailbox/mailbox-th1520.c
    index e16e7c85ee3cd5..a6b2aa9ae95206 100644
    --- a/drivers/mailbox/mailbox-th1520.c
    +++ b/drivers/mailbox/mailbox-th1520.c
    @@ -41,7 +41,7 @@
     #ifdef CONFIG_PM_SLEEP
     /* store MBOX context across system-wide suspend/resume transitions /
     struct th1520_mbox_context {
    -	u32 intr_mask[TH_1520_MBOX_CHANS - 1];
    +	u32 intr_mask[TH_1520_MBOX_CHANS];
     };
     #endif

[FUNCTION_CONTENT]




[ROOTCAUSE_ANALYSIS]
1. CVE Identifier
CVE-2024-57983

2. Vulnerability Type
Out-of-bounds write/read (buffer overflow) due to incorrect array size

3. Root Cause Summary
The driver’s suspend/resume context buffer was undersized by one element: struct th1520_mbox_context declared intr_mask[TH_1520_MBOX_CHANS - 1] while the code in th1520_mbox_suspend_noirq and th1520_mbox_resume_noirq saves/restores all TH_1520_MBOX_CHANS interrupt mask registers. This off-by-one sizing mismatch caused the last register access to go past the end of the array, corrupting adjacent memory.

4. Kernel Subsystem Analysis
1) Affected Subsystem:
Mailbox driver for T-head TH1520 (drivers/mailbox/mailbox-th1520.c), power-management suspend/resume context under CONFIG_PM_SLEEP.

2) Pre-Patch Flaw:
An array in the PM context struct was defined one element too small relative to the actual number of mask registers handled. Evidence: in mailbox-th1520.c, under CONFIG_PM_SLEEP, “u32 intr_mask[TH_1520_MBOX_CHANS - 1];” is used to store ICU0 interrupt mask registers, but the functions operate on all TH_1520_MBOX_CHANS (four) registers.

3) Trigger Condition:
During system-wide suspend/resume (noirq) when th1520_mbox_suspend_noirq saves and th1520_mbox_resume_noirq restores the interrupt mask registers for MBOX ICU0 with CONFIG_PM_SLEEP enabled.

4) Impact Mechanism:
Saving/restoring four registers into a three-element array results in an out-of-bounds write on suspend and a corresponding out-of-bounds read on resume, corrupting adjacent kernel memory within the driver’s context and potentially leading to crashes or undefined behavior.

5. Patch Analysis
1) Fix Approach:
Correct the buffer sizing to match the number of registers accessed, eliminating the off-by-one and preventing out-of-bounds accesses.

2) Key Code Changes:
In struct th1520_mbox_context, intr_mask size changed from “[TH_1520_MBOX_CHANS - 1]” to “[TH_1520_MBOX_CHANS]” (mailbox-th1520.c, around line 41 in the diff hunk).

3) Locking/Concurrency Impact:
No locking or ordering changes; the fix solely adjusts memory bounds and does not affect concurrency or synchronization.

6. Broader Kernel Security Implications
Off-by-one array sizing errors in low-level suspend/resume paths can silently corrupt kernel memory, risking system instability or denial of service during PM transitions. While exploitation specifics are hardware and layout-dependent, such memory corruption can, in principle, facilitate further exploitation if critical control data is overwritten. Ensuring buffer sizes align precisely with loop bounds and hardware register counts is essential for robust kernel driver security, particularly in PM contexts where diagnostics and recovery are limited.

[REQUEST]
Produce a detection plan for a CodeQL-based static checker that would detect similar pre-patch flaws.
Requirements for the plan:
- High-level detection goal (1–2 lines).
- A numbered list of detection steps (objective, conceptual AST/semantic signals, FP mitigation).
- Types of program elements to target (functions, call sites, allocation sites, condition checks, lock boundaries, function return-value uses, etc.).
- Dataflow/taint patterns to consider (if applicable), described conceptually.
- Minimal test cases to validate the checker (positive/negative examples).
- Estimated effort/priority (low/medium/high) and likely false-positive sources.
- A short "Limitations & Assumptions" block.

OUTPUT FORMAT (produce exactly this structure; no extra text):
1. Plan Summary
{one-line summary}

2. Detection Steps
1) Step 1: {objective — conceptual signals — FP mitigation}
2) Step 2: {objective — conceptual signals — FP mitigation}
...
(narrow to ≤12 steps)

3. Target Elements
- {list of element types to inspect}

4. Dataflow / Taint Considerations
- {conceptual taint/flow rules to track}

5. Validation & Test Cases
- Positive: {brief}
- Negative: {brief}
- Test harness notes: {brief}

6. Estimated Effort & Priority
{low/medium/high}

7. Likely False-Positive Sources & Mitigations
- {list}

8. Limitations & Assumptions
- {explicit missing info or assumptions}

CONSTRAINTS:
- Do not emit any CodeQL, SQL, pseudocode, or query fragments.
- Keep answers evidence-based and reference which provided field supported each major choice (e.g., “based on [PATCH_DIFF] hunk that adds X”).
- Output must be machine-parseable: keep the exact numbered section headings as above.