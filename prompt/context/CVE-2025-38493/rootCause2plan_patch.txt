You are a senior static-analysis engineer and CodeQL design expert.
Task: Based only on the supplied materials, produce a human-readable detection plan (natural-language) for a CodeQL checker that would detect the same class of vulnerability described. DO NOT produce any query code or pseudocode — the output must be purely natural language steps and rationale.

Rules:
1. Only use evidence contained in the sections labeled [PATCH_DESCRIPTION], [PATCH_DIFF], and [ROOTCAUSE_ANALYSIS]. Do not invent facts.
2. The plan must be a step-by-step detection strategy in natural language (numbered steps). No code, no query snippets, no regex, no domain-specific language.
3. Each step must state: objective, signals to look for (AST/semantic patterns expressed conceptually), why it maps to the root cause, and how to reduce false positives.
4. Include a short test/validation strategy (what sample cases to run and expected outcomes).
5. List limitations and assumptions (what is Not determinable from inputs).
6. Keep the plan concise: overall ≤ 12 numbered steps and each step ≤ 2 concise sentences. Use bullets where helpful.
7. If information required to design an accurate checker is missing, state it explicitly under "Limitations & Assumptions".

[META]
CVE_NAME: CVE-2025-38493

[INFO]
[PATCH_DESCRIPTION]
    tracing/osnoise: Fix crash in timerlat_dump_stack()
    We have observed kernel panics when using timerlat with stack saving,
    with the following dmesg output:
    
    memcpy: detected buffer overflow: 88 byte write of buffer size 0
    WARNING: CPU: 2 PID: 8153 at lib/string_helpers.c:1032 __fortify_report+0x55/0xa0
    CPU: 2 UID: 0 PID: 8153 Comm: timerlatu/2 Kdump: loaded Not tainted 6.15.3-200.fc42.x86_64 #1 PREEMPT(lazy)
    Call Trace:
     <TASK>
     ? trace_buffer_lock_reserve+0x2a/0x60
     __fortify_panic+0xd/0xf
     __timerlat_dump_stack.cold+0xd/0xd
     timerlat_dump_stack.part.0+0x47/0x80
     timerlat_fd_read+0x36d/0x390
     vfs_read+0xe2/0x390
     ? syscall_exit_to_user_mode+0x1d5/0x210
     ksys_read+0x73/0xe0
     do_syscall_64+0x7b/0x160
     ? exc_page_fault+0x7e/0x1a0
     entry_SYSCALL_64_after_hwframe+0x76/0x7e
    
    __timerlat_dump_stack() constructs the ftrace stack entry like this:
    
    struct stack_entry *entry;
    ...
    memcpy(&entry->caller, fstack->calls, size);
    entry->size = fstack->nr_entries;
    
    Since commit e7186af7fb26 ("tracing: Add back FORTIFY_SOURCE logic to
    kernel_stack event structure"), struct stack_entry marks its caller
    field with __counted_by(size). At the time of the memcpy, entry->size
    contains garbage from the ringbuffer, which under some circumstances is
    zero, triggering a kernel panic by buffer overflow.
    
    Populate the size field before the memcpy so that the out-of-bounds
    check knows the correct size. This is analogous to
    __ftrace_trace_stack().

[PATCH_DIFF]
     @@ -637,8 +637,8 @@ __timerlat_dump_stack(struct trace_buffer *buffer, struct trace_stack *fstack, u
      
      	entry = ring_buffer_event_data(event);
      
     -	memcpy(&entry->caller, fstack->calls, size);
      	entry->size = fstack->nr_entries;
     +	memcpy(&entry->caller, fstack->calls, size);
      
      	trace_buffer_unlock_commit_nostack(buffer, event);
      }



[ROOTCAUSE_ANALYSIS]
1. CVE Identifier
CVE-2025-38493

2. Vulnerability Type
Out-of-bounds write attempt due to use of uninitialized size for a __counted_by-bound field, causing fortified memcpy overflow and kernel panic (Denial of Service)

3. Root Cause Summary
The pre-patch code in __timerlat_dump_stack() copied stack entries into entry->caller before initializing entry->size, even though caller is annotated with __counted_by(size). With FORTIFY_SOURCE, memcpy validates the destination bound using entry->size; since that field contained uninitialized ring-buffer data (often zero), the runtime check detected a write larger than the reported bound and triggered __fortify_report, panicking the kernel. The root cause is incorrect initialization order of the size field relative to the memcpy, introduced after commit e7186af7fb26 added __counted_by(size) to struct stack_entry.

4. Kernel Subsystem Analysis
1) Affected Subsystem:
tracing/osnoise (timerlat stack saving and dumping via ftrace ring buffer)

2) Pre-Patch Flaw:
__timerlat_dump_stack() performed:
- "memcpy(&entry->caller, fstack->calls, size);"
- "entry->size = fstack->nr_entries;"
This writes to a __counted_by(size) field before initializing the count, causing FORTIFY to see an incorrect (garbage/zero) bound.

3) Trigger Condition:
Using timerlat with stack saving enabled when fstack->nr_entries > 0 and the ring buffer event’s entry->size was uninitialized (e.g., zero), leading to a memcpy whose length exceeds the FORTIFY-derived destination bound.

4) Impact Mechanism:
FORTIFY’s destination size checking (string_helpers.c) detects “88 byte write of buffer size 0” and calls __fortify_report/__fortify_panic, resulting in a kernel panic (Denial of Service). Without the check, the logic implies a possible out-of-bounds write into the ring buffer event payload, but the provided evidence confirms the panic rather than silent corruption.

5. Patch Analysis
1) Fix Approach:
Initialize the size field (entry->size = fstack->nr_entries) before performing the memcpy so FORTIFY uses the correct runtime bound for the __counted_by field.

2) Key Code Changes:
A simple reordering in __timerlat_dump_stack():
- Move "entry->size = fstack->nr_entries;" before "memcpy(&entry->caller, fstack->calls, size);"
This mirrors the safe ordering used in __ftrace_trace_stack().

3) Locking/Concurrency Impact:
None. No locks or ordering beyond the memcpy/assignment were changed; the fix addresses initialization order only and does not modify ring buffer locking semantics.

6. Broader Kernel Security Implications
This issue highlights the importance of correctly initializing __counted_by-bound fields before any memory operations that rely on them, especially under FORTIFY_SOURCE. Similar patterns elsewhere in tracing or other subsystems using variable-length event payloads must ensure size fields are set prior to memcpy to avoid false overflow detection or actual out-of-bounds writes. Consistent adherence to initialization-before-use prevents kernel panics and strengthens runtime bounds enforcement.

[REQUEST]
Produce a detection plan for a CodeQL-based static checker that would detect similar pre-patch flaws.
Requirements for the plan:
- High-level detection goal (1–2 lines).
- A numbered list of detection steps (objective, conceptual AST/semantic signals, FP mitigation).
- Types of program elements to target (functions, call sites, allocation sites, condition checks, lock boundaries, function return-value uses, etc.).
- Dataflow/taint patterns to consider (if applicable), described conceptually.
- Minimal test cases to validate the checker (positive/negative examples).
- Estimated effort/priority (low/medium/high) and likely false-positive sources.
- A short "Limitations & Assumptions" block.

OUTPUT FORMAT (produce exactly this structure; no extra text):
1. Plan Summary
{one-line summary}

2. Detection Steps
1) Step 1: {objective — conceptual signals — FP mitigation}
2) Step 2: {objective — conceptual signals — FP mitigation}
...
(narrow to ≤12 steps)

3. Target Elements
- {list of element types to inspect}

4. Dataflow / Taint Considerations
- {conceptual taint/flow rules to track}

5. Validation & Test Cases
- Positive: {brief}
- Negative: {brief}
- Test harness notes: {brief}

6. Estimated Effort & Priority
{low/medium/high}

7. Likely False-Positive Sources & Mitigations
- {list}

8. Limitations & Assumptions
- {explicit missing info or assumptions}

CONSTRAINTS:
- Do not emit any CodeQL, SQL, pseudocode, or query fragments.
- Keep answers evidence-based and reference which provided field supported each major choice (e.g., “based on [PATCH_DIFF] hunk that adds X”).
- Output must be machine-parseable: keep the exact numbered section headings as above.