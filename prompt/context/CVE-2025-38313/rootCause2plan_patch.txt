You are a senior static-analysis engineer and CodeQL design expert.
Task: Based only on the supplied materials, produce a human-readable detection plan (natural-language) for a CodeQL checker that would detect the same class of vulnerability described. DO NOT produce any query code or pseudocode — the output must be purely natural language steps and rationale.

Rules:
1. Only use evidence contained in the sections labeled [PATCH_DESCRIPTION], [PATCH_DIFF], and [ROOTCAUSE_ANALYSIS]. Do not invent facts.
2. The plan must be a step-by-step detection strategy in natural language (numbered steps). No code, no query snippets, no regex, no domain-specific language.
3. Each step must state: objective, signals to look for (AST/semantic patterns expressed conceptually), why it maps to the root cause, and how to reduce false positives.
4. Include a short test/validation strategy (what sample cases to run and expected outcomes).
5. List limitations and assumptions (what is Not determinable from inputs).
6. Keep the plan concise: overall ≤ 12 numbered steps and each step ≤ 2 concise sentences. Use bullets where helpful.
7. If information required to design an accurate checker is missing, state it explicitly under "Limitations & Assumptions".

[META]
CVE_NAME: CVE-2025-38313

[INFO]
[PATCH_DESCRIPTION]
    bus: fsl-mc: fix double-free on mc_dev
    The blamed commit tried to simplify how the deallocations are done but,
    in the process, introduced a double-free on the mc_dev variable.
    
    In case the MC device is a DPRC, a new mc_bus is allocated and the
    mc_dev variable is just a reference to one of its fields. In this
    circumstance, on the error path only the mc_bus should be freed.
    
    This commit introduces back the following checkpatch warning which is a
    false-positive.
    
    WARNING: kfree(NULL) is safe and this check is probably not required
    +       if (mc_bus)
    +               kfree(mc_bus);

[PATCH_DIFF]
    @@ -906,8 +906,10 @@ int fsl_mc_device_add(struct fsl_mc_obj_desc *obj_desc,
     
     error_cleanup_dev:
     	kfree(mc_dev->regions);
    -	kfree(mc_bus);
    -	kfree(mc_dev);
    +	if (mc_bus)
    +		kfree(mc_bus);
    +	else
    +		kfree(mc_dev);
     
     	return error;
     }



[ROOTCAUSE_ANALYSIS]
1. CVE Identifier
CVE-2025-38313

2. Vulnerability Type
Double-free (memory corruption)

3. Root Cause Summary
In fsl_mc_device_add’s error path (label error_cleanup_dev), the pre-patch code unconditionally freed both mc_bus and mc_dev without accounting for the DPRC case where mc_dev is merely a reference to a field within the newly allocated mc_bus. As a result, freeing mc_bus followed by freeing mc_dev caused a double-free of the same underlying allocation. The patch corrects this by making deallocation ownership-aware: if mc_bus was allocated, only mc_bus is freed; otherwise mc_dev is freed.

4. Kernel Subsystem Analysis
1) Affected Subsystem:
Freescale/NXP DPAA2 Management Complex bus (fsl-mc), function fsl_mc_device_add

2) Pre-Patch Flaw:
Unconditional deallocation of both mc_bus and mc_dev in the error_cleanup_dev path, despite mc_dev being an alias into mc_bus for DPRC devices.

3) Trigger Condition:
When adding an MC device that is a DPRC, mc_bus is allocated and mc_dev references a field within mc_bus; an error occurs earlier in fsl_mc_device_add, causing execution of error_cleanup_dev.

4) Impact Mechanism:
Freeing mc_bus and then mc_dev (“kfree(mc_bus); kfree(mc_dev);”) results in double-free of the same memory region, leading to slab metadata corruption and potential kernel crash or memory safety violations.

5. Patch Analysis
1) Fix Approach:
Introduce ownership-aware conditional deallocation to prevent freeing both pointers when they alias the same allocation.

2) Key Code Changes:
In fsl_mc_device_add at error_cleanup_dev:
- Replace
  “kfree(mc_bus);
   kfree(mc_dev);”
  with
  “if (mc_bus)
       kfree(mc_bus);
   else
       kfree(mc_dev);”
- Retain prior “kfree(mc_dev->regions);” before the conditional free.

3) Locking/Concurrency Impact:
No locking or concurrency changes; the fix is limited to error-path memory management and conditional freeing.

6. Broader Kernel Security Implications
Error-path double-frees in bus/device initialization can be triggered by probe failures or malformed device configurations, risking kernel memory corruption. Ensuring correct ownership and alias awareness in cleanup paths strengthens kernel robustness and reduces the attack surface for exploitation via error handling code.

[REQUEST]
Produce a detection plan for a CodeQL-based static checker that would detect similar pre-patch flaws.
Requirements for the plan:
- High-level detection goal (1–2 lines).
- A numbered list of detection steps (objective, conceptual AST/semantic signals, FP mitigation).
- Types of program elements to target (functions, call sites, allocation sites, condition checks, lock boundaries, function return-value uses, etc.).
- Dataflow/taint patterns to consider (if applicable), described conceptually.
- Minimal test cases to validate the checker (positive/negative examples).
- Estimated effort/priority (low/medium/high) and likely false-positive sources.
- A short "Limitations & Assumptions" block.

OUTPUT FORMAT (produce exactly this structure; no extra text):
1. Plan Summary
{one-line summary}

2. Detection Steps
1) Step 1: {objective — conceptual signals — FP mitigation}
2) Step 2: {objective — conceptual signals — FP mitigation}
...
(narrow to ≤12 steps)

3. Target Elements
- {list of element types to inspect}

4. Dataflow / Taint Considerations
- {conceptual taint/flow rules to track}

5. Validation & Test Cases
- Positive: {brief}
- Negative: {brief}
- Test harness notes: {brief}

6. Estimated Effort & Priority
{low/medium/high}

7. Likely False-Positive Sources & Mitigations
- {list}

8. Limitations & Assumptions
- {explicit missing info or assumptions}

CONSTRAINTS:
- Do not emit any CodeQL, SQL, pseudocode, or query fragments.
- Keep answers evidence-based and reference which provided field supported each major choice (e.g., “based on [PATCH_DIFF] hunk that adds X”).
- Output must be machine-parseable: keep the exact numbered section headings as above.