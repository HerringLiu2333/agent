You are a senior static-analysis engineer and CodeQL design expert.
Task: Based only on the supplied materials, produce a human-readable detection plan (natural-language) for a CodeQL checker that would detect the same class of vulnerability described. DO NOT produce any query code or pseudocode — the output must be purely natural language steps and rationale.

Rules:
1. Only use evidence contained in the sections labeled [PATCH_DESCRIPTION], [PATCH_DIFF], and [ROOTCAUSE_ANALYSIS]. Do not invent facts.
2. The plan must be a step-by-step detection strategy in natural language (numbered steps). No code, no query snippets, no regex, no domain-specific language.
3. Each step must state: objective, signals to look for (AST/semantic patterns expressed conceptually), why it maps to the root cause, and how to reduce false positives.
4. Include a short test/validation strategy (what sample cases to run and expected outcomes).
5. List limitations and assumptions (what is Not determinable from inputs).
6. Keep the plan concise: overall ≤ 12 numbered steps and each step ≤ 2 concise sentences. Use bullets where helpful.
7. If information required to design an accurate checker is missing, state it explicitly under "Limitations & Assumptions".

[META]
CVE_NAME: CVE-2024-58065

[INFO]
[PATCH_DESCRIPTION]
 clk: mmp: pxa1908-apbc: Fix NULL vs IS_ERR() check
 The devm_kzalloc() function returns NULL on error, not error pointers.
 Fix the check.
 
 Fixes: 51ce55919273 ("clk: mmp: Add Marvell PXA1908 APBC driver")

[PATCH_DIFF]
    diff --git a/drivers/clk/mmp/clk-pxa1908-apbc.c b/drivers/clk/mmp/clk-pxa1908-apbc.c
    index b93d0846619856..3fd7b5e644f3b6 100644
    --- a/drivers/clk/mmp/clk-pxa1908-apbc.c
    +++ b/drivers/clk/mmp/clk-pxa1908-apbc.c
    @@ -96,8 +96,8 @@ static int pxa1908_apbc_probe(struct platform_device *pdev)
     	struct pxa1908_clk_unit *pxa_unit;
     
     	pxa_unit = devm_kzalloc(&pdev->dev, sizeof(*pxa_unit), GFP_KERNEL);
    -	if (IS_ERR(pxa_unit))
    -		return PTR_ERR(pxa_unit);
    +	if (!pxa_unit)
    +		return -ENOMEM;



[ROOTCAUSE_ANALYSIS]
1. CVE Identifier
CVE-2024-58065

2. Vulnerability Type
NULL pointer dereference due to improper error handling (misuse of IS_ERR/PTR_ERR with a NULL-returning allocator)

3. Root Cause Summary
The probe routine pxa1908_apbc_probe() treated the result of devm_kzalloc() as if it could be an ERR_PTR and checked it with IS_ERR(). Since devm_kzalloc() returns NULL on failure, the IS_ERR() check never triggered on allocation failure. The code then proceeded to use the NULL pointer (pxa_unit), leading to a NULL pointer dereference during device probe. The patch replaces the erroneous IS_ERR/PTR_ERR logic with a correct NULL check and returns -ENOMEM, preventing dereference of a NULL allocation result.

4. Kernel Subsystem Analysis
1) Affected Subsystem:
Clock framework (drivers/clk), Marvell MMP PXA1908 APBC driver (drivers/clk/mmp/clk-pxa1908-apbc.c), function pxa1908_apbc_probe().

2) Pre-Patch Flaw:
After allocating pxa_unit with devm_kzalloc(), the code did:
“if (IS_ERR(pxa_unit)) return PTR_ERR(pxa_unit);”
This is incorrect for devm_kzalloc(), which returns NULL on failure, not ERR_PTRs, so allocation failure was not detected.

3) Trigger Condition:
devm_kzalloc(&pdev->dev, sizeof(*pxa_unit), GFP_KERNEL) returning NULL (e.g., due to memory pressure or fault injection) during the device probe path.

4) Impact Mechanism:
Subsequent use of pxa_unit when it is NULL causes a kernel NULL pointer dereference, resulting in an oops/panic during probe and a denial of service. Additionally, the error path would not properly report -ENOMEM, impairing correct error propagation.

5. Patch Analysis
1) Fix Approach:
Correct the error handling to match devm_kzalloc() semantics by checking for NULL and returning -ENOMEM on failure, preventing use of a NULL pointer.

2) Key Code Changes:
In pxa1908_apbc_probe():
- Replaced:
  “if (IS_ERR(pxa_unit)) return PTR_ERR(pxa_unit);”
- With:
  “if (!pxa_unit) return -ENOMEM;”
This directly aligns the check with devm_kzalloc()’s NULL-on-error contract.

3) Locking/Concurrency Impact:
None. The change is confined to allocation failure handling and does not alter locking, ordering, or concurrency behavior.

6. Broader Kernel Security Implications
This fix prevents a crash-only class issue that can be triggered on allocation failure in the probe path, improving kernel robustness against low-memory conditions or fault-injection scenarios. Similar misuse patterns (IS_ERR() on kmalloc/devm_kzalloc results) can exist in other drivers and should be audited. While this bug is unlikely to enable privilege escalation, it facilitates denial-of-service by crashing the kernel during device initialization if allocation fails. Properly returning -ENOMEM also ensures accurate error reporting to the driver core and avoids ambiguous success paths on failure.

[REQUEST]
Produce a detection plan for a CodeQL-based static checker that would detect similar pre-patch flaws.
Requirements for the plan:
- High-level detection goal (1–2 lines).
- A numbered list of detection steps (objective, conceptual AST/semantic signals, FP mitigation).
- Types of program elements to target (functions, call sites, allocation sites, condition checks, lock boundaries, function return-value uses, etc.).
- Dataflow/taint patterns to consider (if applicable), described conceptually.
- Minimal test cases to validate the checker (positive/negative examples).
- Estimated effort/priority (low/medium/high) and likely false-positive sources.
- A short "Limitations & Assumptions" block.

OUTPUT FORMAT (produce exactly this structure; no extra text):
1. Plan Summary
{one-line summary}

2. Detection Steps
1) Step 1: {objective — conceptual signals — FP mitigation}
2) Step 2: {objective — conceptual signals — FP mitigation}
...
(narrow to ≤12 steps)

3. Target Elements
- {list of element types to inspect}

4. Dataflow / Taint Considerations
- {conceptual taint/flow rules to track}

5. Validation & Test Cases
- Positive: {brief}
- Negative: {brief}
- Test harness notes: {brief}

6. Estimated Effort & Priority
{low/medium/high}

7. Likely False-Positive Sources & Mitigations
- {list}

8. Limitations & Assumptions
- {explicit missing info or assumptions}

CONSTRAINTS:
- Do not emit any CodeQL, SQL, pseudocode, or query fragments.
- Keep answers evidence-based and reference which provided field supported each major choice (e.g., “based on [PATCH_DIFF] hunk that adds X”).
- Output must be machine-parseable: keep the exact numbered section headings as above.