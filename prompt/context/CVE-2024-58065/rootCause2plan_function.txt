You are a senior static-analysis engineer and CodeQL design expert.
Task: Based only on the supplied materials, produce a human-readable detection plan (natural-language) for a CodeQL checker that would detect the same class of vulnerability described. DO NOT produce any query code or pseudocode — the output must be purely natural language steps and rationale.

Rules:
1. Only use evidence contained in the sections labeled [PATCH_DESCRIPTION], [PATCH_DIFF], [FUNCTION_CONTENT], and [ROOTCAUSE_ANALYSIS]. Do not invent facts.
2. The plan must be a step-by-step detection strategy in natural language (numbered steps). No code, no query snippets, no regex, no domain-specific language.
3. Each step must state: objective, signals to look for (AST/semantic patterns expressed conceptually), why it maps to the root cause, and how to reduce false positives.
4. Include a short test/validation strategy (what sample cases to run and expected outcomes).
5. List limitations and assumptions (what is Not determinable from inputs).
6. Keep the plan concise: overall ≤ 12 numbered steps and each step ≤ 2 concise sentences. Use bullets where helpful.
7. If information required to design an accurate checker is missing, state it explicitly under "Limitations & Assumptions".

[META]
CVE_NAME: CVE-2024-58065

[INFO]
[PATCH_DESCRIPTION]
 clk: mmp: pxa1908-apbc: Fix NULL vs IS_ERR() check
 The devm_kzalloc() function returns NULL on error, not error pointers.
 Fix the check.
 
 Fixes: 51ce55919273 ("clk: mmp: Add Marvell PXA1908 APBC driver")

[PATCH_DIFF]
    diff --git a/drivers/clk/mmp/clk-pxa1908-apbc.c b/drivers/clk/mmp/clk-pxa1908-apbc.c
    index b93d0846619856..3fd7b5e644f3b6 100644
    --- a/drivers/clk/mmp/clk-pxa1908-apbc.c
    +++ b/drivers/clk/mmp/clk-pxa1908-apbc.c
    @@ -96,8 +96,8 @@ static int pxa1908_apbc_probe(struct platform_device *pdev)
     	struct pxa1908_clk_unit *pxa_unit;
     
     	pxa_unit = devm_kzalloc(&pdev->dev, sizeof(*pxa_unit), GFP_KERNEL);
    -	if (IS_ERR(pxa_unit))
    -		return PTR_ERR(pxa_unit);
    +	if (!pxa_unit)
    +		return -ENOMEM;

[FUNCTION_CONTENT]
static int pxa1908_apbc_probe(struct platform_device *pdev)
{
	struct pxa1908_clk_unit *pxa_unit;

	pxa_unit = devm_kzalloc(&pdev->dev, sizeof(*pxa_unit), GFP_KERNEL);
	if (IS_ERR(pxa_unit))
		return PTR_ERR(pxa_unit);

	pxa_unit->base = devm_platform_ioremap_resource(pdev, 0);
	if (IS_ERR(pxa_unit->base))
		return PTR_ERR(pxa_unit->base);

	mmp_clk_init(pdev->dev.of_node, &pxa_unit->unit, APBC_NR_CLKS);

	pxa1908_apb_periph_clk_init(pxa_unit);

	return 0;
}

/* ----- separator ----- */

			ARRAY_SIZE(apbc_mux_clks));
	mmp_register_gate_clks(unit, apbc_gate_clks, pxa_unit->base,
			ARRAY_SIZE(apbc_gate_clks));
}

static int pxa1908_apbc_probe(struct platform_device *pdev)
{
	struct pxa1908_clk_unit *pxa_unit;

	pxa_unit = devm_kzalloc(&pdev->dev, sizeof(*pxa_unit), GFP_KERNEL);
	if (IS_ERR(pxa_unit))
		return PTR_ERR(pxa_unit);

	pxa_unit->base = devm_platform_ioremap_resource(pdev, 0);
	if (IS_ERR(pxa_unit->base))
		return PTR_ERR(pxa_unit->base);

	mmp_clk_init(pdev->dev.of_node, &pxa_unit->unit, APBC_NR_CLKS);

	pxa1908_apb_periph_clk_init(pxa_unit);

	return 0;
}

/* ----- separator ----- */

			ARRAY_SIZE(apbc_gate_clks));
}

static int pxa1908_apbc_probe(struct platform_device *pdev)
{
	struct pxa1908_clk_unit *pxa_unit;

	pxa_unit = devm_kzalloc(&pdev->dev, sizeof(*pxa_unit), GFP_KERNEL);
	if (IS_ERR(pxa_unit))
		return PTR_ERR(pxa_unit);

	pxa_unit->base = devm_platform_ioremap_resource(pdev, 0);
	if (IS_ERR(pxa_unit->base))
		return PTR_ERR(pxa_unit->base);

	mmp_clk_init(pdev->dev.of_node, &pxa_unit->unit, APBC_NR_CLKS);

	pxa1908_apb_periph_clk_init(pxa_unit);

	return 0;
}



[ROOTCAUSE_ANALYSIS]
1. CVE Identifier
CVE-2024-58065

2. Vulnerability Type
Null pointer dereference due to improper error handling (incorrect NULL vs ERR_PTR check)

3. Root Cause Summary
- In pxa1908_apbc_probe(), the result of devm_kzalloc() was incorrectly validated with IS_ERR()/PTR_ERR(), which is only appropriate for functions returning ERR_PTR on failure.
- devm_kzalloc() returns NULL on allocation failure; because IS_ERR(NULL) evaluates false, the failure was not detected and the code dereferenced a NULL pxa_unit.
- This leads to a kernel NULL pointer dereference when accessing pxa_unit->base after the failed allocation.

4. Kernel Subsystem Analysis
1) Affected Subsystem:
- Clock framework (clk), Marvell MMP/PXA1908 APBC driver
- File: drivers/clk/mmp/clk-pxa1908-apbc.c

2) Pre-Patch Flaw:
- In pxa1908_apbc_probe(), the code erroneously used:
  "if (IS_ERR(pxa_unit)) return PTR_ERR(pxa_unit);"
- Misuse of ERR_PTR semantics for a function that returns NULL on failure caused missed error detection.

3) Trigger Condition:
- devm_kzalloc(&pdev->dev, sizeof(*pxa_unit), GFP_KERNEL) fails and returns NULL (e.g., under low-memory conditions) during device probe.

4) Impact Mechanism:
- The subsequent dereference "pxa_unit->base = devm_platform_ioremap_resource(pdev, 0);" dereferences NULL, causing a kernel oops/panic (denial of service).
- Additionally, the incorrect error propagation path would have returned 0 if taken (PTR_ERR(NULL) == 0), but the main hazard is the missed check leading to NULL dereference.

5. Patch Analysis
1) Fix Approach:
- Replace the incorrect IS_ERR()/PTR_ERR() check with a proper NULL check and return a meaningful error code (-ENOMEM) on allocation failure.

2) Key Code Changes:
- Before: "if (IS_ERR(pxa_unit)) return PTR_ERR(pxa_unit);"
- After: "if (!pxa_unit) return -ENOMEM;"
- No other logic changes; existing ERR_PTR checks remain where appropriate (e.g., for devm_platform_ioremap_resource()).

3) Locking/Concurrency Impact:
- None. The change is limited to error handling in the probe path and does not alter locking, ordering, or concurrency behavior.

6. Broader Kernel Security Implications
- Correct error handling for allocation failures prevents kernel crashes during device probing, reducing denial-of-service risk under memory pressure.
- Reinforces consistent use of NULL checks for kmalloc-family functions and ERR_PTR checks for functions that encode errors in pointers, improving robustness across drivers.
- Ensures accurate error propagation (-ENOMEM), aiding reliability and diagnosability in the clk subsystem.

[REQUEST]
Produce a detection plan for a CodeQL-based static checker that would detect similar pre-patch flaws.
Requirements for the plan:
- High-level detection goal (1–2 lines).
- A numbered list of detection steps (objective, conceptual AST/semantic signals, FP mitigation).
- Types of program elements to target (functions, call sites, allocation sites, condition checks, lock boundaries, function return-value uses, etc.).
- Dataflow/taint patterns to consider (if applicable), described conceptually.
- Minimal test cases to validate the checker (positive/negative examples).
- Estimated effort/priority (low/medium/high) and likely false-positive sources.
- A short "Limitations & Assumptions" block.

OUTPUT FORMAT (produce exactly this structure; no extra text):
1. Plan Summary
{one-line summary}

2. Detection Steps
1) Step 1: {objective — conceptual signals — FP mitigation}
2) Step 2: {objective — conceptual signals — FP mitigation}
...
(narrow to ≤12 steps)

3. Target Elements
- {list of element types to inspect}

4. Dataflow / Taint Considerations
- {conceptual taint/flow rules to track}

5. Validation & Test Cases
- Positive: {brief}
- Negative: {brief}
- Test harness notes: {brief}

6. Estimated Effort & Priority
{low/medium/high}

7. Likely False-Positive Sources & Mitigations
- {list}

8. Limitations & Assumptions
- {explicit missing info or assumptions}

CONSTRAINTS:
- Do not emit any CodeQL, SQL, pseudocode, or query fragments.
- Keep answers evidence-based and reference which provided field supported each major choice (e.g., “based on [PATCH_DIFF] hunk that adds X”).
- Output must be machine-parseable: keep the exact numbered section headings as above.