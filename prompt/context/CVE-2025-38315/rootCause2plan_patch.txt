You are a senior static-analysis engineer and CodeQL design expert.
Task: Based only on the supplied materials, produce a human-readable detection plan (natural-language) for a CodeQL checker that would detect the same class of vulnerability described. DO NOT produce any query code or pseudocode — the output must be purely natural language steps and rationale.

Rules:
1. Only use evidence contained in the sections labeled [PATCH_DESCRIPTION], [PATCH_DIFF], and [ROOTCAUSE_ANALYSIS]. Do not invent facts.
2. The plan must be a step-by-step detection strategy in natural language (numbered steps). No code, no query snippets, no regex, no domain-specific language.
3. Each step must state: objective, signals to look for (AST/semantic patterns expressed conceptually), why it maps to the root cause, and how to reduce false positives.
4. Include a short test/validation strategy (what sample cases to run and expected outcomes).
5. List limitations and assumptions (what is Not determinable from inputs).
6. Keep the plan concise: overall ≤ 12 numbered steps and each step ≤ 2 concise sentences. Use bullets where helpful.
7. If information required to design an accurate checker is missing, state it explicitly under "Limitations & Assumptions".

[META]
CVE_NAME: CVE-2025-38315

[INFO]
[PATCH_DESCRIPTION]
    Bluetooth: btintel: Check dsbr size from EFI variable
    Since the size of struct btintel_dsbr is already known, we can just
    start there instead of querying the EFI variable size. If the final
    result doesn't match what we expect also fail. This fixes a stack buffer
    overflow when the EFI variable is larger than struct btintel_dsbr.

[PATCH_DIFF]
     @@ -2719,7 +2719,7 @@ static int btintel_uefi_get_dsbr(u32 *dsbr_var)
      	} __packed data;
      
      	efi_status_t status;
     -	unsigned long data_size = 0;
     +	unsigned long data_size = sizeof(data);
      	efi_guid_t guid = EFI_GUID(0xe65d8884, 0xd4af, 0x4b20, 0x8d, 0x03,
      				   0x77, 0x2e, 0xcc, 0x3d, 0xa5, 0x31);
      
     @@ -2730,15 +2730,9 @@ static int btintel_uefi_get_dsbr(u32 *dsbr_var)
      		return -EOPNOTSUPP;
      
      	status = efi.get_variable(BTINTEL_EFI_DSBR, &guid, NULL, &data_size,
     -				  NULL);
     -
     -	if (status != EFI_BUFFER_TOO_SMALL || !data_size)
     -		return -EIO;
     -
     -	status = efi.get_variable(BTINTEL_EFI_DSBR, &guid, NULL, &data_size,
      				  &data);
      
     -	if (status != EFI_SUCCESS)
     +	if (status != EFI_SUCCESS || data_size != sizeof(data))
      		return -ENXIO;
      
      	*dsbr_var = data.dsbr;



[ROOTCAUSE_ANALYSIS]
1. CVE Identifier
CVE-2025-38315

2. Vulnerability Type
Stack buffer overflow (unsafe length handling of EFI variable into fixed-size stack struct)

3. Root Cause Summary
btintel_uefi_get_dsbr() queried the EFI variable size first, then reused that returned size as the copy length when reading into a fixed-size stack struct without verifying it was <= sizeof(struct btintel_dsbr). If the EFI variable was larger than the struct, efi.get_variable() wrote data_size bytes into the smaller stack buffer, overflowing it. The pre-patch logic trusted external (firmware) length and failed to bound the copy to the destination’s capacity or to ensure an exact-size match.

4. Kernel Subsystem Analysis
1) Affected Subsystem:
Bluetooth Intel driver (btintel), function btintel_uefi_get_dsbr(), handling UEFI variable BTINTEL_EFI_DSBR.

2) Pre-Patch Flaw:
- data_size initialized to 0, followed by a probe call: efi.get_variable(..., &data_size, NULL) expecting EFI_BUFFER_TOO_SMALL to learn required size.
- The subsequent call passed &data_size and &data, with data_size set to the firmware-reported required size, but data was a fixed-size local struct.
- There was no check that data_size <= sizeof(data), and no bounding of the copy to sizeof(data), leading to unsafe copy into a stack buffer.

3) Trigger Condition:
The UEFI variable BTINTEL_EFI_DSBR is larger than sizeof(struct btintel_dsbr) (i.e., data_size returned by the first call exceeds the fixed local buffer size).

4) Impact Mechanism:
efi.get_variable() uses the caller-provided data_size as the buffer length and copies that many bytes into &data; when data_size > sizeof(data), this overwrites adjacent stack memory, causing a stack buffer overflow and kernel memory corruption (potential crash or exploitation).

5. Patch Analysis
1) Fix Approach:
- Enforce a strict, known bound by initializing data_size to sizeof(data) before the read.
- Remove the initial “size probe” call and perform a single bounded read.
- Validate that the returned status is EFI_SUCCESS and that data_size equals sizeof(data), rejecting any size mismatch.

2) Key Code Changes:
- data_size set to sizeof(data) instead of 0.
- Deleted the first get_variable() call with NULL buffer and the EFI_BUFFER_TOO_SMALL check.
- Single get_variable() call now uses &data with data_size = sizeof(data).
- Added check: if (status != EFI_SUCCESS || data_size != sizeof(data)) return -ENXIO; ensuring no overflow and exact-size data.

3) Locking/Concurrency Impact:
None. No locking or concurrency changes; the issue and fix concern buffer sizing and bounds validation only.

6. Broader Kernel Security Implications
- Reading firmware-provided data into fixed-size kernel buffers must always bound copy lengths to the destination size and validate expected structure sizes; trusting external size reports can lead to kernel memory corruption.
- The common two-step EFI GetVariable pattern (probe size then read) is safe only when copying into an appropriately sized dynamically allocated buffer; for fixed-size structures, callers must set the input buffer length to sizeof(struct) and require exact matches.
- Stack overflows in kernel space are high-risk, potentially enabling privilege escalation or denial-of-service; this fix strengthens defensive handling of UEFI input in the Bluetooth subsystem.

[REQUEST]
Produce a detection plan for a CodeQL-based static checker that would detect similar pre-patch flaws.
Requirements for the plan:
- High-level detection goal (1–2 lines).
- A numbered list of detection steps (objective, conceptual AST/semantic signals, FP mitigation).
- Types of program elements to target (functions, call sites, allocation sites, condition checks, lock boundaries, function return-value uses, etc.).
- Dataflow/taint patterns to consider (if applicable), described conceptually.
- Minimal test cases to validate the checker (positive/negative examples).
- Estimated effort/priority (low/medium/high) and likely false-positive sources.
- A short "Limitations & Assumptions" block.

OUTPUT FORMAT (produce exactly this structure; no extra text):
1. Plan Summary
{one-line summary}

2. Detection Steps
1) Step 1: {objective — conceptual signals — FP mitigation}
2) Step 2: {objective — conceptual signals — FP mitigation}
...
(narrow to ≤12 steps)

3. Target Elements
- {list of element types to inspect}

4. Dataflow / Taint Considerations
- {conceptual taint/flow rules to track}

5. Validation & Test Cases
- Positive: {brief}
- Negative: {brief}
- Test harness notes: {brief}

6. Estimated Effort & Priority
{low/medium/high}

7. Likely False-Positive Sources & Mitigations
- {list}

8. Limitations & Assumptions
- {explicit missing info or assumptions}

CONSTRAINTS:
- Do not emit any CodeQL, SQL, pseudocode, or query fragments.
- Keep answers evidence-based and reference which provided field supported each major choice (e.g., “based on [PATCH_DIFF] hunk that adds X”).
- Output must be machine-parseable: keep the exact numbered section headings as above.