You are a senior static-analysis engineer and CodeQL design expert.
Task: Based only on the supplied materials, produce a human-readable detection plan (natural-language) for a CodeQL checker that would detect the same class of vulnerability described. DO NOT produce any query code or pseudocode — the output must be purely natural language steps and rationale.

Rules:
1. Only use evidence contained in the sections labeled [PATCH_DESCRIPTION], [PATCH_DIFF], and [ROOTCAUSE_ANALYSIS]. Do not invent facts.
2. The plan must be a step-by-step detection strategy in natural language (numbered steps). No code, no query snippets, no regex, no domain-specific language.
3. Each step must state: objective, signals to look for (AST/semantic patterns expressed conceptually), why it maps to the root cause, and how to reduce false positives.
4. Include a short test/validation strategy (what sample cases to run and expected outcomes).
5. List limitations and assumptions (what is Not determinable from inputs).
6. Keep the plan concise: overall ≤ 12 numbered steps and each step ≤ 2 concise sentences. Use bullets where helpful.
7. If information required to design an accurate checker is missing, state it explicitly under "Limitations & Assumptions".

[META]
CVE_NAME: CVE-2024-57987

[INFO]
[PATCH_DESCRIPTION]
 Bluetooth: btrtl: check for NULL in btrtl_setup_realtek()
 If insert an USB dongle which chip is not maintained in ic_id_table, it
 will hit the NULL point accessed. Add a null point check to avoid the
 Kernel Oops.

 Fixes: b39910bb54d9 ("Bluetooth: Populate hci_set_hw_info for Intel and Realtek")

[PATCH_DIFF]
 diff --git a/drivers/bluetooth/btrtl.c b/drivers/bluetooth/btrtl.c
 index 83025f457ca044…d3eba0d4a57d3b 100644
 --- a/drivers/bluetooth/btrtl.c
 +++ b/drivers/bluetooth/btrtl.c
 @@ -1351,12 +1351,14 @@ int btrtl_setup_realtek(struct hci_dev *hdev)

   btrtl_set_quirks(hdev, btrtl_dev);

 - hci_set_hw_info(hdev,
 + if (btrtl_dev->ic_info) {
 + hci_set_hw_info(hdev,
   "RTL lmp_subver=%u hci_rev=%u hci_ver=%u hci_bus=%u",
   btrtl_dev->ic_info->lmp_subver,
   btrtl_dev->ic_info->hci_rev,
   btrtl_dev->ic_info->hci_ver,
   btrtl_dev->ic_info->hci_bus);
 + }

   btrtl_free(btrtl_dev);
   return ret;



[ROOTCAUSE_ANALYSIS]
1. CVE Identifier
CVE-2024-57987

2. Vulnerability Type
NULL pointer dereference leading to kernel Oops/Denial of Service

3. Root Cause Summary
btrtl_setup_realtek() unconditionally dereferenced btrtl_dev->ic_info and its fields when calling hci_set_hw_info(), without verifying that ic_info was non-NULL. For Realtek USB dongles whose chip was not present in ic_id_table, btrtl_dev->ic_info could be NULL, causing a NULL pointer dereference. The patch adds a guard to only call hci_set_hw_info() when btrtl_dev->ic_info is valid.

4. Kernel Subsystem Analysis
1) Affected Subsystem:
Bluetooth Realtek driver (drivers/bluetooth/btrtl.c)

2) Pre-Patch Flaw:
Unconditional dereference of btrtl_dev->ic_info in btrtl_setup_realtek(). Evidence from the pre-patch lines:
- hci_set_hw_info(hdev,
  "RTL lmp_subver=%u hci_rev=%u hci_ver=%u hci_bus=%u",
  btrtl_dev->ic_info->lmp_subver,
  btrtl_dev->ic_info->hci_rev,
  btrtl_dev->ic_info->hci_ver,
  btrtl_dev->ic_info->hci_bus);

3) Trigger Condition:
Insertion of a USB Bluetooth dongle whose chip is not maintained in ic_id_table, resulting in btrtl_dev->ic_info being NULL during setup.

4) Impact Mechanism:
Dereferencing btrtl_dev->ic_info->lmp_subver/hci_rev/hci_ver/hci_bus when ic_info is NULL triggers a kernel Oops (NULL pointer dereference), causing a crash/DoS of the Bluetooth stack or kernel.

5. Patch Analysis
1) Fix Approach:
Add a NULL check around the hci_set_hw_info() call to ensure ic_info is valid before accessing its fields.

2) Key Code Changes:
- Wrap the hci_set_hw_info() invocation in:
  if (btrtl_dev->ic_info) {
      hci_set_hw_info(... btrtl_dev->ic_info->...);
  }
No other functional changes in the hunk.

3) Locking/Concurrency Impact:
None. The patch introduces a simple validation check; no locking, ordering, or concurrency semantics were changed.

6. Broader Kernel Security Implications
This fix hardens the Bluetooth subsystem against plug-and-play induced kernel crashes from unsupported Realtek devices, reducing a straightforward local DoS vector. It highlights the need for rigorous NULL checks for optional/driver-populated device info structures before dereference. Similar validation patterns should be audited across other Bluetooth vendor drivers to prevent analogous kernel Oops conditions.

[REQUEST]
Produce a detection plan for a CodeQL-based static checker that would detect similar pre-patch flaws.
Requirements for the plan:
- High-level detection goal (1–2 lines).
- A numbered list of detection steps (objective, conceptual AST/semantic signals, FP mitigation).
- Types of program elements to target (functions, call sites, allocation sites, condition checks, lock boundaries, function return-value uses, etc.).
- Dataflow/taint patterns to consider (if applicable), described conceptually.
- Minimal test cases to validate the checker (positive/negative examples).
- Estimated effort/priority (low/medium/high) and likely false-positive sources.
- A short "Limitations & Assumptions" block.

OUTPUT FORMAT (produce exactly this structure; no extra text):
1. Plan Summary
{one-line summary}

2. Detection Steps
1) Step 1: {objective — conceptual signals — FP mitigation}
2) Step 2: {objective — conceptual signals — FP mitigation}
...
(narrow to ≤12 steps)

3. Target Elements
- {list of element types to inspect}

4. Dataflow / Taint Considerations
- {conceptual taint/flow rules to track}

5. Validation & Test Cases
- Positive: {brief}
- Negative: {brief}
- Test harness notes: {brief}

6. Estimated Effort & Priority
{low/medium/high}

7. Likely False-Positive Sources & Mitigations
- {list}

8. Limitations & Assumptions
- {explicit missing info or assumptions}

CONSTRAINTS:
- Do not emit any CodeQL, SQL, pseudocode, or query fragments.
- Keep answers evidence-based and reference which provided field supported each major choice (e.g., “based on [PATCH_DIFF] hunk that adds X”).
- Output must be machine-parseable: keep the exact numbered section headings as above.