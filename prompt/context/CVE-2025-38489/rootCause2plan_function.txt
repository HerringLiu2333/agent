You are a senior static-analysis engineer and CodeQL design expert.
Task: Based only on the supplied materials, produce a human-readable detection plan (natural-language) for a CodeQL checker that would detect the same class of vulnerability described. DO NOT produce any query code or pseudocode — the output must be purely natural language steps and rationale.

Rules:
1. Only use evidence contained in the sections labeled [PATCH_DESCRIPTION], [PATCH_DIFF], [FUNCTION_CONTENT], and [ROOTCAUSE_ANALYSIS]. Do not invent facts.
2. The plan must be a step-by-step detection strategy in natural language (numbered steps). No code, no query snippets, no regex, no domain-specific language.
3. Each step must state: objective, signals to look for (AST/semantic patterns expressed conceptually), why it maps to the root cause, and how to reduce false positives.
4. Include a short test/validation strategy (what sample cases to run and expected outcomes).
5. List limitations and assumptions (what is Not determinable from inputs).
6. Keep the plan concise: overall ≤ 12 numbered steps and each step ≤ 2 concise sentences. Use bullets where helpful.
7. If information required to design an accurate checker is missing, state it explicitly under "Limitations & Assumptions".

[META]
CVE_NAME: CVE-2025-38489

[INFO]
[PATCH_DESCRIPTION]
    s390/bpf: Fix bpf_arch_text_poke() with new_addr == NULL again
    Commit 7ded842b356d ("s390/bpf: Fix bpf_plt pointer arithmetic") has
    accidentally removed the critical piece of commit c730fce7c70c
    ("s390/bpf: Fix bpf_arch_text_poke() with new_addr == NULL"), causing
    intermittent kernel panics in e.g. perf's on_switch() prog to reappear.
    
    Restore the fix and add a comment.

[PATCH_DIFF]
    @@ -566,7 +566,15 @@ static void bpf_jit_plt(struct bpf_plt *plt, void *ret, void *target)
     {
     	memcpy(plt, &bpf_plt, sizeof(*plt));
     	plt->ret = ret;
    -	plt->target = target;
    +	/*
    +	 * (target == NULL) implies that the branch to this PLT entry was
    +	 * patched and became a no-op. However, some CPU could have jumped
    +	 * to this PLT entry before patching and may be still executing it.
    +	 *
    +	 * Since the intention in this case is to make the PLT entry a no-op,
    +	 * make the target point to the return label instead of NULL.
    +	 */
    +	plt->target = target ?: ret;
     }
     
     /*

[FUNCTION_CONTENT]
static void bpf_jit_plt(struct bpf_plt *plt, void *ret, void *target)
{
	memcpy(plt, &bpf_plt, sizeof(*plt));
	plt->ret = ret;
	plt->target = target;
}



[ROOTCAUSE_ANALYSIS]
1. CVE Identifier
CVE-2025-38489

2. Vulnerability Type
Race condition leading to invalid control-flow (NULL branch target) and kernel crash

3. Root Cause Summary
During dynamic text patching for BPF on s390, bpf_jit_plt initialized PLT entries with plt->target = target even when target was NULL, which signifies that the branch was patched into a no-op. CPUs that had already branched to the PLT entry before the patch could still execute it and attempt to branch to a NULL target, causing intermittent kernel panics. The pre-patch code lacked a safeguard to redirect such in-flight PLT execution to a safe return path when target == NULL.

4. Kernel Subsystem Analysis
1) Affected Subsystem:
s390 architecture BPF JIT/text patching (bpf_arch_text_poke, PLT entries), specifically function bpf_jit_plt in arch/s390 BPF code.

2) Pre-Patch Flaw:
bpf_jit_plt assigned plt->target = target unconditionally (see FUNCTION_CONTENT), without handling target == NULL which represents a no-op after patching. This allowed a PLT entry to contain a NULL branch target during the window where CPUs might still execute it.

3) Trigger Condition:
When bpf_arch_text_poke() is invoked with new_addr == NULL to turn a branch into a no-op, and a CPU has already branched to the corresponding PLT entry prior to the patch completing. The PLT entry, having plt->target == NULL, is then executed by that CPU.

4) Impact Mechanism:
Execution of a PLT entry with a NULL target causes a branch to address NULL, leading to a fault and intermittent kernel panics (as reported for perf's on_switch() BPF program). This is a denial-of-service via crash rather than memory corruption.

5. Patch Analysis
1) Fix Approach:
Restore the prior fix ensuring PLT entries become safe no-ops under concurrent execution by redirecting NULL targets to the return label. Specifically, treat a NULL target as ret to avoid branching to NULL.

2) Key Code Changes:
In bpf_jit_plt:
- Changed from: plt->target = target;
- To: plt->target = target ?: ret;
Added a clarifying comment explaining that (target == NULL) means the branch was patched to a no-op, and to handle CPUs still executing the PLT entry by pointing target to the return label.

3) Locking/Concurrency Impact:
No locks were added or modified. The change removes the race hazard by making the PLT entry itself safe under concurrent execution paths, ensuring that even if a CPU reaches the PLT entry during patching, it will branch to ret (a no-op) instead of NULL.

6. Broader Kernel Security Implications
Ensuring safe behavior during dynamic text patching hardens the BPF JIT against transient execution races that can crash the kernel, reducing denial-of-service risk. It improves reliability of runtime patching mechanisms (e.g., perf and BPF program switching) and prevents invalid control-flow targets that could otherwise lead to system instability. While not a memory safety bug, this fix addresses a critical stability and availability concern in a frequently exercised subsystem.

[REQUEST]
Produce a detection plan for a CodeQL-based static checker that would detect similar pre-patch flaws.
Requirements for the plan:
- High-level detection goal (1–2 lines).
- A numbered list of detection steps (objective, conceptual AST/semantic signals, FP mitigation).
- Types of program elements to target (functions, call sites, allocation sites, condition checks, lock boundaries, function return-value uses, etc.).
- Dataflow/taint patterns to consider (if applicable), described conceptually.
- Minimal test cases to validate the checker (positive/negative examples).
- Estimated effort/priority (low/medium/high) and likely false-positive sources.
- A short "Limitations & Assumptions" block.

OUTPUT FORMAT (produce exactly this structure; no extra text):
1. Plan Summary
{one-line summary}

2. Detection Steps
1) Step 1: {objective — conceptual signals — FP mitigation}
2) Step 2: {objective — conceptual signals — FP mitigation}
...
(narrow to ≤12 steps)

3. Target Elements
- {list of element types to inspect}

4. Dataflow / Taint Considerations
- {conceptual taint/flow rules to track}

5. Validation & Test Cases
- Positive: {brief}
- Negative: {brief}
- Test harness notes: {brief}

6. Estimated Effort & Priority
{low/medium/high}

7. Likely False-Positive Sources & Mitigations
- {list}

8. Limitations & Assumptions
- {explicit missing info or assumptions}

CONSTRAINTS:
- Do not emit any CodeQL, SQL, pseudocode, or query fragments.
- Keep answers evidence-based and reference which provided field supported each major choice (e.g., “based on [PATCH_DIFF] hunk that adds X”).
- Output must be machine-parseable: keep the exact numbered section headings as above.