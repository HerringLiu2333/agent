You are a senior static-analysis engineer and CodeQL design expert.
Task: Based only on the supplied materials, produce a human-readable detection plan (natural-language) for a CodeQL checker that would detect the same class of vulnerability described. DO NOT produce any query code or pseudocode — the output must be purely natural language steps and rationale.

Rules:
1. Only use evidence contained in the sections labeled [PATCH_DESCRIPTION], [PATCH_DIFF], and [ROOTCAUSE_ANALYSIS]. Do not invent facts.
2. The plan must be a step-by-step detection strategy in natural language (numbered steps). No code, no query snippets, no regex, no domain-specific language.
3. Each step must state: objective, signals to look for (AST/semantic patterns expressed conceptually), why it maps to the root cause, and how to reduce false positives.
4. Include a short test/validation strategy (what sample cases to run and expected outcomes).
5. List limitations and assumptions (what is Not determinable from inputs).
6. Keep the plan concise: overall ≤ 12 numbered steps and each step ≤ 2 concise sentences. Use bullets where helpful.
7. If information required to design an accurate checker is missing, state it explicitly under "Limitations & Assumptions".

[META]
CVE_NAME: CVE-2025-38489

[INFO]
[PATCH_DESCRIPTION]
    s390/bpf: Fix bpf_arch_text_poke() with new_addr == NULL again
    Commit 7ded842b356d ("s390/bpf: Fix bpf_plt pointer arithmetic") has
    accidentally removed the critical piece of commit c730fce7c70c
    ("s390/bpf: Fix bpf_arch_text_poke() with new_addr == NULL"), causing
    intermittent kernel panics in e.g. perf's on_switch() prog to reappear.
    
    Restore the fix and add a comment.

[PATCH_DIFF]
    @@ -566,7 +566,15 @@ static void bpf_jit_plt(struct bpf_plt *plt, void *ret, void *target)
     {
     	memcpy(plt, &bpf_plt, sizeof(*plt));
     	plt->ret = ret;
    -	plt->target = target;
    +	/*
    +	 * (target == NULL) implies that the branch to this PLT entry was
    +	 * patched and became a no-op. However, some CPU could have jumped
    +	 * to this PLT entry before patching and may be still executing it.
    +	 *
    +	 * Since the intention in this case is to make the PLT entry a no-op,
    +	 * make the target point to the return label instead of NULL.
    +	 */
    +	plt->target = target ?: ret;
     }
     
     /*



[ROOTCAUSE_ANALYSIS]
1. CVE Identifier
CVE-2025-38489

2. Vulnerability Type
Race-induced NULL indirect branch (invalid jump target) during runtime text patching

3. Root Cause Summary
The s390 eBPF JIT PLT generation routine set plt->target directly to the provided target, including when target == NULL (new_addr == NULL case during bpf_arch_text_poke). If a CPU had already branched to the PLT entry just before the branch site was patched into a no-op, it could still execute the PLT entry whose target was NULL, causing a jump to address 0 and a kernel panic. The patch restores the intended behavior: when target is NULL, set plt->target to the return label (ret), making the PLT entry a safe no-op for in-flight executions.

4. Kernel Subsystem Analysis
1) Affected Subsystem:
- Architecture-specific eBPF JIT for s390 (bpf_plt handling in arch s390)

2) Pre-Patch Flaw:
- In bpf_jit_plt(), the code assigned plt->target = target unconditionally.
- When bpf_arch_text_poke() used new_addr == NULL (intending to neutralize the branch), the PLT entry could be initialized with target == NULL, leaving an invalid branch target if executed concurrently.

3) Trigger Condition:
- A branch to a PLT entry was patched (via bpf_arch_text_poke) to become a no-op (new_addr == NULL), while another CPU had already fetched/was executing the jump to that PLT entry.
- Reported to occur intermittently with perf’s on_switch() BPF program.

4) Impact Mechanism:
- Execution of the PLT entry with plt->target == NULL causes an indirect branch to a NULL address, triggering a page fault and kernel panic (DoS).

5. Patch Analysis
1) Fix Approach:
- Defensive redirection: when target is NULL, point the PLT entry’s target to the return label (ret) so that executing the PLT entry effectively becomes a no-op and safely returns.

2) Key Code Changes:
- In bpf_jit_plt(struct bpf_plt *plt, void *ret, void *target):
  - Changed from: plt->target = target;
  - To: plt->target = target ?: ret;
  - Added a comment explaining the concurrent execution window and the rationale for redirecting to ret when target == NULL.

3) Locking/Concurrency Impact:
- No new locks or ordering changes; the fix eliminates the hazard by making the PLT entry safe under concurrent execution.
- It closes the race window’s impact by ensuring in-flight execution of a soon-to-be-no-op branch cannot jump to NULL; instead it returns via ret.

6. Broader Kernel Security Implications
- Highlights the need for concurrency-safe text patching and PLT/trampoline designs that remain valid under concurrent execution, especially in JITed code paths.
- Prevents kernel panics and potential denial-of-service scenarios when BPF programs are dynamically patched/unloaded.
- Reinforces best practices: when neutralizing call sites, ensure residual stubs are safe if executed speculatively or concurrently.

[REQUEST]
Produce a detection plan for a CodeQL-based static checker that would detect similar pre-patch flaws.
Requirements for the plan:
- High-level detection goal (1–2 lines).
- A numbered list of detection steps (objective, conceptual AST/semantic signals, FP mitigation).
- Types of program elements to target (functions, call sites, allocation sites, condition checks, lock boundaries, function return-value uses, etc.).
- Dataflow/taint patterns to consider (if applicable), described conceptually.
- Minimal test cases to validate the checker (positive/negative examples).
- Estimated effort/priority (low/medium/high) and likely false-positive sources.
- A short "Limitations & Assumptions" block.

OUTPUT FORMAT (produce exactly this structure; no extra text):
1. Plan Summary
{one-line summary}

2. Detection Steps
1) Step 1: {objective — conceptual signals — FP mitigation}
2) Step 2: {objective — conceptual signals — FP mitigation}
...
(narrow to ≤12 steps)

3. Target Elements
- {list of element types to inspect}

4. Dataflow / Taint Considerations
- {conceptual taint/flow rules to track}

5. Validation & Test Cases
- Positive: {brief}
- Negative: {brief}
- Test harness notes: {brief}

6. Estimated Effort & Priority
{low/medium/high}

7. Likely False-Positive Sources & Mitigations
- {list}

8. Limitations & Assumptions
- {explicit missing info or assumptions}

CONSTRAINTS:
- Do not emit any CodeQL, SQL, pseudocode, or query fragments.
- Keep answers evidence-based and reference which provided field supported each major choice (e.g., “based on [PATCH_DIFF] hunk that adds X”).
- Output must be machine-parseable: keep the exact numbered section headings as above.