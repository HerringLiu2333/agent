You are a senior static-analysis engineer and CodeQL design expert.
Task: Based only on the supplied materials, produce a human-readable detection plan (natural-language) for a CodeQL checker that would detect the same class of vulnerability described. DO NOT produce any query code or pseudocode — the output must be purely natural language steps and rationale.

Rules:
1. Only use evidence contained in the sections labeled [PATCH_DESCRIPTION], [PATCH_DIFF], [FUNCTION_CONTENT], and [ROOTCAUSE_ANALYSIS]. Do not invent facts.
2. The plan must be a step-by-step detection strategy in natural language (numbered steps). No code, no query snippets, no regex, no domain-specific language.
3. Each step must state: objective, signals to look for (AST/semantic patterns expressed conceptually), why it maps to the root cause, and how to reduce false positives.
4. Include a short test/validation strategy (what sample cases to run and expected outcomes).
5. List limitations and assumptions (what is Not determinable from inputs).
6. Keep the plan concise: overall ≤ 12 numbered steps and each step ≤ 2 concise sentences. Use bullets where helpful.
7. If information required to design an accurate checker is missing, state it explicitly under "Limitations & Assumptions".

[META]
CVE_NAME: CVE-2025-38254

[INFO]
[PATCH_DESCRIPTION]
    drm/amd/display: Add sanity checks for drm_edid_raw()
    When EDID is retrieved via drm_edid_raw(), it doesn't guarantee to
    return proper EDID bytes the caller wants: it may be either NULL (that
    leads to an Oops) or with too long bytes over the fixed size raw_edid
    array (that may lead to memory corruption).  The latter was reported
    actually when connected with a bad adapter.
    
    Add sanity checks for drm_edid_raw() to address the above corner
    cases, and return EDID_BAD_INPUT accordingly.
    
    Fixes: 48edb2a4256e ("drm/amd/display: switch amdgpu_dm_connector to use struct drm_edid")

[PATCH_DIFF]
    @@ -1029,6 +1029,10 @@ enum dc_edid_status dm_helpers_read_local_edid(
     			return EDID_NO_RESPONSE;
     
     		edid = drm_edid_raw(drm_edid); // FIXME: Get rid of drm_edid_raw()
    +		if (!edid ||
    +		    edid->extensions >= sizeof(sink->dc_edid.raw_edid) / EDID_LENGTH)
    +			return EDID_BAD_INPUT;
    +
     		sink->dc_edid.length = EDID_LENGTH * (edid->extensions + 1);
     		memmove(sink->dc_edid.raw_edid, (uint8_t *)edid, sink->dc_edid.length);

[FUNCTION_CONTENT]
enum dc_edid_status dm_helpers_read_local_edid(
		struct dc_context *ctx,
		struct dc_link *link,
		struct dc_sink *sink)
{
	struct amdgpu_dm_connector *aconnector = link->priv;
	struct drm_connector *connector = &aconnector->base;
	struct i2c_adapter *ddc;
	int retry = 3;
	enum dc_edid_status edid_status;
	const struct drm_edid *drm_edid;
	const struct edid *edid;

	if (link->aux_mode)
		ddc = &aconnector->dm_dp_aux.aux.ddc;
	else
		ddc = &aconnector->i2c->base;

	/* some dongles read edid incorrectly the first time,
	 * do check sum and retry to make sure read correct edid.
	 */
	do {
		drm_edid = dm_helpers_read_acpi_edid(aconnector);
		if (drm_edid)
			drm_info(connector->dev, "Using ACPI provided EDID for %s\n", connector->name);
		else
			drm_edid = drm_edid_read_ddc(connector, ddc);
		drm_edid_connector_update(connector, drm_edid);

		/* DP Compliance Test 4.2.2.6 */
		if (link->aux_mode && connector->edid_corrupt)
			drm_dp_send_real_edid_checksum(&aconnector->dm_dp_aux.aux, connector->real_edid_checksum);

		if (!drm_edid && connector->edid_corrupt) {
			connector->edid_corrupt = false;
			return EDID_BAD_CHECKSUM;
		}

		if (!drm_edid)
			return EDID_NO_RESPONSE;

		edid = drm_edid_raw(drm_edid); // FIXME: Get rid of drm_edid_raw()
		sink->dc_edid.length = EDID_LENGTH * (edid->extensions + 1);
		memmove(sink->dc_edid.raw_edid, (uint8_t *)edid, sink->dc_edid.length);

		/* We don't need the original edid anymore */
		drm_edid_free(drm_edid);

		edid_status = dm_helpers_parse_edid_caps(
						link,
						&sink->dc_edid,
						&sink->edid_caps);

	} while (edid_status == EDID_BAD_CHECKSUM && --retry > 0);

	if (edid_status != EDID_OK)
		DRM_ERROR("EDID err: %d, on connector: %s",
				edid_status,
				aconnector->base.name);
	if (link->aux_mode) {
		union test_request test_request = {0};
		union test_response test_response = {0};

		dm_helpers_dp_read_dpcd(ctx,
					link,
					DP_TEST_REQUEST,
					&test_request.raw,
					sizeof(union test_request));

		if (!test_request.bits.EDID_READ)
			return edid_status;

		test_response.bits.EDID_CHECKSUM_WRITE = 1;

		dm_helpers_dp_write_dpcd(ctx,
					link,
					DP_TEST_EDID_CHECKSUM,
					&sink->dc_edid.raw_edid[sink->dc_edid.length-1],
					1);

		dm_helpers_dp_write_dpcd(ctx,
					link,
					DP_TEST_RESPONSE,
					&test_response.raw,
					sizeof(test_response));

	}

	return edid_status;
}



[ROOTCAUSE_ANALYSIS]
1. CVE Identifier
CVE-2025-38254

2. Vulnerability Type
- Missing input validation leading to NULL pointer dereference
- Out-of-bounds write (buffer overflow) in kernel memory

3. Root Cause Summary
dm_helpers_read_local_edid() used the pointer returned by drm_edid_raw() without validating it and computed a copy length from edid->extensions without verifying it fit into the fixed-size sink->dc_edid.raw_edid buffer. Specifically, the code immediately did:
- edid = drm_edid_raw(drm_edid);
- sink->dc_edid.length = EDID_LENGTH * (edid->extensions + 1);
- memmove(sink->dc_edid.raw_edid, (uint8_t *)edid, sink->dc_edid.length);
This allowed a NULL return to be dereferenced and an excessive extensions value to drive memmove past the destination buffer’s bounds.

4. Kernel Subsystem Analysis
1) Affected Subsystem:
- DRM/AMD display (amdgpu_dm), EDID handling path

2) Pre-Patch Flaw:
- No NULL check on the result of drm_edid_raw()
- No bounds check ensuring (edid->extensions + 1) EDID blocks fit in sink->dc_edid.raw_edid before computing length and copying

3) Trigger Condition:
- drm_edid_raw() returns NULL (e.g., invalid/missing EDID)
- drm_edid_raw() returns an EDID whose extensions field claims too many blocks (e.g., with a bad/malicious adapter), making (extensions + 1) exceed the destination array capacity

4) Impact Mechanism:
- NULL pointer dereference when accessing edid->extensions or copying from a NULL pointer, causing kernel Oops
- Out-of-bounds write in memmove to sink->dc_edid.raw_edid due to oversized length computation, causing kernel memory corruption and potential crash/instability

5. Patch Analysis
1) Fix Approach:
- Defensive validation of the drm_edid_raw() result and the extension count prior to computing the copy length and performing memmove
- Early return with EDID_BAD_INPUT on invalid pointer or oversized EDID

2) Key Code Changes:
- Added:
  if (!edid ||
      edid->extensions >= sizeof(sink->dc_edid.raw_edid) / EDID_LENGTH)
      return EDID_BAD_INPUT;
- This guarantees edid is non-NULL and that (extensions + 1) blocks fit into raw_edid (since extensions < size/EDID_LENGTH ensures (extensions + 1) <= size/EDID_LENGTH)

3) Locking/Concurrency Impact:
- None. The change is purely input validation and early-exit; no locking/ordering or RCU semantics were introduced or altered.

6. Broader Kernel Security Implications
- EDID handling is fed by external hardware and must be treated as untrusted; missing validations can lead to kernel crashes or memory corruption from malformed devices.
- Similar paths using drm_edid_raw() or copying EDID data should be audited for NULL and bounds checks against fixed-size buffers.
- This reinforces the need for strict size checks derived from destination buffer capacity and mandatory NULL checks after helper calls that may fail.

[REQUEST]
Produce a detection plan for a CodeQL-based static checker that would detect similar pre-patch flaws.
Requirements for the plan:
- High-level detection goal (1–2 lines).
- A numbered list of detection steps (objective, conceptual AST/semantic signals, FP mitigation).
- Types of program elements to target (functions, call sites, allocation sites, condition checks, lock boundaries, function return-value uses, etc.).
- Dataflow/taint patterns to consider (if applicable), described conceptually.
- Minimal test cases to validate the checker (positive/negative examples).
- Estimated effort/priority (low/medium/high) and likely false-positive sources.
- A short "Limitations & Assumptions" block.

OUTPUT FORMAT (produce exactly this structure; no extra text):
1. Plan Summary
{one-line summary}

2. Detection Steps
1) Step 1: {objective — conceptual signals — FP mitigation}
2) Step 2: {objective — conceptual signals — FP mitigation}
...
(narrow to ≤12 steps)

3. Target Elements
- {list of element types to inspect}

4. Dataflow / Taint Considerations
- {conceptual taint/flow rules to track}

5. Validation & Test Cases
- Positive: {brief}
- Negative: {brief}
- Test harness notes: {brief}

6. Estimated Effort & Priority
{low/medium/high}

7. Likely False-Positive Sources & Mitigations
- {list}

8. Limitations & Assumptions
- {explicit missing info or assumptions}

CONSTRAINTS:
- Do not emit any CodeQL, SQL, pseudocode, or query fragments.
- Keep answers evidence-based and reference which provided field supported each major choice (e.g., “based on [PATCH_DIFF] hunk that adds X”).
- Output must be machine-parseable: keep the exact numbered section headings as above.