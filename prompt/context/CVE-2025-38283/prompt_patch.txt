You are a senior Linux kernel vulnerability analyst.
Task: Identify the minimal root cause code snippet that directly enabled the vulnerability BEFORE the patch.

Rules:
1. Root cause = flawed or missing logic the patch fixes (missing check, wrong locking, unsafe access, race window, integer/length misuse, etc.).
2. Prefer removed (-) lines or original versions of modified lines. If issue is absence of code, show the surrounding code where it should have been.
3. Output ONLY vulnerable original code (before patch). No explanations.
4. Keep snippet minimal (≈3–25 lines). Preserve original indentation.
5. If multiple disjoint regions are required, separate them with a single blank line.
6. Do NOT include added '+' lines unless absolutely necessary for minimal context.
7. If nothing identifiable: output exactly NO_ROOT_CAUSE_FOUND.
8. Return strictly between the tags below.

[META]
CVE_NAME: CVE-2025-38283

[PATCH_DESCRIPTION]


[PATCH_DIFF]
    @@ -498,6 +491,20 @@ static int vf_qm_load_data(struct hisi_acc_vf_core_device *hisi_acc_vdev,
     	if (migf->total_length < sizeof(struct acc_vf_data))
     		return -EINVAL;
     
    +	if (!vf_data->eqe_dma || !vf_data->aeqe_dma ||
    +	    !vf_data->sqc_dma || !vf_data->cqc_dma) {
    +		dev_info(dev, "resume dma addr is NULL!\n");
    +		hisi_acc_vdev->vf_qm_state = QM_NOT_READY;
    +		return 0;
    +	}
    +
     	qm->eqe_dma = vf_data->eqe_dma;
     	qm->aeqe_dma = vf_data->aeqe_dma;
     	qm->sqc_dma = vf_data->sqc_dma;
    ...
    @@ -1531,6 +1538,7 @@ static int hisi_acc_vfio_pci_migrn_init_dev(struct vfio_device *core_vdev)
     	hisi_acc_vdev->vf_id = pci_iov_vf_id(pdev) + 1;
     	hisi_acc_vdev->pf_qm = pf_qm;
     	hisi_acc_vdev->vf_dev = pdev;
    +	hisi_acc_vdev->vf_qm_state = QM_NOT_READY;
     	mutex_init(&hisi_acc_vdev->state_mutex);
     	mutex_init(&hisi_acc_vdev->open_mutex);

[OUTPUT FORMAT]
<<<ROOT_CAUSE_CODE_START>>>
<root cause original code here>
<<<ROOT_CAUSE_CODE_END>>>