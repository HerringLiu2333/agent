1. CVE Identifier
CVE-2025-38260

2. Vulnerability Type
Improper error handling leading to NULL pointer dereference (Denial of Service)

3. Root Cause Summary
When mounting a btrfs filesystem with a corrupted checksum (csum) tree and the rescue=ibadroots option, load_global_roots_objectid() failed to propagate the error from read_tree_root_path() into ret if IGNOREBADROOTS was set. The pre-patch logic “if (IS_ERR(root)) { if (!btrfs_test_opt(fs_info, IGNOREBADROOTS)) ret = PTR_ERR(root); break; }” left ret as 0 while found=true, causing the end-of-function error handling for the csum tree to be skipped. As a result, BTRFS_FS_STATE_NO_DATA_CSUMS was not set and the csum root remained NULL. Subsequent read paths performed checksum lookups (btrfs_lookup_bio_sums -> btrfs_lookup_csum) and dereferenced the NULL csum root, crashing the kernel.

4. Kernel Subsystem Analysis
1) Affected Subsystem:
Btrfs filesystem (fs/btrfs), disk-io global root loading and checksum tree handling

2) Pre-Patch Flaw:
In load_global_roots_objectid(), error from read_tree_root_path() was not recorded in ret when IGNOREBADROOTS (rescue=ibadroots) was enabled, due to the conditional:
“if (IS_ERR(root)) {
    if (!btrfs_test_opt(fs_info, IGNOREBADROOTS))
        ret = PTR_ERR(root);
    break;
}”
This caused subsequent logic that depends on ret to skip csum-tree-specific error handling (including setting BTRFS_FS_STATE_NO_DATA_CSUMS).

3) Trigger Condition:
- Filesystem with a corrupted csum tree root.
- Mounted with rescue=ibadroots (IGNOREBADROOTS option active), leading read_tree_root_path() to fail but ret remaining 0.
- Any data read path invoking checksum lookup (e.g., file read/readahead) after mount.

4) Impact Mechanism:
The csum root pointer remained NULL and the filesystem state flag to disable data checksums was not set. Later calls to btrfs_lookup_csum during I/O assumed a valid csum root and dereferenced NULL, causing a general protection fault and kernel crash (DoS).

5. Patch Analysis
1) Fix Approach:
Ensure error propagation regardless of IGNOREBADROOTS: always set ret = PTR_ERR(root) when read_tree_root_path() fails, so the end-of-function csum-tree error handling runs and flags are set appropriately.

2) Key Code Changes:
In fs/btrfs/disk-io.c: load_global_roots_objectid():
- Replaced conditional assignment with unconditional error propagation:
  Pre-patch: “if (!btrfs_test_opt(fs_info, IGNOREBADROOTS)) ret = PTR_ERR(root);”
  Post-patch: “ret = PTR_ERR(root);”
This guarantees ret reflects the failure for the csum root and triggers the code path that sets BTRFS_FS_STATE_NO_DATA_CSUMS.

3) Locking/Concurrency Impact:
No locking or concurrency changes. The patch solely adjusts error handling and state propagation; no modifications to lock acquisition/release or ordering.

6. Broader Kernel Security Implications
Proper error propagation in filesystem mount paths is critical to prevent kernel crashes from malformed or corrupted on-disk structures. This fix prevents unprivileged users from causing DoS by mounting or accessing a corrupted btrfs image with rescue options. It improves robustness by ensuring the read path does not attempt checksum lookups when the csum tree is invalid, reducing exposure to fuzzing-induced crashes and strengthening overall filesystem error handling.