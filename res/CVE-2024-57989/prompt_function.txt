1. CVE Identifier
CVE-2024-57989

2. Vulnerability Type
NULL pointer dereference due to unchecked memory allocation failure (Denial of Service)

3. Root Cause Summary
mt7925_change_vif_links() allocates per-link structures with devm_kzalloc() when adding new links (non-default case) but does not check for NULL. The function immediately dereferences these pointers (e.g., “mconf->link_id = link_id;” and “mlink->wcid.link_id = link_id;”), causing a NULL pointer dereference if allocation fails. The patch adds explicit NULL checks for both allocations and returns an error code on failure, preventing the dereference.

4. Kernel Subsystem Analysis
1) Affected Subsystem:
MediaTek mt76 mt7925 Wi-Fi driver (drivers/net/wireless/mediatek/mt76/mt7925/main.c), function mt7925_change_vif_links()

2) Pre-Patch Flaw:
In the “add” path for new links (for_each_set_bit over “add”), the code uses devm_kzalloc() to allocate mt792x_bss_conf (mconf) and mt792x_link_sta (mlink) but does not validate the returned pointers before using them. It then writes to these structures and propagates them via RCU pointers and to mt7925_mac_link_bss_add() without ensuring they are non-NULL.

3) Trigger Condition:
- new_links introduces additional links (add = new_links & ~old_links) and old_links != 0 (so allocations are attempted).
- Memory pressure or allocator failure causes devm_kzalloc() to return NULL for mconf or mlink.

4) Impact Mechanism:
The code dereferences mconf and mlink immediately after allocation to set fields and later passes them to other functions, leading to a NULL pointer dereference and kernel crash/oops. This results in denial of service for the system or the Wi-Fi subsystem, potentially triggered by user-space operations that change VIF links under low-memory conditions.

5. Patch Analysis
1) Fix Approach:
Input validation and error handling: after allocating mconf and mlink, the function now checks for NULL and returns -ENOMEM on failure, preventing subsequent dereferences.

2) Key Code Changes:
In mt7925_change_vif_links() “add” loop:
- Added:
  “if (!mconf || !mlink)
      return -ENOMEM;”
This directly addresses the missing NULL checks for devm_kzalloc() results.

3) Locking/Concurrency Impact:
No locking or RCU usage changes are present in the provided diff; the patch solely introduces allocation failure checks. The overall mutex acquisition/release and RCU assignments remain unchanged based on available materials. Any additional locking side-effects are Unknown/Not determinable from the given diff.

6. Broader Kernel Security Implications
Unchecked allocation failures in driver code can convert recoverable low-memory situations into kernel crashes, enabling denial of service. Ensuring all devm_kzalloc() results are validated before use is critical for robustness, especially in code paths influenced by user-space configuration changes. This fix improves the stability of multi-link operations in the Wi-Fi stack and reduces attack surface related to memory pressure-induced failures.