1. CVE Identifier
CVE-2025-38284

2. Vulnerability Type
Null pointer dereference due to incorrect initialization ordering and unsafe MMIO/DBI access

3. Root Cause Summary
The driver configured the manual DAC bit via a DBI/MMIO helper before the PCI BAR was mapped, causing dereference of a NULL mmap pointer. Specifically, rtw89_pci_cfg_dac() called rtw89_pci_config_byte_set(rtwdev, RTW89_PCIE_L1_CTRL, RTW89_PCIE_BIT_EN_64BITS) while rtwpci->mmap had not yet been set by pci_iomap(). In rtw89_pci_setup_mapping(), the call to rtw89_pci_cfg_dac(rtwdev) occurs immediately after enabling 36-bit DMA and before rtwpci->mmap = pci_iomap(...), leading to a page fault when accessing unmapped registers. There was no validation of rtwpci->mmap or use of the safe PCI config-space API at this stage, and no fallback to 32-bit DMA if the proprietary bit could not be set safely. This resulted in an OOPS during device probe/hotplug or resume when manual DAC was required.

4. Kernel Subsystem Analysis
1) Affected Subsystem:
Realtek rtw89 PCI Wi-Fi driver (DMA/DAC configuration path), drivers/net/wireless/realtek/rtw89/pci

2) Pre-Patch Flaw:
rtw89_pci_cfg_dac() wrote to a proprietary register via DBI/MMIO using rtw89_pci_config_byte_set() before the BAR was mapped, relying on rtwpci->mmap being valid. In rtw89_pci_setup_mapping(), the sequence was:
- “rtw89_pci_cfg_dac(rtwdev);”
- followed later by “rtwpci->mmap = pci_iomap(pdev, bar_id, resource_len);”
No check ensured that mmap was non-NULL, nor was the PCI config API used, despite DBI being inaccessible until mapping exists.

3) Trigger Condition:
When rtw89_pci_chip_is_manual_dac(rtwdev) returns true and the upstream bridge is deemed DAC-compatible, the driver sets a 36-bit DMA mask and sets rtwpci->enable_dac = true, then immediately calls rtw89_pci_cfg_dac() before pci_iomap() runs. This can occur during probe/hotplug (pciehp path) or resume. The NULL rtwpci->mmap leads to an invalid MMIO write to address 0x1090, as evidenced by the provided OOPS trace with RIP in rtw89_pci_ops_write16.

4) Impact Mechanism:
A supervisor-mode page fault occurs due to writing through a NULL/unmapped BAR, crashing the kernel thread (irq/pciehp) and producing an OOPS. This constitutes a denial-of-service and system instability during device enumeration or power management events. No locking or concurrency primitives are implicated; the fault is purely due to premature MMIO access.

5. Patch Analysis
1) Fix Approach:
The patch reworks DAC configuration to use only the PCI config-space API (pci_read_config_byte/pci_write_config_byte), which is safe before BAR mapping. It introduces error handling: if config-space access fails, the driver falls back to a 32-bit DMA mask rather than attempting unsafe DBI/MMIO access. The call sites are guarded with a ‘force’ parameter and enable_dac checks to ensure DAC configuration is attempted at the correct time and only when necessary.

2) Key Code Changes:
- rtw89_pci_cfg_dac() signature changed to return int and accept ‘bool force’; it now reads RTW89_PCIE_L1_CTRL via pci_read_config_byte and sets RTW89_PCIE_BIT_EN_64BITS via pci_write_config_byte.
- In rtw89_pci_setup_mapping(), after successfully setting DMA_BIT_MASK(36), the driver calls rtw89_pci_cfg_dac(rtwdev, true) and sets enable_dac only if that succeeds; otherwise it falls back to DMA_BIT_MASK(32). The flow label changed from no_dac to try_dac_done, ensuring pci_iomap() happens after any config-space DAC attempt, not dependent on DBI.
- In rtw89_pci_basic_cfg(), resume path calls rtw89_pci_cfg_dac(rtwdev, false), respecting enable_dac gating and using safe config-space access.

3) Locking/Concurrency Impact:
No locking primitives were added or altered. The patch eliminates the unsafe early MMIO/DBI access that previously executed in hotplug/IRQ contexts, thereby preventing a crash without changing concurrency or ordering beyond safe re-sequencing of configuration operations.

6. Broader Kernel Security Implications
This fix underscores the necessity of avoiding MMIO/DBI access before BARs are mapped and preferring PCI config-space for early device configuration. It adds robust error handling and graceful fallback to a safer DMA mode when proprietary bits are not accessible, improving stability under hotplug and resume. Other drivers with similar manual hardware configuration stages should audit initialization order and access methods to prevent NULL dereferences and kernel faults. Ensuring that device-specific register programming is deferred until mappings are valid or performed via universally safe interfaces reduces systemic DoS risks.