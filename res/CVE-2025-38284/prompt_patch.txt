1. CVE Identifier
CVE-2025-38284

2. Vulnerability Type
NULL pointer dereference leading to kernel crash (DoS) due to unsafe MMIO access prior to BAR mapping; incorrect initialization/order of hardware register access.

3. Root Cause Summary
The driver configured the deviceâ€™s manual DAC mode by writing a chip-specific bit via a DBI/MMIO path before the PCI BAR was mapped, using rtw89_pci_config_byte_set(). With rtwpci->mmap still NULL during probe/resume, the MMIO write dereferenced a NULL pointer, causing a page fault. The code failed to use the PCI config space API for RTW89_PCIE_L1_CTRL and lacked checks/fallbacks when the DBI/MMIO interface was inaccessible at that time.

4. Kernel Subsystem Analysis
1) Affected Subsystem:
Realtek rtw89 PCI Wi-Fi driver (drivers/net/wireless/realtek/rtw89), PCI DMA/bridge configuration path.

2) Pre-Patch Flaw:
- In rtw89_pci_cfg_dac(), the driver directly called rtw89_pci_config_byte_set(rtwdev, RTW89_PCIE_L1_CTRL, RTW89_PCIE_BIT_EN_64BITS), which performs MMIO/DBI access relying on rtwpci->mmap.
- This function was invoked from rtw89_pci_setup_mapping() after successfully setting a 36-bit DMA mask but before pci_iomap() established rtwpci->mmap.
- No NULL-checks or ordering guarantees prevented MMIO access prior to mapping; no fallback if DBI was inaccessible via mmap.

3) Trigger Condition:
- Probe or hotplug path where rtw89_pci_setup_mapping() attempts to enable 36-bit DMA on DAC-compatible bridges, and rtw89_pci_chip_is_manual_dac(rtwdev) is true.
- rtw89_pci_cfg_dac() is called while rtwpci->mmap is still NULL, resulting in an MMIO write to an unmapped address.
- Also triggered on resume via rtw89_pci_basic_cfg() calling rtw89_pci_cfg_dac() before confirming accessible path.

4) Impact Mechanism:
- The DBI/MMIO write dereferences a NULL mmap pointer, causing a supervisor-mode page fault and kernel Oops (seen in RIP: rtw89_pci_ops_write16, call stack through rtw89_pci_cfg_dac during probe).
- Results in denial of service via kernel crash in irq/pciehp thread during device hotplug/probe/resume.

5. Patch Analysis
1) Fix Approach:
- Restrict manual DAC configuration to the PCI config space API only; avoid DBI/MMIO access entirely when configuring RTW89_PCIE_L1_CTRL.
- Introduce error handling and a force flag: attempt DAC config via PCI config API, and if it fails, fall back to 32-bit DMA and do not set enable_dac.
- Adjust control flow to perform DAC configuration attempts safely before BAR mapping and to skip reconfiguration when not needed.

2) Key Code Changes:
- rtw89_pci_cfg_dac signature changed to return int and take bool force; gating on rtwpci->enable_dac unless forced.
- Replace rtw89_pci_config_byte_set(...) with pci_read_config_byte(...) and pci_write_config_byte(...), setting RTW89_PCIE_BIT_EN_64BITS via PCI config space.
- In rtw89_pci_setup_mapping():
  - Change the label from no_dac to try_dac_done and only set rtwpci->enable_dac = true after a successful rtw89_pci_cfg_dac(..., true); otherwise fall back to 32-bit DMA.
  - Defer pci_iomap() to after the DAC configuration attempt, but now DAC config no longer depends on mmap.
- In rtw89_pci_basic_cfg():
  - Call rtw89_pci_cfg_dac(rtwdev, false) to avoid unnecessary/unsafe writes unless DAC was enabled.

3) Locking/Concurrency Impact:
- No locking primitives were added/removed; the fix addresses initialization ordering and access method, eliminating unsafe pre-mapping MMIO.
- Concurrency implications are minimal; the removal of MMIO before mapping reduces risk of crashes in hotplug/irq contexts without altering locking.

6. Broader Kernel Security Implications
- Reinforces the necessity to avoid MMIO/DBI access before PCI BARs are mapped; use PCI config APIs for early configuration or add proper ordering checks.
- Proper error handling and fallback paths prevent driver-induced kernel Oops during hotplug/probe/resume, improving system robustness.
- The change reduces attack surface for local DoS via device plug/resume sequences in tainted or out-of-tree module scenarios by eliminating NULL-deref crashes.