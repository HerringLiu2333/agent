1. CVE Identifier
CVE-2025-38486

2. Vulnerability Type
Out-of-bounds array write and improper index handling (memory corruption), plus logic error overwriting TX configuration with RX configuration. Resulting in kernel panic (denial-of-service).

3. Root Cause Summary
The pre-patch implementation of qcom_swrm_set_channel_map wrote channel masks into ctrl->pconfig[] starting at index 0 and without any bounds checking, despite pconfig[0] being reserved/unused and the array being smaller than the potential number of TX slots. Specifically, it performed:
- for TX: “for (i = 0; i < tx_num; i++) ctrl->pconfig[i].ch_mask = tx_slot[i];”
- for RX: “for (i = 0; i < rx_num; i++) ctrl->pconfig[i].ch_mask = rx_slot[i];”
This introduced multiple defects: writing to pconfig[0]; possible overflow when tx_num=SLIM_MAX_TX_PORTS (16) while ctrl->pconfig has only QCOM_SDW_MAX_PORTS + 1 (15) elements; and overwriting previously written TX configuration with RX configuration. These unsafe writes corrupted kernel memory and triggered a BRK exception and panic during board initialization.

4. Kernel Subsystem Analysis
1) Affected Subsystem:
SoundWire Qualcomm ASoC driver (soundwire: qcom), specifically the DAI ops and channel mapping in soundwire_qcom.

2) Pre-Patch Flaw:
qcom_swrm_set_channel_map directly wrote tx_slot[] and rx_slot[] into ctrl->pconfig[i].ch_mask with i starting at 0, no capacity checks against ctrl->pconfig[], and no separation between TX and RX mappings. It violated the invariant that pconfig[0] must remain unused and allowed i to exceed the array length (QCOM_SDW_MAX_PORTS + 1) when tx_num/rx_num were larger.

3) Trigger Condition:
Invocation of snd_soc_dai_set_channel_map during DAI initialization (sdm845_dai_init) with tx_num up to SLIM_MAX_TX_PORTS (16) and corresponding slot arrays, causing the TX loop to write beyond ctrl->pconfig[] bounds and to pconfig[0]. Any subsequent RX mapping call further overwrote the same array entries.

4) Impact Mechanism:
Out-of-bounds writes and reserved-index writes corrupt adjacent kernel memory within the driver’s control structure, leading to a fatal exception (BRK) and kernel panic, as observed on Dragonboard 845c (sdm845). Overwriting TX with RX also destroys configuration state, contributing to instability.

5. Patch Analysis
1) Fix Approach:
Full revert of the faulty API addition. The patch removes qcom_swrm_set_channel_map and unregisters the .set_channel_map DAI op, eliminating the unsafe code path.

2) Key Code Changes:
- Deleted qcom_swrm_set_channel_map implementation.
- Removed “.set_channel_map = qcom_swrm_set_channel_map,” from qcom_swrm_pdm_dai_ops, preventing snd_soc_dai_set_channel_map from reaching this driver.

3) Locking/Concurrency Impact:
None. The vulnerability was due to incorrect memory access and logic; no locking or concurrency primitives were involved or changed by the revert.

6. Broader Kernel Security Implications
Kernel drivers must rigorously validate indices and lengths, preserve invariants (e.g., reserved array slots), and avoid conflating directional configurations to prevent memory corruption. Exposing unsafe DAI ops can allow user space or topology configuration to trigger kernel crashes, undermining system stability. The revert reduces attack surface; any future reintroduction must add strict bounds checks, respect pconfig[0] being unused, maintain separate TX/RX mappings, and ensure array size alignment with SLIM/SDW port counts.