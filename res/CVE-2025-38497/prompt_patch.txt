1. CVE Identifier
{{CVE-2025-38497}}

2. Vulnerability Type
{{Out-of-bounds read (OOB read) due to missing zero-length input validation in sysfs/configfs store handlers}}

3. Root Cause Summary
{{Both webusb_landingPage_store() and os_desc_qw_sign_store() unconditionally accessed page[l - 1] to strip a trailing newline without first ensuring that len (and thus l) was greater than zero. Writing an empty string (len == 0) caused page[-1] to be read, resulting in an OOB read in kernel context.}}

4. Kernel Subsystem Analysis
1) Affected Subsystem:
{{USB gadget configfs (WebUSB and OS descriptors attributes)}}
2) Pre-Patch Flaw:
{{In webusb_landingPage_store(), l is set to len, then page[l - 1] is read; in os_desc_qw_sign_store(), l = min_t(int, len, OS_STRING_QW_SIGN_LEN >> 1) followed by page[l - 1] access. Neither function checked len > 0 before this read.}}
3) Trigger Condition:
{{A user writes an empty string to the configfs/sysfs attributes "landingPage" or "qw_sign" (len == 0).}}
4) Impact Mechanism:
{{The code reads page[-1], a byte preceding the provided buffer, causing an out-of-bounds read which can lead to a kernel fault/Oops or undefined behavior when the buffer starts at a page boundary.}}

5. Patch Analysis
1) Fix Approach:
{{Early return on zero-length input to avoid accessing page[l - 1].}}
2) Key Code Changes:
{{Inserted “if (!len) return len;” at the start of both webusb_landingPage_store() (around line 1065) and os_desc_qw_sign_store() (around line 1188), before any dereference of page[l - 1].}}
3) Locking/Concurrency Impact:
{{None. The patch only adds input-length validation; no locks or ordering were modified.}}

6. Broader Kernel Security Implications
{{Sysfs/configfs store handlers must defensively validate lengths before indexing buffers, especially when stripping trailing characters. This fix eliminates a trivial OOB read path in a sensitive kernel context, reducing the risk of crashes from malformed inputs and reinforcing safe input handling patterns across similar attribute handlers.}}