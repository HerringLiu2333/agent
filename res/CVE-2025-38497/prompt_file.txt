1. CVE Identifier
CVE-2025-38497

2. Vulnerability Type
Out-of-bounds read (OOB read) in configfs attribute store handlers

3. Root Cause Summary
The store handlers for the configfs attributes webusb_landingPage and os_desc_qw_sign dereference page[l - 1] to strip a trailing newline without first validating that the input length len (and derived l) is greater than zero. When an empty string is written, l becomes 0 and page[-1] is read, leading to an OOB read.

4. Kernel Subsystem Analysis
1) Affected Subsystem:
USB gadget configfs (drivers/usb/gadget/configfs), specifically WebUSB and Microsoft OS descriptor attributes

2) Pre-Patch Flaw:
- In webusb_landingPage_store(): “if (page[l - 1] == '\n')” is evaluated immediately after “int l = len;” with no check for len == 0.
- In os_desc_qw_sign_store(): after “l = min_t(int, len, OS_STRING_QW_SIGN_LEN >> 1);” it performs “if (page[l - 1] == '\n')” without ensuring l > 0.
These unguarded accesses to page[l - 1] cause OOB reads when len == 0.

3) Trigger Condition:
Writing an empty string (zero-length write) to either the "landingPage" or "qw_sign" configfs attributes.

4) Impact Mechanism:
Reading one byte before the start of the provided buffer (page[-1]) can trigger a kernel Oops/KASAN violation or other undefined behavior, resulting in denial of service. Although the value is only compared against '\n', the read itself is out-of-bounds.

5. Patch Analysis
1) Fix Approach:
Validate and early-return on zero-length input to prevent accessing page[l - 1]. The handlers now immediately return len when len == 0, avoiding any subsequent dereference.

2) Key Code Changes:
- In webusb_landingPage_store():
  Added:
  “if (!len) return len;”
  before checking “if (page[l - 1] == '\n')”.
- In os_desc_qw_sign_store():
  Added:
  “if (!len) return len;”
  before computing l and checking “if (page[l - 1] == '\n')”.

3) Locking/Concurrency Impact:
No locking changes. The patch adds an early exit prior to taking gi->lock, which is safe and does not alter existing lock/unlock ordering or concurrency behavior.

6. Broader Kernel Security Implications
This fix reinforces the necessity of robust input validation in sysfs/configfs store handlers, especially when manipulating indices relative to input length. Similar patterns elsewhere should be reviewed to ensure zero-length inputs are safely handled before accessing page[len - 1]. Preventing OOB reads improves kernel stability and mitigates trivial user-triggered DoS vectors.