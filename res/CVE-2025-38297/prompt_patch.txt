1. CVE Identifier
CVE-2025-38297

2. Vulnerability Type
Division-by-zero leading to kernel crash (Denial of Service)

3. Root Cause Summary
em_compute_costs() assumed that em_perf_state::performance was initialized for all devices, but em_init_performance() initializes it only for CPU devices. When invoked for non-CPU devices, table[i].performance remained zero, and the cost calculation divided by this value, causing a division-by-zero fault.

4. Kernel Subsystem Analysis
1) Affected Subsystem:
Power Management (PM) â€“ Energy Model (EM), used by Energy Aware Scheduling (EAS)

2) Pre-Patch Flaw:
em_compute_costs() executed the cost computation loop for any device type without verifying that the device is a CPU, thereby using table[i].performance as a divisor even when it was not initialized (zero) for non-CPU devices.

3) Trigger Condition:
Calling em_compute_costs(dev, ...) with dev being a non-CPU device; prior em_init_performance() did not set performance for such devices.

4) Impact Mechanism:
Division-by-zero during cost computation triggers a kernel divide-error exception, leading to an oops/panic and denial of service.

5. Patch Analysis
1) Fix Approach:
Add a device-type guard to skip cost computation unless the device is a CPU, preventing the division-by-zero on uninitialized performance values.

2) Key Code Changes:
- In em_compute_costs():
  - Inserted:
    - Comment: "This is needed only for CPUs and EAS skip other devices"
    - if (!_is_cpu_device(dev)) return 0;
  - This early return precedes the cost computation loop.

3) Locking/Concurrency Impact:
None; the change is a simple control-flow guard with no locking or ordering modifications.

6. Broader Kernel Security Implications
This fix hardens the EM framework against misuse by non-CPU devices, preventing kernel crashes from invalid assumptions about per-state initialization. Ensuring device-type validation in shared PM helpers reduces the risk of similar DoS conditions when generic code is invoked by heterogeneous devices.