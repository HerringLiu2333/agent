1. CVE Identifier
CVE-2025-38297

2. Vulnerability Type
Arithmetic error (division-by-zero) causing kernel crash/Denial-of-Service

3. Root Cause Summary
em_compute_costs() unconditionally divides by table[i].performance in the non-artificial cost path. For non-CPU devices, table[i].performance is not initialized by em_init_performance(), so performance can be zero, leading to a division-by-zero when computing “cost = power_res / table[i].performance;”. The pre-patch logic lacked both a device-type gate and a zero/initialization check on performance.

4. Kernel Subsystem Analysis
1) Affected Subsystem:
Power Management (PM), Energy Model (EM), used by Energy-Aware Scheduling (EAS)

2) Pre-Patch Flaw:
em_compute_costs() assumes table[i].performance is valid for all devices and performs a division in the non-artificial path without verifying non-CPU device suitability or performance being non-zero/initialized. Specifically, in the else branch it executes “cost = power_res / table[i].performance;” without guarding against zero.

3) Trigger Condition:
Invoking em_compute_costs() for a non-CPU device where cb->get_cost is NULL or EM_PERF_DOMAIN_ARTIFICIAL is not set, causing the function to take the default division path with table[i].performance left uninitialized (zero).

4) Impact Mechanism:
A division-by-zero in kernel space triggers an exception/oops leading to a kernel crash during EM cost computation, resulting in denial-of-service during device initialization or scheduler energy model setup.

5. Patch Analysis
1) Fix Approach:
Introduce an early return for non-CPU devices, ensuring the cost computation logic (used only for CPUs/EAS) is skipped and thus avoiding the division-by-zero scenario.

2) Key Code Changes:
- Added at the start of em_compute_costs():
  “if (!_is_cpu_device(dev)) return 0;”
- No changes to the division logic; the guard prevents reaching the division for non-CPU devices.

3) Locking/Concurrency Impact:
None. The patch only adds an early-exit control-flow guard; no locks or synchronization primitives are introduced or modified.

6. Broader Kernel Security Implications
By restricting EM cost calculations to CPU devices, the patch prevents crashes that could be triggered via non-CPU device registration or probing paths, improving system stability and reducing denial-of-service risk. It underscores the need for device-type gating and input validation before performing arithmetic operations in shared PM/EAS infrastructure.