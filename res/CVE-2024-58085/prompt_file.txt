1. CVE Identifier
CVE-2024-58085

2. Vulnerability Type
Improper input handling causing uncontrolled large allocation attempts and kernel allocator warning emission (log spam/DoS via warning).

3. Root Cause Summary
In security/tomoyo/common.c, tomoyo_write_control() accumulates user-supplied input until a newline and doubles the write buffer when full, using kzalloc(len, GFP_NOFS) with no upper bound or suppression of allocator warnings. With extremely long lines (no newline), len can grow beyond allocator limits, causing the slab allocator to emit “too large allocation” warnings even though the code handles allocation failure by returning -ENOMEM. The missing NOWARN allocation flag and absence of practical line-length validation allowed user-controlled inputs to trigger repeated large allocation warnings, leading to kernel log noise and potential denial-of-service via warning spam.

4. Kernel Subsystem Analysis
1) Affected Subsystem:
TOMOYO LSM policy control interfaces in security/tomoyo/common.c (tomoyo_write_control).

2) Pre-Patch Flaw:
tomoyo_write_control() grows head->write_buf when head->w.avail >= head->writebuf_size - 1 by kzalloc(len, GFP_NOFS) with len = head->writebuf_size * 2, without bounding len or suppressing allocator warnings. This allows an arbitrarily long input line (no '\n') to trigger repeated buffer expansion attempts that eventually exceed KMALLOC_MAX_SIZE, provoking allocator warnings.

3) Trigger Condition:
A userspace write() to /sys/kernel/security/tomoyo/* interfaces handled by tomoyo_write_control(), supplying a very long buffer with no newline, causing head->w.avail to continuously increase and the function to repeatedly double the write buffer.

4) Impact Mechanism:
When len grows large, kzalloc() attempts exceed slab limits and the allocator emits “too large allocation” warnings; the function then returns -ENOMEM. The warnings can be triggered repeatedly, flooding kernel logs and consuming CPU/resources processing warnings, enabling a warning-based denial-of-service.

5. Patch Analysis
1) Fix Approach:
Suppress allocator warnings for these reallocation attempts by adding __GFP_NOWARN to the kzalloc flags, relying on -ENOMEM handling for oversized requests and avoiding KMALLOC_MAX_SIZE checks.

2) Key Code Changes:
In tomoyo_write_control(), the growth-path allocation:
- Changed from: char *cp = kzalloc(len, GFP_NOFS);
- To:           char *cp = kzalloc(len, GFP_NOFS | __GFP_NOWARN);
No other logic or bounds checks were added.

3) Locking/Concurrency Impact:
No changes to locking. tomoyo_write_control() continues to run under head->io_sem (mutex) and the TOMOYO read lock; the patch only modifies allocation flags and does not alter ordering or synchronization.

6. Broader Kernel Security Implications
The change prevents user-controlled inputs from generating allocator warnings, reducing attack surface for kernel log flooding and spurious alerts. While large writes can still result in -ENOMEM, TOMOYO’s policy update paths are gated by tomoyo_manager() for most interfaces, limiting who can trigger growth, though exact permissions for all endpoints are not determinable from the provided context. The fix prioritizes operational stability and signal-to-noise in kernel diagnostics without introducing new memory or concurrency risks.