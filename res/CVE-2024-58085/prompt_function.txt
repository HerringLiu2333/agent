1. CVE Identifier
CVE-2024-58085

2. Vulnerability Type
Denial of Service via user-triggerable allocator WARN splat (Improper input handling causing large allocation attempts)

3. Root Cause Summary
tomoyo_write_control() grows its write buffer by doubling when reading a line without a newline, and attempts user-controlled large allocations using kzalloc(len, GFP_NOFS) without suppressing allocator warnings. An unprivileged user can feed an extremely long line (no newline), driving len beyond practical limits and causing the allocator to emit “too large allocation” warnings. The missing __GFP_NOWARN flag allows these warnings to be emitted repeatedly, potentially leading to kernel log flooding or system panic when panic_on_warn is enabled. The patch adds __GFP_NOWARN to the allocation to prevent user-controlled warning emission while still returning -ENOMEM on failure.

4. Kernel Subsystem Analysis
1) Affected Subsystem:
Linux Security Module (LSM) TOMOYO, file security/tomoyo/common.c

2) Pre-Patch Flaw:
In tomoyo_write_control(), the buffer expansion path allocates with kzalloc(len, GFP_NOFS) as len doubles for long lines, with no suppression of allocator warnings. This allows a user to trigger “too large allocation” warnings from the page allocator by sending excessively long input without a newline.

3) Trigger Condition:
Write to TOMOYO control interface a very long line lacking a newline, causing repeated buffer growth attempts: when head->w.avail >= head->writebuf_size - 1, len = head->writebuf_size * 2; char *cp = kzalloc(len, GFP_NOFS); This eventually hits large allocations that the allocator warns about.

4) Impact Mechanism:
Allocator emits warnings on failure for large allocations; users can repeatedly trigger these warnings, resulting in kernel log flooding or system panic under panic_on_warn, constituting a denial-of-service.

5. Patch Analysis
1) Fix Approach:
Suppress allocator warnings for the user-controlled large allocation by adding __GFP_NOWARN to kzalloc flags, maintaining failure behavior (return -ENOMEM) without generating WARN splats.

2) Key Code Changes:
In tomoyo_write_control():
- Pre-patch: char *cp = kzalloc(len, GFP_NOFS);
- Post-patch: char *cp = kzalloc(len, GFP_NOFS | __GFP_NOWARN);
No other logic or length checks were added or removed in the provided hunk.

3) Locking/Concurrency Impact:
No changes to locking or concurrency. Existing mutex_lock_interruptible(&head->io_sem) and tomoyo_read_lock()/tomoyo_read_unlock() remain unchanged; the patch only alters allocation flags.

6. Broader Kernel Security Implications
Suppressing allocator warnings prevents unprivileged users from inducing kernel WARN splats via TOMOYO control writes, reducing the risk of log flooding and panic-on-warn triggered reboots. This improves robustness of LSM control pathways against user-triggered DoS vectors while preserving correct error handling (-ENOMEM) for oversized inputs.