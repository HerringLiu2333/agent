1. CVE Identifier
CVE-2024-58085

2. Vulnerability Type
Denial of Service (resource/log flooding due to unbounded buffer growth and large allocations)

3. Root Cause Summary
tomoyo_write_control() dynamically grows its write buffer by doubling head->writebuf_size and allocating a new buffer with kzalloc(len, GFP_NOFS) when head->w.avail >= head->writebuf_size - 1. There was no upper bound on the line length, so writing a very long line without a newline could drive len beyond typical safe sizes and trigger the kernel’s “too large allocation” warnings. The pre-patch logic neither capped the allocation size nor suppressed noisy warn_alloc emissions for such growth attempts. This allows repeated large allocations (and failures) to spam kernel logs and impose memory pressure.

4. Kernel Subsystem Analysis
1) Affected Subsystem:
TOMOYO Linux Security Module (security/tomoyo), control interface handling in security/tomoyo/common.c

2) Pre-Patch Flaw:
Unbounded buffer growth in tomoyo_write_control() using kzalloc(len, GFP_NOFS) with len = head->writebuf_size * 2, lacking a maximum cap or warning suppression. Large allocation attempts due to excessively long input lines cause kernel allocation warnings.

3) Trigger Condition:
Providing a very long line to the TOMOYO control interface without a newline, causing repeated “avail >= writebuf_size - 1” conditions and buffer doubling until allocations exceed typical thresholds (e.g., >32KB, potentially >KMALLOC_MAX_SIZE), which produces “too large allocation” warnings.

4) Impact Mechanism:
Repeated oversized allocations emit kernel warnings and can lead to -ENOMEM, enabling log flooding and potential resource exhaustion that degrades system performance. Privilege requirements for reaching this path are unknown/not determinable from the provided materials.

5. Patch Analysis
1) Fix Approach:
Suppress large-allocation warnings by adding __GFP_NOWARN to the kzalloc flags, relying on natural allocation failure (-ENOMEM) for excessively long lines rather than distinguishing over-32KB versus over-KMALLOC_MAX_SIZE.

2) Key Code Changes:
In tomoyo_write_control(), change kzalloc(len, GFP_NOFS) to kzalloc(len, GFP_NOFS | __GFP_NOWARN), preventing warn_alloc emissions during buffer growth.

3) Locking/Concurrency Impact:
None. The change is limited to allocation flags; no locking or ordering adjustments were made.

6. Broader Kernel Security Implications
Suppressing warn_alloc in this control path prevents attackers or fuzzers from creating warning storms that can clutter logs, impair observability, or consume system resources processing log output. While the change reduces log-based DoS potential, it does not add an explicit upper bound on input length; overly long inputs still fail with -ENOMEM. This emphasizes the importance of controlling user input lengths in privileged interfaces and minimizing noisy failure modes in kernel code paths.