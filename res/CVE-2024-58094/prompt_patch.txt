1. CVE Identifier
CVE-2024-58094

2. Vulnerability Type
Improper state validation leading to NULL pointer dereference and kernel crash (DoS) during truncate on a read-only JFS filesystem.

3. Root Cause Summary
jfs_truncate_nolock() did not check whether the inode/filesystem was read-only before proceeding with truncate-related journaling/commit logic. On read-only mounts, the JFS journal/log pointer is NULL, so continuing into transactional cleanup (e.g., txEnd()) dereferenced a NULL log pointer, causing a crash. The patch adds isReadOnly(ip) to the early-return condition, ensuring a safe truncate path using COMMIT_WMAP that does not perform write/journal operations on read-only filesystems.

4. Kernel Subsystem Analysis
1) Affected Subsystem:
JFS filesystem (fs/jfs), truncate/journaling path in jfs_truncate_nolock().

2) Pre-Patch Flaw:
jfs_truncate_nolock() only checked test_cflag(COMMIT_Nolink, ip) and lacked a read-only check, allowing a truncate path that initiates transactional/journal operations even when the filesystem is read-only. In the read-only case, JFS_SBI(tblk->sb)->log is NULL, and subsequent transaction completion (txEnd()) assumes a valid log.

3) Trigger Condition:
Calling jfs_truncate_nolock() on a read-only JFS filesystem, e.g., via the sequence block_write_begin() -> jfs_write_failed() -> jfs_truncate() -> jfs_truncate_nolock() on a read-only mount.

4) Impact Mechanism:
Proceeding without a read-only guard leads to accessing the NULL journal/log pointer during transaction end, causing a NULL pointer dereference and kernel oops/crash (denial of service). It also risks unintended write attempts on a read-only filesystem.

5. Patch Analysis
1) Fix Approach:
Add a read-only state check and bail out early to a truncate path that uses COMMIT_WMAP, which avoids journal/log writes on read-only mounts.

2) Key Code Changes:
In fs/jfs/inode.c jfs_truncate_nolock():
- Original: if (test_cflag(COMMIT_Nolink, ip)) { xtTruncate(..., COMMIT_WMAP); return; }
- Patched: if (test_cflag(COMMIT_Nolink, ip) || isReadOnly(ip)) { xtTruncate(..., COMMIT_WMAP); return; }
This ensures read-only mode triggers the safe, non-writing truncate path.

3) Locking/Concurrency Impact:
No locking or concurrency changes were made; the patch strictly adds a state validation guard and early return, preventing entry into journaling/txEnd on read-only mounts.

6. Broader Kernel Security Implications
This change enforces proper state validation before invoking filesystem journal/commit operations, reducing a class of local DoS issues where read-only mounts could trigger NULL dereferences in write paths. It highlights the need for consistent read-only checks across filesystem write/modify flows. Ensuring journal/log availability is validated before use improves robustness and prevents crashes from routine VFS callbacks that may reach truncate logic even when writes are disallowed.