1. CVE Identifier
CVE-2024-58094

2. Vulnerability Type
Missing read-only state validation leading to NULL pointer dereference in the JFS journaling path (kernel crash/DoS) and unintended write attempt on a read-only filesystem.

3. Root Cause Summary
jfs_truncate_nolock() lacked a check for read-only filesystem state and unconditionally entered the transactional truncate path (txBegin/txCommit/txEnd). On read-only mounts, JFS_SBI(sb)->log can be NULL, and txEnd() dereferences this NULL log, causing a crash. The patch adds isReadOnly(ip) to the early bailout path to avoid starting a transaction and uses a non-transactional xtTruncate(…, COMMIT_WMAP), preventing modification attempts on a read-only filesystem.

4. Kernel Subsystem Analysis
1) Affected Subsystem:
JFS filesystem (fs/jfs), inode truncation and journaling/transaction management.

2) Pre-Patch Flaw:
jfs_truncate_nolock() only checked test_cflag(COMMIT_Nolink, ip) before choosing the non-transactional path; it did not check isReadOnly(ip), so it proceeded with txBegin/txCommit/txEnd even when the filesystem was read-only.

3) Trigger Condition:
When block_write_begin() → jfs_write_failed() → jfs_truncate() → jfs_truncate_nolock() is invoked on a read-only filesystem where COMMIT_Nolink is not set. In this sequence, txEnd() reaches JFS_SBI(tblk->sb)->log with log == NULL (as noted in the provided call stack).

4) Impact Mechanism:
Entering the transactional path on a read-only filesystem leads to txEnd() dereferencing a NULL journal log pointer, causing a kernel NULL pointer dereference (oops/panic). Additionally, it attempts metadata changes (truncate) contrary to read-only policy, risking integrity issues.

5. Patch Analysis
1) Fix Approach:
Introduce a read-only guard and short-circuit the function to a safe, non-transactional path when the inode/filesystem is read-only, preventing transaction creation and commits.

2) Key Code Changes:
Modified the early conditional from:
- if (test_cflag(COMMIT_Nolink, ip)) {
to:
+ if (test_cflag(COMMIT_Nolink, ip) || isReadOnly(ip)) {
This routes read-only cases to xtTruncate(0, ip, length, COMMIT_WMAP) and returns, avoiding txBegin/txCommit/txEnd.

3) Locking/Concurrency Impact:
The new early return prevents acquiring JFS_IP(ip)->commit_mutex and starting a transaction on read-only filesystems, removing the faulty path without altering existing locking semantics in the transactional case.

6. Broader Kernel Security Implications
Strengthening read-only checks in filesystem mutation paths reduces the risk of kernel crashes (DoS) triggered by file operations on read-only mounts. It reinforces policy compliance and prevents unintended journal/metadata updates when journaling structures may be unavailable. This defensive validation lowers attack surface across error paths and aligns truncation logic with mount state, improving overall filesystem robustness.