1. Plan Summary
Detect cases where a length returned by virtqueue_get_buf in a virtio-pci admin virtqueue completion handler is directly stored as a command result length without subtracting the trailing status structure, leading to oversized result lengths.

2. Detection Steps
1) Step 1: Objective — Identify virtio-pci admin virtqueue completion handlers. Signals — Functions that call virtqueue_get_buf in a loop, guarded by virtqueue_disable_cb/enable_cb and a spinlock over a virtio_pci_admin_vq lock (based on PATCH_DIFF and FUNCTION_CONTENT). FP mitigation — Require the presence of variables/types virtio_pci_admin_vq and virtio_admin_cmd in the function (ROOTCAUSE_ANALYSIS).

2) Step 2: Objective — Capture the returned buffer pointer and length. Signals — While-loop pattern “while ((cmd = virtqueue_get_buf(vq, &len)))” where cmd is typed as struct virtio_admin_cmd* and len is an unsigned integer length (FUNCTION_CONTENT). FP mitigation — Ensure cmd’s type or later member access shows struct virtio_admin_cmd.

3) Step 3: Objective — Find direct propagation of the raw len to a result-size field. Signals — Assignment of the form cmd->result_sg_size = len (or equivalent direct assignment of len to a field on cmd that contains “result” and “size”) inside the completion loop (FUNCTION_CONTENT, ROOTCAUSE_ANALYSIS). FP mitigation — Restrict to fields of struct virtio_admin_cmd and prefer exact name result_sg_size to minimize noise.

4) Step 4: Objective — Confirm missing subtraction of the status trailer size. Signals — In the same block, absence of any computation like sizeof(struct virtio_admin_cmd_status) and absence of len - status_size arithmetic before assigning to the result size (PATCH_DIFF, ROOTCAUSE_ANALYSIS). FP mitigation — If any subtraction using sizeof(struct virtio_admin_cmd_status) or a named status_size is present and applied to len before assignment, do not flag.

5) Step 5: Objective — Check for missing short-write handling. Signals — No conditional check for len < sizeof(struct virtio_admin_cmd_status) resulting in clamping the result size to 0 (PATCH_DIFF). FP mitigation — If such a conditional exists (clamping to 0 when len < status_size), do not flag.

6) Step 6: Objective — Strengthen context that this is a completion result size used by consumers. Signals — Presence of complete(&cmd->completion) immediately after setting the size (FUNCTION_CONTENT, PATCH_DIFF). FP mitigation — Require complete on the same cmd instance within the loop to reduce matches unrelated to command completions.

7) Step 7: Objective — Corroborate protocol-specific context where len includes a trailer. Signals — The translation unit or nearby scope mentions struct virtio_admin_cmd_status or related identifiers; even if not used pre-patch, its presence suggests a status trailer exists (PATCH_DIFF). FP mitigation — Prioritize/only flag when the status struct is declared in scope or included, mapping to admin command protocol (ROOTCAUSE_ANALYSIS).

8) Step 8: Objective — Avoid flagging legitimate uses where len equals total payload. Signals — If the function lacks any virtio_admin_cmd/virtio_pci_admin_vq types or completion semantics and does not reference admin command constructs, skip (ROOTCAUSE_ANALYSIS). FP mitigation — Constrain to virtio-pci admin VQ completion patterns only.

9) Step 9: Objective — Extend coverage to similarly named sinks within admin command handling. Signals — Assignments of len to any cmd field name containing “result” and “size” (e.g., result_*_size) without adjustment for status (ROOTCAUSE_ANALYSIS). FP mitigation — Keep restriction to struct virtio_admin_cmd fields and completion-loop context.

10) Step 10: Objective — Rank/report findings with contextual rationale. Signals — Include facts: len originates from virtqueue_get_buf, assigned to cmd->result size without subtracting trailer or handling short writes (PATCH_DIFF, ROOTCAUSE_ANALYSIS). FP mitigation — Suppress if any intermediary arithmetic, bounds checks, or explicit subtraction of a status-sized trailer are present.

3. Target Elements
- Functions implementing virtqueue completion handlers.
- Call sites of virtqueue_get_buf capturing a length out-parameter and returning a command pointer.
- Assignments to fields of struct virtio_admin_cmd, especially result_sg_size.
- Control-flow patterns: while-loops over virtqueue_get_buf under virtqueue_disable_cb/enable_cb.
- Synchronization context: spin_lock_irqsave/spin_unlock_irqrestore around admin_vq->lock.
- Presence/usage of struct virtio_admin_cmd_status or a status_size constant.

4. Dataflow / Taint Considerations
- Track the flow of the length out-parameter variable from virtqueue_get_buf to assignments into cmd fields.
- Treat the cmd variable returned by virtqueue_get_buf as the base object; sinks are field writes to result-related size fields on cmd.
- Recognize and exempt flows where len is adjusted by subtracting sizeof(struct virtio_admin_cmd_status) or guarded by len < status_size checks before reaching the sink.

5. Validation & Test Cases
- Positive: The pre-patch function (FUNCTION_CONTENT) where cmd->result_sg_size = len occurs immediately after virtqueue_get_buf with no subtraction or short-write handling; expect a finding.
- Negative: The patched snippet (PATCH_DIFF) where status_size is computed, len < status_size is clamped to 0, and otherwise len - status_size is assigned; expect no finding.
- Test harness notes: Run the checker on a minimal file defining struct virtio_pci_admin_vq, struct virtio_admin_cmd with result_sg_size, a completion handler matching the loop pattern, and the two variants above.

6. Estimated Effort & Priority
Medium: The checker requires targeted type/name-based heuristics and simple intra-procedural dataflow, but operates in a narrow, high-impact kernel path (ROOTCAUSE_ANALYSIS).

7. Likely False-Positive Sources & Mitigations
- Other virtqueue consumers where len already equals payload without a trailer; mitigate by requiring virtio_admin_cmd/virtio_pci_admin_vq context.
- Assignments to unrelated size fields; mitigate by focusing on field names containing “result” and “size” within struct virtio_admin_cmd.
- Code that subtracts a different constant equivalent to status size; mitigate by accepting any clear subtraction before assignment, not only sizeof(struct virtio_admin_cmd_status).

8. Limitations & Assumptions
- Assumes that virtqueue_get_buf on admin VQ returns len including a trailing struct virtio_admin_cmd_status (ROOTCAUSE_ANALYSIS, PATCH_DESCRIPTION); the checker cannot infer this for other protocols.
- Relies on identifier/type names (virtio_admin_cmd, result_sg_size, virtio_pci_admin_vq) present in the code; may miss differently named but equivalent constructs.
- Does not verify downstream buffer allocation sizes; only flags the size miscalculation at completion time.