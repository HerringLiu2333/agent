1. Plan Summary
Detect cases where a virtqueue completion handler uses the total bytes returned by virtqueue_get_buf() as a command-specific result size without excluding a fixed-size status trailer, leading to over-reported lengths and potential out-of-bounds reads.

2. Detection Steps
1) Step 1: Objective: Find virtqueue completion handlers that retrieve a length from virtqueue_get_buf(). Signals: Functions looping on virtqueue_get_buf(vq, &len) and extracting a request context pointer (e.g., struct virtio_admin_cmd *cmd). FP mitigation: Limit to handlers that also reference an admin queue context (e.g., admin_vq) or are in the same compilation unit as the admin command submission paths shown. (Based on FILE_CONTENT vp_modern_avq_done and ROOTCAUSE_ANALYSIS)

2) Step 2: Objective: Identify direct propagation of the returned length into a result-size field. Signals: Assignments where the out-parameter ‘len’ from virtqueue_get_buf() is assigned to a field with result semantics (e.g., cmd->result_sg_size = len). FP mitigation: Require that the field belongs to the same command struct used in admin requests (struct virtio_admin_cmd). (Based on FILE_CONTENT and ROOTCAUSE_ANALYSIS)

3) Step 3: Objective: Confirm that the request enqueued includes a fixed-size status buffer plus an optional result buffer. Signals: In the request builder, detect sg_init_one binding a local status object (struct virtio_admin_cmd_status) to an IN entry, followed by optionally adding cmd->result_sg as another IN entry. FP mitigation: Require that this builder function is part of the same driver module and is the common path for the VQ in question (virtqueue_exec_admin_cmd/vp_modern_admin_cmd_exec). (Based on FILE_CONTENT and ROOTCAUSE_ANALYSIS)

4) Step 4: Objective: Correlate the completion handler with the admin virtqueue used by the submission path. Signals: The submission uses vp_dev->admin_vq.info->vq, while the completion handler accesses the same admin_vq via to_vp_device(vq->vdev). FP mitigation: Require both code paths to reference vp_dev->admin_vq to strengthen the link. (Based on FILE_CONTENT)

5) Step 5: Objective: Determine if the handler fails to adjust the total length for the fixed status size. Signals: Absence of arithmetic adjusting len by sizeof(struct virtio_admin_cmd_status), and absence of a guard when len < sizeof(struct virtio_admin_cmd_status), prior to assigning to the result size. FP mitigation: If the code subtracts sizeof(struct virtio_admin_cmd_status) or zeroes the size when len is smaller, do not report. (Based on PATCH_DIFF and ROOTCAUSE_ANALYSIS)

6) Step 6: Objective: Elevate confidence if the over-reported result size is observable by callers. Signals: Downstream use where cmd->result_sg_size is assigned to an externally returned variable (e.g., *res_size = cmd.result_sg_size in virtio_pci_admin_dev_parts_get). FP mitigation: Only elevate (not require) this for reporting; still flag if Step 5 confirms missing adjustment. (Based on FILE_CONTENT and ROOTCAUSE_ANALYSIS)

7) Step 7: Objective: Optionally corroborate potential over-read risk when a fixed-size result buffer is allocated. Signals: Allocations with kzalloc(sizeof(*result)) backing result_sg and subsequent reliance on cmd->result_sg_size; presence of both status and result buffers implies len includes status, over-reporting size by status bytes. FP mitigation: Only apply when both a fixed-size allocation for result and non-adjusted len assignment are present. (Based on FILE_CONTENT and ROOTCAUSE_ANALYSIS)

8) Step 8: Objective: Avoid flagging unrelated virtqueue handlers where len legitimately equals the payload size. Signals: If the submission path for the same VQ does not add a status buffer in the IN direction, or the handler applies other known length normalizations, suppress the finding. FP mitigation: Require evidence of a status SG in the IN path (Step 3); otherwise, do not report. (Based on ROOTCAUSE_ANALYSIS)

3. Target Elements
- Functions: virtqueue completion handlers (e.g., vp_modern_avq_done), admin command submission functions (virtqueue_exec_admin_cmd, vp_modern_admin_cmd_exec).
- Call sites: virtqueue_get_buf(vq, &len) and subsequent assignments to result-size fields.
- Struct fields: struct virtio_admin_cmd members result_sg, result_sg_size.
- Scatterlist setup sites: sg_init_one for status (struct virtio_admin_cmd_status) and result SGs.
- Return-value uses: sites assigning cmd->result_sg_size to externally visible outputs (e.g., *res_size).

4. Dataflow / Taint Considerations
- Track dataflow from the ‘len’ out-parameter of virtqueue_get_buf() through assignments into cmd->result_sg_size.
- Track whether the request path for the same command includes both a status IN SG and an optional result IN SG; model that len includes both.
- Consider control-flow guards that adjust len (subtract sizeof(struct virtio_admin_cmd_status) or set zero when len < status size); treat their presence as sanitizers.

5. Validation & Test Cases
- Positive: Pre-patch vp_modern_avq_done that assigns cmd->result_sg_size = len after virtqueue_get_buf(), with vp_modern_admin_cmd_exec adding both status and result SGs; expect a report.
- Negative: Post-patch code that subtracts sizeof(struct virtio_admin_cmd_status) and sets zero when len < status_size; expect no report.
- Test harness notes: Run on the provided file to ensure correlation between submission and completion paths is recognized and that subtraction guards suppress alerts.

6. Estimated Effort & Priority
Medium effort and medium-high priority, as the pattern involves interprocedural correlation between request building and completion handling but within a single module.

7. Likely False-Positive Sources & Mitigations
- Handlers for queues without a status trailer: mitigate by requiring detected status IN SG in the submission path.
- Fields named “result_*size” used for total lengths: mitigate by correlating with explicit status SG presence.
- Alternative normalization locations: if len is adjusted elsewhere before assignment, avoid flagging by recognizing arithmetic or guard checks.

8. Limitations & Assumptions
- Assumes the presence of a fixed-size status structure as part of the IN SGs (based on PATCH_DIFF and FILE_CONTENT) and that virtqueue_get_buf() returns total bytes including status (per ROOTCAUSE_ANALYSIS); not all drivers may follow this convention.
- Does not compute the exact size of the status structure beyond recognizing sizeof(struct virtio_admin_cmd_status) patterns; if other status types are used, they may be missed.
- Mapping a specific vq between submission and completion is approximated via shared admin_vq context; if heavily abstracted, linking may be incomplete.