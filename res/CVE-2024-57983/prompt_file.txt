1. CVE Identifier
CVE-2024-57983

2. Vulnerability Type
Heap-based out-of-bounds write (and subsequent out-of-bounds read) in kernel memory during suspend/resume

3. Root Cause Summary
The context-save array intr_mask in struct th1520_mbox_context was undersized by one element (TH_1520_MBOX_CHANS - 1 instead of TH_1520_MBOX_CHANS), while the suspend/resume code iterated over all TH_1520_MBOX_CHANS entries. This off-by-one mismatch caused out-of-bounds writes in th1520_mbox_suspend_noirq and out-of-bounds reads/writes in th1520_mbox_resume_noirq, corrupting adjacent kernel heap memory allocated for the context structure.

4. Kernel Subsystem Analysis
1) Affected Subsystem:
- Mailbox subsystem (drivers/mailbox), T-Head TH1520 mailbox driver (mailbox-th1520.c)

2) Pre-Patch Flaw:
- In struct th1520_mbox_context, intr_mask was declared as u32 intr_mask[TH_1520_MBOX_CHANS - 1] while TH_1520_MBOX_CHANS is 4.
- th1520_mbox_suspend_noirq and th1520_mbox_resume_noirq loop with for (i = 0; i < TH_1520_MBOX_CHANS; i++), indexing intr_mask[0..3], thereby accessing one element past the allocated array.

3) Trigger Condition:
- CONFIG_PM_SLEEP enabled and the device bound.
- System enters the NOIRQ suspend/resume paths, invoking th1520_mbox_suspend_noirq or th1520_mbox_resume_noirq, which process all four channelsâ€™ mask registers.

4) Impact Mechanism:
- th1520_mbox_suspend_noirq performs an out-of-bounds write on ctx->intr_mask[3], corrupting the following heap memory object or slab metadata.
- th1520_mbox_resume_noirq performs an out-of-bounds read (and then writes the read value to MMIO), potentially using corrupted data and further destabilizing the system.
- Effects include kernel memory corruption, potential crashes, data integrity issues, and possible privilege escalation depending on allocator layout and corruption target.

5. Patch Analysis
1) Fix Approach:
- Correct the array dimension to match the number of channels, eliminating the off-by-one overflow during suspend/resume state save/restore.

2) Key Code Changes:
- Changed:
  - struct th1520_mbox_context { u32 intr_mask[TH_1520_MBOX_CHANS - 1]; };
- To:
  - struct th1520_mbox_context { u32 intr_mask[TH_1520_MBOX_CHANS]; };
- This aligns the array capacity with the loop bounds in th1520_mbox_suspend_noirq/th1520_mbox_resume_noirq.

3) Locking/Concurrency Impact:
- None. The change is purely a bounds fix; suspend_noirq/resume_noirq run in NOIRQ stage, and no locking semantics were altered.

6. Broader Kernel Security Implications
- Off-by-one errors in per-channel state arrays during power management are high-risk as they execute in global suspend/resume paths and can corrupt heap memory in hard-to-debug contexts.
- Similar drivers should use ARRAY_SIZE-based loops or static asserts (e.g., BUILD_BUG_ON) to enforce consistency between array sizes and loop bounds.
- Validate that all context-save arrays reflect actual hardware channel counts, especially when some arrays (e.g., remote_icu) intentionally use CHANS-1 while others must use CHANS.