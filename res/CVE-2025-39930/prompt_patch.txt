1. CVE Identifier
CVE-2025-39930

2. Vulnerability Type
Use-after-free due to incorrect lifetime/refcount management (dangling pointer)

3. Root Cause Summary
The function graph_util_parse_dai() used the __free(device_node) attribute on a local device_node pointer, causing an automatic of_node_put() at function exit. This prematurely dropped the reference to the OF device node that was handed off to dlc->of_node for use by the driver, leaving dlc->of_node pointing to a freed or invalid node. The bug is a lifetime/refcount mismanagement: the node must remain valid while the driver is in use, but the auto-free caused it to be released too early.

4. Kernel Subsystem Analysis
1) Affected Subsystem:
ASoC (ALSA System-on-Chip), simple-card-utils, device tree graph DAI parsing

2) Pre-Patch Flaw:
In graph_util_parse_dai(), the line “struct device_node *node __free(device_node) = of_graph_get_port_parent(ep);” ensures node is automatically put at scope exit, even when its reference is stored in dlc->of_node. This results in a dangling pointer in dlc when the function returns successfully, because the driver still expects to use that node reference.

3) Trigger Condition:
Callers that invoke graph_util_parse_dai() with a valid endpoint and subsequently use dlc->of_node after the function returns. The success path is particularly problematic because __free causes of_node_put() unconditionally when the function exits, while dlc retains the pointer.

4) Impact Mechanism:
The premature of_node_put() frees or invalidates the device node, causing dlc->of_node to become a dangling pointer. Subsequent accesses by the driver or ASoC core to dlc->of_node can lead to use-after-free, memory corruption, or crashes.

5. Patch Analysis
1) Fix Approach:
Remove the __free(device_node) attribute from the local node pointer to preserve the reference beyond the function’s scope when dlc consumes it. Add an explicit of_node_put(node) only on error paths to avoid leaks while preventing premature release on success.

2) Key Code Changes:
- Replace “struct device_node *node __free(device_node) = of_graph_get_port_parent(ep);” with “node = of_graph_get_port_parent(ep);” to stop automatic freeing.
- Add explicit “of_node_put(node);” when snd_soc_get_dlc(&args, dlc) returns < 0, ensuring proper cleanup on failure without affecting the success lifetime.

3) Locking/Concurrency Impact:
No locking or concurrency changes; the fix strictly adjusts reference counting and lifetime management for device_node. RCU/locks are not implicated in the patch hunks.

6. Broader Kernel Security Implications
Automatic cleanup semantics (such as __free) can be dangerous when pointers are handed off to external structures that outlive the local scope. Correct device node reference management is critical across ASoC and DT subsystems to prevent UAF and memory corruption. This change reinforces the importance of explicit lifetime control when sharing references with long-lived driver structures.