1. CVE Identifier
CVE-2025-40014

2. Vulnerability Type
Out-of-bounds stack access (array index out-of-bounds leading to stack corruption)

3. Root Cause Summary
amd_set_spi_freq() iterated up to ARRAY_SIZE(amd_spi_freq) and, when no entry matched (speed_hz < AMD_SPI_MIN_HZ), the loop completed with i == ARRAY_SIZE. The code then used i without clamping or revalidation, causing an out-of-bounds access. The missing lower-bound clamping/guard on the frequency table index allowed an invalid index to be used, resulting in stack OOB access and control-flow anomalies (as evidenced by objtool warning).

4. Kernel Subsystem Analysis
1) Affected Subsystem:
SPI subsystem, AMD SPI controller driver (drivers/spi, function amd_set_spi_freq)

2) Pre-Patch Flaw:
- The loop condition used “for (i = 0; i < ARRAY_SIZE(amd_spi_freq); i++)” and relied on an early break when speed_hz >= amd_spi_freq[i].speed_hz.
- For speed_hz values below AMD_SPI_MIN_HZ, the loop never broke, leaving i == ARRAY_SIZE, after which i was used to access data tied to the frequency table without bounds check.
- This constitutes missing clamping/validation of the computed index when no table entry matches.

3) Trigger Condition:
- Caller passes speed_hz < AMD_SPI_MIN_HZ to amd_set_spi_freq().
- Under this condition, the loop iterates over the entire amd_spi_freq array without breaking, producing i == ARRAY_SIZE.

4) Impact Mechanism:
- Using i == ARRAY_SIZE to index/access data led to an out-of-bounds stack access, which can corrupt adjacent stack data or cause undefined behavior.
- Objtool/UBSAN reported: “amd_set_spi_freq() falls through to next function amd_spi_set_opcode()”, indicating corrupted control flow analysis consistent with stack OOB.

5. Patch Analysis
1) Fix Approach:
- Clamp the search loop to stop at the last valid index by changing the upper bound to ARRAY_SIZE(amd_spi_freq) - 1, ensuring i never exceeds the final valid entry when no match occurs.
- This effectively clamps too-low speed_hz up to AMD_SPI_MIN_HZ.

2) Key Code Changes:
- Loop bound changed:
  - From: for (i = 0; i < ARRAY_SIZE(amd_spi_freq); i++)
  - To:   for (i = 0; i < ARRAY_SIZE(amd_spi_freq)-1; i++)
- This guards against i becoming ARRAY_SIZE when no break happens, eliminating the OOB access.

3) Locking/Concurrency Impact:
- None. The change is purely bounds logic; no locks or ordering were added or modified.

6. Broader Kernel Security Implications
- Prevents potential stack corruption in the SPI driver when userspace or other kernel components request very low SPI speeds.
- Eliminates a class of table-lookup bugs where loop completion without a match yields an invalid index subsequently used without validation.
- Improves robustness of controller configuration paths, reducing risks of crashes or exploit primitives stemming from stack memory corruption in kernel drivers.