1. CVE Identifier
CVE-2025-40014

2. Vulnerability Type
Out-of-bounds array access (OOB read) due to improper loop bounds and missing clamping/bounds validation

3. Root Cause Summary
amd_set_spi_freq() linearly scans the amd_spi_freq[] table using “for (i = 0; i < ARRAY_SIZE(amd_spi_freq); i++)” and then unconditionally uses amd_spi_freq[i] after the loop. When speed_hz is below the minimum table entry, the loop never breaks, leaving i == ARRAY_SIZE(amd_spi_freq), and subsequent accesses like “amd_spi_freq[i].speed_hz” are out-of-bounds. The function lacks a guard to clamp to the minimum supported frequency or to cap i to the last valid index before indexing. This results in out-of-bounds stack access and undefined behavior, flagged by objtool/UBSAN.

4. Kernel Subsystem Analysis
1) Affected Subsystem:
SPI subsystem; AMD SPI driver (drivers/spi/spi-amd)

2) Pre-Patch Flaw:
In amd_set_spi_freq(), the loop over amd_spi_freq[] assumes a match will be found and does not cap the index, then uses i to index the array without verifying i < ARRAY_SIZE. The missing early stop/clamp for the smallest supported speed allows i to increment past the last valid element.

3) Trigger Condition:
Caller provides speed_hz < AMD_SPI_MIN_HZ, i.e., lower than the smallest entry in amd_spi_freq[], so the “if (speed_hz >= amd_spi_freq[i].speed_hz)” condition never becomes true and the loop completes without break.

4) Impact Mechanism:
With i == ARRAY_SIZE(amd_spi_freq), subsequent reads of amd_spi_freq[i].speed_hz/enable_val/spd7_val are out-of-bounds, causing OOB stack access and undefined behavior; observed as an objtool warning “amd_set_spi_freq() falls through to next function amd_spi_set_opcode()” and UBSAN errors. The erroneous values may lead to incorrect register programming and potential system instability.

5. Patch Analysis
1) Fix Approach:
Clamp the iteration to the last valid index by limiting the loop to ARRAY_SIZE(amd_spi_freq) - 1, ensuring i never reaches an out-of-range value and low speed_hz values are clamped up to AMD_SPI_MIN_HZ.

2) Key Code Changes:
Changed loop bound from “for (i = 0; i < ARRAY_SIZE(amd_spi_freq); i++)” to “for (i = 0; i < ARRAY_SIZE(amd_spi_freq) - 1; i++)”, preventing i from becoming equal to ARRAY_SIZE when no break occurs.

3) Locking/Concurrency Impact:
None. The patch solely adjusts loop bounds and does not alter locking, concurrency control, or ordering.

6. Broader Kernel Security Implications
Array indexing based on search loops must enforce bounds or provide clamping to avoid OOB access, especially in driver tables. Even read-only OOB access in kernel space can cause undefined behavior, crashes, or tool-detected control-flow anomalies, and may propagate faulty register programming. This fix exemplifies defensive programming: validate indices post-search or constrain loops to prevent OOB, a pattern applicable across hardware driver parameter-selection logic.