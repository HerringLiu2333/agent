1. CVE Identifier
CVE-2025-38341

2. Vulnerability Type
Double free (memory management / ownership violation), potentially leading to memory corruption

3. Root Cause Summary
The function fbnic_mbx_map_msg() erroneously frees the message page on the DMA mapping error path, despite the API semantics that the caller retains ownership and will free the page on error. Specifically, when dma_mapping_error(fbd->dev, addr) is true, the function executed free_page((unsigned long)msg) and then returned an error. Because all callers already free the page on error, this results in a double free of the same page.

4. Kernel Subsystem Analysis
1) Affected Subsystem:
Networking subsystem, fbnic Ethernet driver firmware mailbox messaging (fbnic_mbx_map_msg)

2) Pre-Patch Flaw:
In fbnic_mbx_map_msg(), the error handling after dma_map_single() violates ownership contracts by freeing the msg page in the callee. The pre-patch code included: "free_page((unsigned long)msg);" inside the dma_mapping_error() branch, while still returning -ENOSPC for the caller to handle.

3) Trigger Condition:
When dma_map_single(fbd->dev, msg, PAGE_SIZE, direction) fails and dma_mapping_error(fbd->dev, addr) is true, and the caller (as per driver-wide semantics) subsequently frees the same msg on receiving the error.

4) Impact Mechanism:
The page backing msg is freed twice, corrupting the page allocatorâ€™s metadata and potentially leading to memory corruption, kernel crashes, or use-after-free scenarios if the freed memory is reused.

5. Patch Analysis
1) Fix Approach:
Align error handling with the intended ownership semantics by removing the free_page() call in the callee, ensuring only the caller frees the page on error.

2) Key Code Changes:
In fbnic_mbx_map_msg(), the dma_mapping_error() block was changed from:
- if (dma_mapping_error(fbd->dev, addr)) { free_page((unsigned long)msg); return -ENOSPC; }
to:
- if (dma_mapping_error(fbd->dev, addr)) return -ENOSPC;
This removes the premature free and preserves caller ownership.

3) Locking/Concurrency Impact:
No locking or concurrency logic was changed; the patch strictly modifies error-path memory ownership handling. No changes to mbx->buf_info population occur on error, maintaining existing ordering and state.

6. Broader Kernel Security Implications
Correcting the ownership violation prevents allocator corruption from double free, reducing risks of kernel instability and potential exploitation vectors associated with memory corruption. It strengthens error-path robustness in DMA mapping operations within network drivers and enforces consistent API contracts, which is crucial for maintaining safe memory management across subsystems.