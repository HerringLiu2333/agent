1. CVE Identifier
CVE-2025-38341

2. Vulnerability Type
Double free (memory management/ownership violation)

3. Root Cause Summary
fbnic_mbx_map_msg() incorrectly freed the message buffer when dma_map_single() failed, despite the APIâ€™s documented semantics that the caller retains ownership of the message on error. This led to a double free because all existing callers already free the page on error. The erroneous free occurred in the dma_mapping_error() branch, violating the ownership contract and corrupting allocator state.

4. Kernel Subsystem Analysis
1) Affected Subsystem:
Networking (eth), fbnic driver mailbox/FW message DMA mapping

2) Pre-Patch Flaw:
In fbnic_mbx_map_msg(), the error path after dma_mapping_error() invoked free_page((unsigned long)msg) even though the function should not free caller-owned memory on failure. This contradicted the stated semantics and the behavior of existing callers.

3) Trigger Condition:
DMA mapping failure for the firmware message buffer (dma_mapping_error(fbd->dev, addr) returns true), e.g., due to IOMMU/PCI DMA resource exhaustion or other mapping errors.

4) Impact Mechanism:
The buffer is freed twice: once by fbnic_mbx_map_msg() and again by the caller handling the error, causing page allocator metadata corruption. This can result in kernel crashes, memory corruption, or subsequent misuse of allocator state.

5. Patch Analysis
1) Fix Approach:
Align error handling with ownership semantics by removing the free_page() in the mapping error path so the caller exclusively handles cleanup on failure.

2) Key Code Changes:
- In fbnic_mbx_map_msg():
  - Removed the free_page((unsigned long)msg) call inside the dma_mapping_error() block.
  - Simplified the error branch to just return -ENOSPC when dma_mapping_error() is detected.

3) Locking/Concurrency Impact:
No locking or concurrency changes; the fix solely adjusts memory ownership in the error path. No changes to synchronization, ordering, or atomicity.

6. Broader Kernel Security Implications
Adhering to clear ownership semantics in driver error paths is critical to prevent double frees and allocator corruption in the kernel. Similar mailbox/DMA mapping routines across drivers should be audited for consistent error handling and cleanup responsibilities. Ensuring callee/caller contracts are respected reduces risks of subtle memory safety bugs that can lead to denial-of-service or facilitate exploitation.