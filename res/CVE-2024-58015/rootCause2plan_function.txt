1. Plan Summary
Insufficient evidence to define a vulnerability-specific detection; this plan documents the blockers and a minimal, conservative framework pending actual patch/root-cause details.

2. Detection Steps
1) Step 1: Establish evidence availability — conceptual signals: verify that [PATCH_DESCRIPTION], [PATCH_DIFF], and [FUNCTION_CONTENT] provide concrete changes or patterns; in this case, [ROOTCAUSE_ANALYSIS] indicates missing content, and no other fields provide signals — FP mitigation: explicitly abstain from reporting findings without concrete signals to avoid speculative false positives.
2) Step 2: Gate further analysis on root-cause signals — conceptual signals: require at least one of (added guard/condition, input validation, bounds checks, error handling, locking changes) from [PATCH_DIFF] or an explicit flaw description from [PATCH_DESCRIPTION]/[ROOTCAUSE_ANALYSIS]; current inputs lack these — FP mitigation: treat absence of signals as a hard block to prevent over-reporting.
3) Step 3: Placeholder mapping (to be completed when signals exist) — conceptual signals: once concrete patterns are available, map them to AST/semantic constructs (e.g., missing null/length/state check before sensitive call, missing return-value verification, missing lock/unlock pairing) and scope to the exact functions/files touched by the patch — FP mitigation: constrain by file/function names and call sites evidenced by patch hunks to minimize unrelated matches.

3. Target Elements
- Not determinable from provided inputs; would typically include functions and call sites edited in [PATCH_DIFF], condition checks added/modified, and error/return-value handling around sensitive operations once known.

4. Dataflow / Taint Considerations
- Not determinable from provided inputs; if the root cause involves unvalidated data reaching sensitive sinks, define a taint from inputs to sinks identified in [PATCH_DIFF]/[FUNCTION_CONTENT], with guards derived from added checks once available.

5. Validation & Test Cases
- Positive: Not constructible without knowledge of the specific flaw; would require a pre-patch snippet exhibiting the missing guard/handling indicated by [PATCH_DIFF]/[PATCH_DESCRIPTION].
- Negative: Post-patch version demonstrating the added guard/handling preventing the issue, as evidenced by [PATCH_DIFF].
- Test harness notes: Blocker—no concrete samples can be authored without the missing details; re-run once patch/root-cause materials are available.

6. Estimated Effort & Priority
High — cannot proceed until patch or root-cause details are provided; once available, effort to encode patterns is typically medium.

7. Likely False-Positive Sources & Mitigations
- Generic heuristics applied without concrete signals (mitigation: do not enable until actual [PATCH_DIFF]/root-cause patterns are integrated).
- Over-broad pattern matching across the codebase (mitigation: scope to functions/files and exact constructs shown in the patch once available).

8. Limitations & Assumptions
- All actionable content is missing: [ROOTCAUSE_ANALYSIS] explicitly shows missing analysis, and no [PATCH_DESCRIPTION], [PATCH_DIFF], or [FUNCTION_CONTENT] were provided; thus no root cause, fix patterns, or affected elements can be inferred.
- The plan intentionally avoids inventing vulnerability specifics to comply with evidence-only constraints; completion requires the actual patch hunks and root-cause narrative to define concrete detection signals.