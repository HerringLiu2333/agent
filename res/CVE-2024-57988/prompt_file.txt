1. CVE Identifier
CVE-2024-57988

2. Vulnerability Type
NULL pointer dereference due to missing allocation failure check

3. Root Cause Summary
In drivers/bluetooth/btbcm.c, btbcm_get_board_name() duplicates the device tree “compatible” string using devm_kstrdup() but does not check for allocation failure. The function immediately calls strreplace() on the returned pointer, which can be NULL on failure, causing a kernel NULL pointer dereference. The flawed pre-patch logic is the missing NULL check after devm_kstrdup() and before strreplace().

4. Kernel Subsystem Analysis
1) Affected Subsystem:
Bluetooth Broadcom driver (drivers/bluetooth/btbcm.c)

2) Pre-Patch Flaw:
btbcm_get_board_name(struct device *dev) performed:
- board_type = devm_kstrdup(dev, tmp, GFP_KERNEL);
- strreplace(board_type, '/', '-');
without validating board_type for NULL.

3) Trigger Condition:
devm_kstrdup() fails and returns NULL (e.g., memory pressure) after successfully reading the device tree “compatible” property (CONFIG_OF path).

4) Impact Mechanism:
Calling strreplace(board_type, '/', '-') with board_type == NULL dereferences a NULL pointer, leading to a kernel oops/panic during Bluetooth device initialization, potentially resulting in denial of service.

5. Patch Analysis
1) Fix Approach:
Add a defensive NULL check immediately after devm_kstrdup() and return NULL early if allocation failed, preventing the invalid dereference.

2) Key Code Changes:
In btbcm_get_board_name():
- Inserted:
  if (!board_type)
      return NULL;
before the existing strreplace(board_type, '/', '-') call.
This directly addresses the missing allocation failure check.

3) Locking/Concurrency Impact:
None. The change is purely an error-handling check; it does not introduce or modify locks, RCU, or ordering. Memory lifetime remains managed by devm_* semantics.

6. Broader Kernel Security Implications
This fix reinforces the need to consistently check for allocation failures from devm_kstrdup() and similar helpers across the kernel, especially in initialization paths. Without such checks, low-memory conditions can be escalated into kernel crashes (DoS). The change improves robustness of the Bluetooth stack initialization and reduces attack surface for memory pressure-induced faults.