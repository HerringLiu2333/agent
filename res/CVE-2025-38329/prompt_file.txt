1. CVE Identifier
CVE-2025-38329

2. Vulnerability Type
Out-of-bounds read (OOB read) due to length miscalculation/padding error

3. Root Cause Summary
In cs_dsp_mock_wmfw_add_info(), the code rounded the source string length up to a 4-byte boundary for allocation but then used this padded length as the memcpy source size. This caused memcpy to read past the end of the original info string when its length was not already a multiple of 4. The patch separates the original (unrounded) source length from the padded destination size and copies only the original length, eliminating the OOB read.

4. Kernel Subsystem Analysis
1) Affected Subsystem:
firmware: cs_dsp KUnit test utilities (wmfw builder)

2) Pre-Patch Flaw:
In cs_dsp_mock_wmfw_add_info(), after info_len was rounded up to a multiple of 4 and a zeroed buffer was allocated for the padded length, memcpy(tmp, info, info_len) used the padded info_len, not the original string length (see hunk in the function starting at line ~133).

3) Trigger Condition:
The info string length is not a multiple of 4, causing the padding path to execute (info_len % 4 != 0).

4) Impact Mechanism:
memcpy reads up to 3 bytes past the end of the source string (OOB read), which KASAN reported; this can lead to kernel memory disclosure or test instability, even though it occurs in test code.

5. Patch Analysis
1) Fix Approach:
Introduce a copy_len variable to preserve the original unpadded string length and use it as the memcpy size, while keeping info_len for the padded allocation and final block length.

2) Key Code Changes:
- Added: size_t copy_len = info_len; before rounding.
- Changed: memcpy(tmp, info, info_len); to memcpy(tmp, info, copy_len); ensuring only valid source bytes are read.
- Retained: info_len = round_up(info_len, 4); and kunit_kzalloc(..., info_len, ...); ensuring destination includes zeroed padding.

3) Locking/Concurrency Impact:
None. The change is purely local to the functionâ€™s memory handling; no locking or ordering semantics were introduced or altered.

6. Broader Kernel Security Implications
This bug exemplifies a common pitfall when padding data: using the padded size for source operations. Although located in KUnit test utilities, the pattern warrants auditing similar padding/round_up code paths to ensure distinct handling of source length vs. destination size, preventing OOB reads and potential information leakage.