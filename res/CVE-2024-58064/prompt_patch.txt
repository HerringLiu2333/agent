1. CVE Identifier
CVE-2024-58064

2. Vulnerability Type
NULL pointer dereference due to missing allocation result validation

3. Root Cause Summary
The function test_cfg80211_parse_colocated_ap() in net/wireless/tests/scan.c allocated a buffer with kunit_kzalloc() and immediately dereferenced it without checking for allocation failure. If kunit_kzalloc() returned NULL, subsequent writes to ies->len and ies->data would dereference a NULL pointer, causing a kernel crash in the test environment.

4. Kernel Subsystem Analysis
1) Affected Subsystem:
cfg80211 KUnit tests (net/wireless/tests), specifically test_cfg80211_parse_colocated_ap()

2) Pre-Patch Flaw:
After allocating ies with “ies = kunit_kzalloc(test, struct_size(ies, data, input->len), GFP_KERNEL);” the code immediately accessed ies->len and ies->data without a NULL check. This missing validation of the allocation result created an unsafe dereference path.

3) Trigger Condition:
kunit_kzalloc() returns NULL (e.g., due to memory allocation failure under GFP_KERNEL or test environment constraints). The test then executes “ies->len = input->len; memcpy(ies->data, input->data, input->len);” on a NULL ies pointer.

4) Impact Mechanism:
Dereferencing a NULL pointer leads to a kernel NULL pointer dereference/OOPS during test execution, causing a crash or test failure (Denial of Service within the test context).

5. Patch Analysis
1) Fix Approach:
Introduce a NULL-pointer assertion immediately after allocation to prevent further execution if ies is NULL.

2) Key Code Changes:
Added “KUNIT_ASSERT_NOT_NULL(test, ies);” directly after the kunit_kzalloc() call, ensuring the test aborts safely instead of dereferencing a NULL pointer.

3) Locking/Concurrency Impact:
None. The change is a defensive check in test code and does not alter locking, RCU, or concurrency behavior.

6. Broader Kernel Security Implications
Validating allocation results prevents NULL dereference crashes, improving robustness and reliability, even in test code paths. This change promotes safer coding practices that are applicable across kernel subsystems, reducing the risk of similar issues in production paths. Ensuring KUnit tests handle allocation failures gracefully supports stable automated testing and avoids spurious test-induced kernel crashes.