1. CVE Identifier
CVE-2024-58064

2. Vulnerability Type
NULL pointer dereference leading to kernel crash (denial of service) in KUnit test code.

3. Root Cause Summary
The KUnit test function test_cfg80211_parse_colocated_ap() allocates a cfg80211_bss_ies buffer with kunit_kzalloc() and immediately dereferences it without verifying the allocation succeeded. If kunit_kzalloc() returns NULL (e.g., due to allocation failure), the subsequent writes to ies->len and memcpy(ies->data, ...) cause a NULL pointer dereference. The patch adds a missing NULL check/assertion to prevent dereferencing a NULL pointer.

4. Kernel Subsystem Analysis
1) Affected Subsystem:
cfg80211 Wi-Fi subsystem KUnit tests (net/wireless/tests/scan.c).

2) Pre-Patch Flaw:
In test_cfg80211_parse_colocated_ap(), the code performed:
“ies = kunit_kzalloc(test, struct_size(ies, data, input->len), GFP_KERNEL);
 ies->len = input->len;
 memcpy(ies->data, input->data, input->len);”
without validating ies is non-NULL, creating a direct NULL dereference path.

3) Trigger Condition:
kunit_kzalloc(test, ...) returns NULL (e.g., due to memory allocation failure under GFP_KERNEL within the KUnit environment), after which the function writes to ies->len and copies data into ies->data.

4) Impact Mechanism:
Dereferencing a NULL pointer in kernel context causes an immediate kernel crash/oops during KUnit test execution, resulting in denial of service of the test harness and potentially masking other test results.

5. Patch Analysis
1) Fix Approach:
Introduce a KUnit assertion to validate the allocation result before use, aborting the test case if ies is NULL rather than proceeding to dereference it.

2) Key Code Changes:
Added KUNIT_ASSERT_NOT_NULL(test, ies); immediately after the allocation line in test_cfg80211_parse_colocated_ap(). This directly guards subsequent accesses to ies->len and ies->data.

3) Locking/Concurrency Impact:
None. The issue and fix are purely about memory safety in a test function; no locking or concurrency changes are involved.

6. Broader Kernel Security Implications
While confined to test code, NULL dereferences in KUnit tests still execute in kernel context and can crash the kernel during test runs, impeding CI and validation workflows. The fix reinforces a general best practice: always validate allocations before use, especially for variable-sized buffers computed via struct_size(). Applying similar checks broadly helps prevent kernel crashes and improves robustness in both test and production paths.