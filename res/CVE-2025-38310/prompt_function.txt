1. CVE Identifier
CVE-2025-38310

2. Vulnerability Type
Improper input length validation leading to uninitialized memory read

3. Root Cause Summary
The netlink attribute policy for SRv6 local nexthop addresses (SEG6_LOCAL_NH4 and SEG6_LOCAL_NH6) validated that the payload length did not exceed the expected struct size, but did not require an exact match. This allowed user space to supply a shorter attribute that passed validation, while subsequent kernel code treated the payload as a full struct in_addr/in6_addr and read bytes that were never initialized. The patch corrects this by enforcing exact-length validation for these fixed-size attributes.

4. Kernel Subsystem Analysis
1) Affected Subsystem:
IPv6 Segment Routing (seg6) local actions netlink parsing (seg6_local_policy)

2) Pre-Patch Flaw:
seg6_local_policy used NLA_BINARY with .len = sizeof(struct in_addr) / sizeof(struct in6_addr), which only ensured attr payload length <= len, not == len. This mismatch permitted shorter-than-expected nexthop attributes to be accepted.

3) Trigger Condition:
A user space netlink message provides SEG6_LOCAL_NH4 or SEG6_LOCAL_NH6 with payload length smaller than sizeof(struct in_addr) or sizeof(struct in6_addr), respectively.

4) Impact Mechanism:
Kernel code subsequently interprets the attribute as a full fixed-size address and reads bytes beyond the initialized payload, resulting in reading uninitialized memory and potentially using undefined nexthop address data during SRv6 local processing.

5. Patch Analysis
1) Fix Approach:
Strengthen netlink attribute validation to require exact payload length for fixed-size nexthop addresses, preventing acceptance of undersized attributes.

2) Key Code Changes:
In seg6_local_policy:
- Replace “[SEG6_LOCAL_NH4] = { .type = NLA_BINARY, .len = sizeof(struct in_addr) }” with “[SEG6_LOCAL_NH4] = NLA_POLICY_EXACT_LEN(sizeof(struct in_addr))”.
- Replace “[SEG6_LOCAL_NH6] = { .type = NLA_BINARY, .len = sizeof(struct in6_addr) }” with “[SEG6_LOCAL_NH6] = NLA_POLICY_EXACT_LEN(sizeof(struct in6_addr))”.

3) Locking/Concurrency Impact:
None; the change is confined to netlink attribute validation and does not modify locking or execution ordering.

6. Broader Kernel Security Implications
Exact-length enforcement is critical when parsing fixed-size structures from user space; allowing shorter lengths can cause uninitialized reads and unpredictable behavior. This fix highlights a common pitfall in netlink policy definitions where “<= len” validation is insufficient for fixed-size types. Auditing other netlink policies for similar patterns can prevent subtle memory-safety issues and potential information leaks or logic corruptions across networking subsystems.