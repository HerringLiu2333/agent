1. CVE Identifier
CVE-2025-38308

2. Vulnerability Type
Null pointer dereference due to missing return-value validation

3. Root Cause Summary
avs_hw_constraints_init() obtained a path template via avs_dai_find_path_template() and passed it directly to avs_path_set_constraint() without verifying it was non-NULL. When the lookup failed (e.g., no matching topology/path for the given DAI/stream), the template pointer could be NULL, leading to a null-ptr-deref in avs_path_set_constraint(). Evidence: pre-patch code shows "template = avs_dai_find_path_template(...);" followed immediately by "ret = avs_path_set_constraint(..., template, ...);".

4. Kernel Subsystem Analysis
1) Affected Subsystem:
ALSA System on Chip (ASoC) Intel AVS driver

2) Pre-Patch Flaw:
Missing validation of avs_dai_find_path_template()â€™s return value in avs_hw_constraints_init(), combined with unsafe use of the result in avs_path_set_constraint(). The function also depended on rtd->dai_link->no_pcm when performing the lookup, but did not guard against the lookup failing.

3) Trigger Condition:
Initialization of HW constraints for a substream where avs_dai_find_path_template(dai, !rtd->dai_link->no_pcm, substream->stream) returns NULL (e.g., topology/path template absent or mismatch for the specified DAI/no_pcm/stream combination).

4) Impact Mechanism:
Passing a NULL template into avs_path_set_constraint() causes a null pointer dereference within that function or its callees, resulting in a kernel oops/panic and denial of service.

5. Patch Analysis
1) Fix Approach:
Eliminate the fragile runtime lookup and use a pre-associated, known-valid template (data->template) that is already available when avs_hw_constraints_init() is called. This removes the possibility of a NULL template and thereby the null-ptr-deref.

2) Key Code Changes:
- Removed local rtd variable and the call to avs_dai_find_path_template().
- Replaced "ret = avs_path_set_constraint(data->adev, template, r, c, s);" with "ret = avs_path_set_constraint(data->adev, data->template, r, c, s);".
- This ensures avs_path_set_constraint() receives a validated template pointer.

3) Locking/Concurrency Impact:
No locking or concurrency changes were introduced; the patch strictly alters parameter sourcing to avoid NULL usage.

6. Broader Kernel Security Implications
Using a pre-validated template removes a class of null pointer dereference crashes triggered by unexpected or malformed topology states, improving robustness against denial-of-service conditions. It reinforces a safer pattern of validating and binding critical objects earlier, reducing runtime error surfaces in audio driver initialization paths.