1. CVE Identifier
CVE-2025-38258

2. Vulnerability Type
Memory leak leading to kernel resource exhaustion (Denial of Service)

3. Root Cause Summary
memcg_path_store() allocated a new buffer for filter->memcg_path on each write but failed to free the previously allocated buffer, causing a persistent kernel memory leak. The missing deallocation of the old pointer resulted in lost references and unbounded accumulation of leaked memory upon repeated writes to the sysfs attribute.

4. Kernel Subsystem Analysis
1) Affected Subsystem:
mm/damon/sysfs-schemes (DAMOS sysfs interface), function: memcg_path_store()

2) Pre-Patch Flaw:
The function assigned a newly allocated buffer directly to filter->memcg_path (“filter->memcg_path = path;”) after strscpy() without freeing the old filter->memcg_path, resulting in leaked memory for each write.

3) Trigger Condition:
Repeated writes by users to the memcg_path DAMOS sysfs file, each providing a new path string that causes a fresh allocation.

4) Impact Mechanism:
Each write causes allocation of a new path string while the previously allocated buffer becomes unreachable (no kfree), leaking kernel memory; sustained writes can exhaust kernel memory and lead to system instability or denial of service.

5. Patch Analysis
1) Fix Approach:
Introduce proper lifetime management by freeing the previously stored buffer before overwriting the pointer, preventing memory leaks.

2) Key Code Changes:
Added “kfree(filter->memcg_path);” immediately before “filter->memcg_path = path;” in memcg_path_store(), ensuring the old buffer is deallocated prior to reassigning the pointer.

3) Locking/Concurrency Impact:
No locking or ordering changes are introduced; the patch exclusively adds a deallocation call. Concurrency behavior is not modified or determinable from the provided diff.

6. Broader Kernel Security Implications
Improper memory management in sysfs store paths can enable straightforward resource exhaustion attacks, potentially by low-complexity repeated writes. Ensuring all prior allocations are freed when replacing pointers is critical to prevent kernel memory leaks that can degrade system reliability or cause denial of service. This fix reinforces the need for robust memory lifetime handling in configuration interfaces like sysfs.