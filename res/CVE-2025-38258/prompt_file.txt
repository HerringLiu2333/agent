1. CVE Identifier
CVE-2025-38258

2. Vulnerability Type
Kernel memory leak leading to resource exhaustion/Denial of Service

3. Root Cause Summary
The memcg_path_store() sysfs attribute handler in the DAMON schemes subsystem allocates a new buffer for filter->memcg_path on each write but does not free any previously allocated buffer. Pre-patch, the function performed kmalloc_array() and strscpy(), then overwrote the pointer with “filter->memcg_path = path;” without deallocating the old memory. Repeated writes to the memcg_path file therefore leaked kernel memory until the kobject was released, accumulating unbounded allocations. This allows a user with permission to write the sysfs file to gradually exhaust kernel memory. The patch adds a missing kfree(filter->memcg_path) before assigning the new buffer, closing the leak.

4. Kernel Subsystem Analysis
1) Affected Subsystem:
mm/damon/sysfs-schemes (DAMON sysfs interface for schemes/filters), specifically damon_sysfs_scheme_filter and its memcg_path sysfs attribute.

2) Pre-Patch Flaw:
In memcg_path_store(), a newly allocated ‘path’ is assigned to filter->memcg_path without freeing the previously assigned buffer. Evidence: pre-patch code in FILE_CONTENT shows “filter->memcg_path = path;” with no prior kfree, while release-time free exists in damon_sysfs_scheme_filter_release().

3) Trigger Condition:
A user writes any data repeatedly to the sysfs file exposing the memcg_path attribute of a DAMOS filter (damon_sysfs_scheme_filter_memcg_path_attr). Each write allocates a new buffer and replaces the pointer, causing the previous allocation to be lost.

4) Impact Mechanism:
Each write leaks a kmalloc-allocated buffer in kernel memory. Over time, repeated writes can exhaust kernel memory, potentially leading to OOM conditions or degraded system stability (Denial of Service), since the leaked buffers are only reclaimed when the kobject is released.

5. Patch Analysis
1) Fix Approach:
Free the old memcg_path buffer before assigning the newly allocated one, ensuring proper ownership and preventing leaks on repeated writes.

2) Key Code Changes:
In memcg_path_store(): inserted “kfree(filter->memcg_path);” immediately before “filter->memcg_path = path;” (PATCH_DIFF hunk). No other logic changes were made.

3) Locking/Concurrency Impact:
No locking or ordering changes were introduced. The fix is a straightforward memory lifecycle correction in a sysfs store callback; existing sysfs write serialization applies, and damon_sysfs_lock is not involved in this path.

6. Broader Kernel Security Implications
Sysfs attribute handlers that replace internal pointers must free previously allocated buffers to avoid leaks; otherwise, privileged users can induce kernel memory exhaustion. This incident highlights the importance of rigorous memory lifecycle management in sysfs paths, especially for variable-length string attributes. Auditing similar store callbacks in DAMON and other subsystems for pointer replacement without prior deallocation can prevent comparable resource exhaustion vulnerabilities.