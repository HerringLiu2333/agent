1. CVE Identifier
CVE-2024-58093

2. Vulnerability Type
Use-after-free due to incorrect lifetime management of ASPM link state (dangling parent_link)

3. Root Cause Summary
The pre-patch logic in pcie_aspm_exit_link_state() freed the ASPM parent link state upon removal of any function on a multi-function device, not just function 0 (link->downstream). On PCIe switches where function 0 is the upstream port, this parent link remains referenced by subordinate link states. Freeing it early leaves subordinate links’ parent_link pointers dangling, leading to general protection faults during subsequent ASPM operations, especially under hot-unplug when pciehp removes non-0 functions first.

4. Kernel Subsystem Analysis
1) Affected Subsystem:
PCIe Active State Power Management (ASPM), drivers/pci/pcie/aspm.c

2) Pre-Patch Flaw:
pcie_aspm_exit_link_state() unconditionally tore down the link state (pcie_config_aspm_link(), list_del(), free_link_state()) on any function removal, based on the change in 456d8aa37d0f intended to avoid UAF when function 0 is removed. It failed to distinguish the special role of function 0 as link->downstream for switch upstream ports, where the parent link must remain valid until function 0 is removed.

3) Trigger Condition:
Removal of a non-0 function on a PCIe switch with a multi-function upstream port, particularly during hot-unplug sequences where pciehp removes devices in reverse order (non-0 functions first).

4) Impact Mechanism:
Early free of the parent link state causes subordinate link states to hold a parent_link pointer to freed memory. Subsequent ASPM path computations or operations (e.g., pcie_config_aspm_path(parent_link)) dereference this dangling pointer, resulting in general protection faults and potential use-after-free behavior in kernel space.

5. Patch Analysis
1) Fix Approach:
Gate the teardown of the ASPM link state so it occurs no earlier than removal of function 0. Specifically, only free the parent link when pdev == link->downstream, ensuring the parent link remains valid while subordinate links exist.

2) Key Code Changes:
- Added a conditional early exit:
  "if (pdev != link->downstream) goto out;"
  preventing link teardown for non-0 functions.
- Kept the teardown sequence (pcie_config_aspm_link(link, 0); list_del(&link->sibling); free_link_state(link);) only for function 0 removal.
- Updated comments to reflect the corrected lifetime semantics: free “no later than” function 0 removal and “not any earlier,” since the link state is parent_link to subordinate ones.

3) Locking/Concurrency Impact:
No changes to locking primitives; aspm_lock (mutex) and pci_bus_sem (read lock) are still held around the operation. The new goto out path ensures proper unlock without premature freeing, improving lifetime safety under concurrent/hot-unplug operations without altering lock order or scope.

6. Broader Kernel Security Implications
Corrects a kernel memory safety bug that could lead to crashes (GPFs) and potentially exploitable UAF scenarios during device removal, especially hot-unplug of PCIe switches. The fix strengthens ASPM link-state lifetime management for multi-function upstream ports, reducing risk from removal order dependencies. Ensuring proper teardown sequencing mitigates classes of bugs tied to dangling pointers in shared link structures, improving overall robustness of PCIe device management.