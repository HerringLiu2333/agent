1. CVE Identifier
CVE-2024-58093

2. Vulnerability Type
Use-after-free (dangling pointer dereference) due to premature object free/lifetime management error.

3. Root Cause Summary
In drivers/pci/pcie/aspm.c, pcie_aspm_exit_link_state() unconditionally freed the pcie_link_state of the upstream port on removal of any function of a multi-function upstream device. For PCIe switches with multi-function upstream ports, that upstream link state serves as parent_link for all subordinate link states. Freeing it when a non-zero function was removed left subordinate links’ link->parent pointers dangling, leading to GPFs/use-after-free on subsequent ASPM operations.

4. Kernel Subsystem Analysis
1) Affected Subsystem:
PCIe Active State Power Management (ASPM) in drivers/pci/pcie/aspm.c.

2) Pre-Patch Flaw:
pcie_aspm_exit_link_state() always executed:
- pcie_config_aspm_link(link, 0);
- list_del(&link->sibling);
- free_link_state(link);
regardless of which function on the upstream multi-function device was being removed. This ignored that link->downstream is function 0 and that the upstream link state can be a parent_link still referenced by subordinate ports.

3) Trigger Condition:
Hot-unplug or device removal that removes a non-zero function of a PCIe switch upstream port before function 0 (common with pciehp removing in reverse order). In such switches, function 0 is the virtual P2P bridge; removing any other function first freed the parent link state while subordinate links still existed.

4) Impact Mechanism:
Subordinate link states retain link->parent pointers to the freed upstream pcie_link_state. Subsequent ASPM path updates (e.g., pcie_update_aspm_capable(root), pcie_config_aspm_path(parent_link)) and general link traversals dereference the freed parent, causing GPFs/use-after-free.

5. Patch Analysis
1) Fix Approach:
Defer freeing the parent link state until function 0 (link->downstream) is removed. If a non-zero function is being removed, do not free the link state, thus preserving the parent for subordinate links.

2) Key Code Changes:
- In pcie_aspm_exit_link_state(), added a guard:
  if (pdev != link->downstream)
      goto out;
- Only when pdev == link->downstream do we disable ASPM, unlink, and free:
  pcie_config_aspm_link(link, 0);
  list_del(&link->sibling);
  free_link_state(link);
- Updated the function comment to: “Free the parent link state, no later than function 0 being removed. Do not free any earlier…”
- Added label “out:” before unlocking.

3) Locking/Concurrency Impact:
Locking remains unchanged (down_read(&pci_bus_sem) and mutex_lock(&aspm_lock)). The issue was not incorrect locking but incorrect lifetime management; the patch corrects the free timing to avoid dangling parent pointers under the same locks.

6. Broader Kernel Security Implications
Correct lifetime management of shared link state objects in multi-function upstream ports is critical to prevent UAFs during device removal and hot-unplug, improving kernel robustness. This fix eliminates a crash-prone path triggered by common hotplug ordering, reducing kernel panic/GPF risk. It also mitigates the potential for UAF-based exploitation in this subsystem by ensuring subordinate structures never hold references to freed parent link states.