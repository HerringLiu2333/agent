1. CVE Identifier
CVE-2024-58093

2. Vulnerability Type
Use-after-free due to premature teardown (lifetime/refcount bug)

3. Root Cause Summary
pcie_aspm_exit_link_state() unconditionally tore down and freed the PCIe ASPM link state for the parent bus on removal of any function of a multi-function upstream port, without verifying that the removed device was function 0 (link->downstream). On PCIe switches with multi-function upstream ports, subordinate downstream ports still referenced this parent link via their parent_link pointer. Freeing it early left those subordinate links holding a dangling pointer, leading to general protection faults during subsequent ASPM operations or hot-unplug sequences.

4. Kernel Subsystem Analysis
1) Affected Subsystem:
PCIe Active State Power Management (ASPM), drivers/pci/pcie/aspm.c

2) Pre-Patch Flaw:
- In pcie_aspm_exit_link_state(), the link state was always freed regardless of which function was being removed.
- Evidence: unconditional sequence:
  - "pcie_config_aspm_link(link, 0);"
  - "list_del(&link->sibling);"
  - "free_link_state(link);"
- This ignored that link->downstream designates function 0, the correct point to retire the parent link.

3) Trigger Condition:
- Removing a non-0 function of a multi-function PCIe switch upstream port (common in hot-unplug where pciehp removes devices in reverse order), while subordinate downstream ports still exist and retain parent_link references to the upstream link state.

4) Impact Mechanism:
- The early free makes parent_link in subordinate links point to freed memory (dangling pointer).
- Subsequent ASPM path/configuration or device removal operations dereference the stale parent_link, causing use-after-free and observed general protection faults (GPFs).

5. Patch Analysis
1) Fix Approach:
- Gate link-state teardown so it occurs no earlier than removal of function 0 (link->downstream).
- For non-0 function removals, skip freeing the parent link state to preserve validity for remaining subordinate links.

2) Key Code Changes:
- Added conditional check and early exit:
  - "if (pdev != link->downstream) goto out;"
- Restricted teardown (pcie_config_aspm_link(), list_del(), free_link_state()) to the case where pdev == link->downstream.
- Updated comment to emphasize correct timing: “Free the parent link state, no later than function 0 … Do not free … earlier.”

3) Locking/Concurrency Impact:
- No changes to locking; existing down_read(&pci_bus_sem) and mutex_lock(&aspm_lock) remain.
- The fix is purely logical: it avoids premature free under the existing lock regime, preventing dangling references while other functions/ports are still present.

6. Broader Kernel Security Implications
- Correct lifetime management of shared link-state structures across multi-function devices prevents kernel crashes during hot-plug/unplug and device removal sequences.
- Eliminates a path for non-privileged device operations (e.g., hot-unplug via pciehp) to induce kernel GPFs via UAF conditions in ASPM.
- Highlights the importance of tying teardown to the canonical function (function 0) on multi-function devices to maintain invariants for subordinate structures.