1. CVE Identifier
CVE-2025-38489

2. Vulnerability Type
Race condition leading to invalid control-flow (NULL branch target) and kernel crash

3. Root Cause Summary
During dynamic text patching for BPF on s390, bpf_jit_plt initialized PLT entries with plt->target = target even when target was NULL, which signifies that the branch was patched into a no-op. CPUs that had already branched to the PLT entry before the patch could still execute it and attempt to branch to a NULL target, causing intermittent kernel panics. The pre-patch code lacked a safeguard to redirect such in-flight PLT execution to a safe return path when target == NULL.

4. Kernel Subsystem Analysis
1) Affected Subsystem:
s390 architecture BPF JIT/text patching (bpf_arch_text_poke, PLT entries), specifically function bpf_jit_plt in arch/s390 BPF code.

2) Pre-Patch Flaw:
bpf_jit_plt assigned plt->target = target unconditionally (see FUNCTION_CONTENT), without handling target == NULL which represents a no-op after patching. This allowed a PLT entry to contain a NULL branch target during the window where CPUs might still execute it.

3) Trigger Condition:
When bpf_arch_text_poke() is invoked with new_addr == NULL to turn a branch into a no-op, and a CPU has already branched to the corresponding PLT entry prior to the patch completing. The PLT entry, having plt->target == NULL, is then executed by that CPU.

4) Impact Mechanism:
Execution of a PLT entry with a NULL target causes a branch to address NULL, leading to a fault and intermittent kernel panics (as reported for perf's on_switch() BPF program). This is a denial-of-service via crash rather than memory corruption.

5. Patch Analysis
1) Fix Approach:
Restore the prior fix ensuring PLT entries become safe no-ops under concurrent execution by redirecting NULL targets to the return label. Specifically, treat a NULL target as ret to avoid branching to NULL.

2) Key Code Changes:
In bpf_jit_plt:
- Changed from: plt->target = target;
- To: plt->target = target ?: ret;
Added a clarifying comment explaining that (target == NULL) means the branch was patched to a no-op, and to handle CPUs still executing the PLT entry by pointing target to the return label.

3) Locking/Concurrency Impact:
No locks were added or modified. The change removes the race hazard by making the PLT entry itself safe under concurrent execution paths, ensuring that even if a CPU reaches the PLT entry during patching, it will branch to ret (a no-op) instead of NULL.

6. Broader Kernel Security Implications
Ensuring safe behavior during dynamic text patching hardens the BPF JIT against transient execution races that can crash the kernel, reducing denial-of-service risk. It improves reliability of runtime patching mechanisms (e.g., perf and BPF program switching) and prevents invalid control-flow targets that could otherwise lead to system instability. While not a memory safety bug, this fix addresses a critical stability and availability concern in a frequently exercised subsystem.