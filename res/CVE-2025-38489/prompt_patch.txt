1. CVE Identifier
CVE-2025-38489

2. Vulnerability Type
Race-induced NULL indirect branch (invalid jump target) during runtime text patching

3. Root Cause Summary
The s390 eBPF JIT PLT generation routine set plt->target directly to the provided target, including when target == NULL (new_addr == NULL case during bpf_arch_text_poke). If a CPU had already branched to the PLT entry just before the branch site was patched into a no-op, it could still execute the PLT entry whose target was NULL, causing a jump to address 0 and a kernel panic. The patch restores the intended behavior: when target is NULL, set plt->target to the return label (ret), making the PLT entry a safe no-op for in-flight executions.

4. Kernel Subsystem Analysis
1) Affected Subsystem:
- Architecture-specific eBPF JIT for s390 (bpf_plt handling in arch s390)

2) Pre-Patch Flaw:
- In bpf_jit_plt(), the code assigned plt->target = target unconditionally.
- When bpf_arch_text_poke() used new_addr == NULL (intending to neutralize the branch), the PLT entry could be initialized with target == NULL, leaving an invalid branch target if executed concurrently.

3) Trigger Condition:
- A branch to a PLT entry was patched (via bpf_arch_text_poke) to become a no-op (new_addr == NULL), while another CPU had already fetched/was executing the jump to that PLT entry.
- Reported to occur intermittently with perf’s on_switch() BPF program.

4) Impact Mechanism:
- Execution of the PLT entry with plt->target == NULL causes an indirect branch to a NULL address, triggering a page fault and kernel panic (DoS).

5. Patch Analysis
1) Fix Approach:
- Defensive redirection: when target is NULL, point the PLT entry’s target to the return label (ret) so that executing the PLT entry effectively becomes a no-op and safely returns.

2) Key Code Changes:
- In bpf_jit_plt(struct bpf_plt *plt, void *ret, void *target):
  - Changed from: plt->target = target;
  - To: plt->target = target ?: ret;
  - Added a comment explaining the concurrent execution window and the rationale for redirecting to ret when target == NULL.

3) Locking/Concurrency Impact:
- No new locks or ordering changes; the fix eliminates the hazard by making the PLT entry safe under concurrent execution.
- It closes the race window’s impact by ensuring in-flight execution of a soon-to-be-no-op branch cannot jump to NULL; instead it returns via ret.

6. Broader Kernel Security Implications
- Highlights the need for concurrency-safe text patching and PLT/trampoline designs that remain valid under concurrent execution, especially in JITed code paths.
- Prevents kernel panics and potential denial-of-service scenarios when BPF programs are dynamically patched/unloaded.
- Reinforces best practices: when neutralizing call sites, ensure residual stubs are safe if executed speculatively or concurrently.