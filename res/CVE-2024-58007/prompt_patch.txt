1. CVE Identifier
CVE-2024-58007

2. Vulnerability Type
Out-of-bounds read leading to information disclosure via sysfs

3. Root Cause Summary
The driver’s bounds check only verified that the start offset of the serial_num field was within the SMEM item size, not that the entire field (including its size) was contained. Specifically, it used “offsetof(struct socinfo, serial_num) <= item_size” instead of checking the end of the field. On platforms where the socinfo version does not include serial_num (e.g., SOCINFO_VERSION(0, 8)), this erroneous check allowed reading beyond the socinfo SMEM item, causing an out-of-bounds read and exposing whatever data followed as a fake serial number.

4. Kernel Subsystem Analysis
1) Affected Subsystem:
Qualcomm SoC information driver (drivers/soc/qcom/socinfo.c), function qcom_socinfo_probe

2) Pre-Patch Flaw:
In qcom_socinfo_probe, the code gated exposure of serial_number using “if (offsetof(struct socinfo, serial_num) <= item_size)”, which only ensured the field’s start offset was within bounds. It then read “info->serial_num” and exposed it through sysfs, even on socinfo versions where serial_num is not present, leading to an out-of-bounds read from the mapped SMEM region.

3) Trigger Condition:
Devices with SMEM-provided socinfo structures that lack the serial_num field (e.g., MSM8916 with SOCINFO_VERSION(0, 8)), where item_size is at least the start offset of serial_num but smaller than the end of the field. When qcom_socinfo_probe executes, the incorrect check passes and the code reads info->serial_num despite the field not being valid.

4) Impact Mechanism:
Out-of-bounds read from the SMEM item backing socinfo, returning data from beyond the struct boundary. The read value is formatted and published to userspace via the sysfs “serial_number” attribute, causing information disclosure of adjacent SMEM contents.

5. Patch Analysis
1) Fix Approach:
Strengthened the bounds check to ensure the entire serial_num field lies within the SMEM item, by replacing offsetof() with offsetofend().

2) Key Code Changes:
In qcom_socinfo_probe:
- Changed:
  “if (offsetof(struct socinfo, serial_num) <= item_size) {”
  to:
  “if (offsetofend(struct socinfo, serial_num) <= item_size) {”
This ensures the end of the serial_num field is within item_size before accessing info->serial_num.

3) Locking/Concurrency Impact:
None. The patch only adjusts a bounds check; no locking, RCU, or ordering changes are involved.

6. Broader Kernel Security Implications
This fix prevents unintended leakage of data from shared memory regions to userspace, reinforcing strict structure-version-aware bounds validation. It highlights the importance of validating the full extent of fields sourced from firmware-defined structures to avoid OOB reads. Applying similar end-of-field checks across drivers interfacing with variable-format firmware data reduces the risk of info leaks and memory safety violations.