1. CVE Identifier
CVE-2025-38299

2. Vulnerability Type
NULL pointer dereference (unsafe pointer use / missing validation)

3. Root Cause Summary
The machine driver registered ETDM2_IN_BE and ETDM1_OUT_BE codec components with COMP_EMPTY(), which yields a dai_link with num_codecs > 0 but a NULL codecs->dai_name. The probe logic subsequently calls strcmp on dai_link->codecs->dai_name without NULL checks, causing a NULL pointer dereference when the device tree does not bind a real codec to these links. The patch replaces COMP_EMPTY() with COMP_DUMMY(), ensuring a valid dummy dai_name ("snd-soc-dummy-dai") and preventing the unsafe strcmp.

4. Kernel Subsystem Analysis
1) Affected Subsystem:
ALSA SoC (ASoC) MediaTek MT8195 machine driver (mt8195-mt6359.c), DAI link registration and probe paths.

2) Pre-Patch Flaw:
- In SND_SOC_DAILINK_DEFS for ETDM2_IN_BE and ETDM1_OUT_BE, the codec component was defined as COMP_EMPTY() (see [PATCH_DIFF] removal lines).
- The probe path mt8195_mt6359_soc_card_probe iterates prelinks and performs string comparisons on dai_link->codecs->dai_name for ETDMx links (e.g., “if (!strcmp(dai_link->codecs->dai_name, RT1011_CODEC_DAI)) … else { if (strcmp(dai_link->codecs->dai_name, "snd-soc-dummy-dai")) … }” in [FILE_CONTENT]).
- With COMP_EMPTY(), num_codecs remains non-zero but dai_name is NULL, and the code assumes it is a valid string, leading to an unsafe strcmp() call.

3) Trigger Condition:
A device tree that does not assign a codec to ETDM2_IN_BE or ETDM1_OUT_BE. During deferred probe, mt8195_mt6359_soc_card_probe executes and reaches the ETDMx handling block, performing strcmp on a NULL dai_name.

4) Impact Mechanism:
Kernel oops due to NULL pointer dereference in strcmp. The crash log confirms __pi_strcmp+0x24/0x140 invoked from mt8195_mt6359_soc_card_probe and a NULL x0 (dai_name) at address 0x0, resulting in a denial of service during device probing.

5. Patch Analysis
1) Fix Approach:
Initialize the affected DAI links with a dummy codec component (COMP_DUMMY()) instead of an empty component, guaranteeing a non-NULL dai_name ("snd-soc-dummy-dai"). This aligns with the probe logic, which explicitly checks for the dummy dai to skip further initialization, thereby avoiding NULL dereferences.

2) Key Code Changes:
- In SND_SOC_DAILINK_DEFS(ETDM2_IN_BE): DAILINK_COMP_ARRAY(COMP_EMPTY()) -> DAILINK_COMP_ARRAY(COMP_DUMMY()).
- In SND_SOC_DAILINK_DEFS(ETDM1_OUT_BE): DAILINK_COMP_ARRAY(COMP_EMPTY()) -> DAILINK_COMP_ARRAY(COMP_DUMMY()).
These changes are shown in [PATCH_DIFF] and reflected in the corresponding SND_SOC_DAILINK_DEFS blocks in [FILE_CONTENT].

3) Locking/Concurrency Impact:
None. The patch only changes static DAI link component initialization; it does not alter locking, ordering, or concurrency primitives.

6. Broader Kernel Security Implications
This issue highlights the risk of using COMP_EMPTY() when downstream code assumes non-NULL dai_name for selection and init logic. Using COMP_DUMMY() as a safe default or adding NULL checks before strcmp mitigates boot-time crashes from misconfigured or partial device trees. Consistent pointer validation in ASoC machine drivers prevents similar NULL dereferences and improves robustness against configuration variations and deferred probe timing.