1. CVE Identifier
CVE-2024-58009

2. Vulnerability Type
NULL pointer dereference leading to kernel crash (Denial of Service)

3. Root Cause Summary
The error path in l2cap_sock_alloc unconditionally dereferenced the socket pointer to clear sock->sk when channel creation failed, even when the function can be invoked with a NULL socket pointer (from l2cap_sock_new_connection_cb). Specifically, after l2cap_chan_create() returned NULL, the code executed “sock->sk = NULL;” without checking if sock was NULL. This missing NULL check caused a NULL pointer dereference in the kernel on the error path.

4. Kernel Subsystem Analysis
1) Affected Subsystem:
Bluetooth L2CAP socket layer (net/bluetooth/l2cap_sock.c)

2) Pre-Patch Flaw:
In l2cap_sock_alloc, the failure branch after l2cap_chan_create() returned NULL always executed “sock->sk = NULL;” without verifying that sock was non-NULL, unlike sock_init_data() which correctly guards use of sock.

3) Trigger Condition:
l2cap_sock_alloc is called with a NULL socket pointer (from l2cap_sock_new_connection_cb), and l2cap_chan_create() fails (e.g., allocation or initialization failure), leading execution into the error path that dereferences sock.

4) Impact Mechanism:
The unconditional dereference of a NULL socket pointer (“sock->sk = NULL;”) results in a kernel NULL pointer dereference, causing an oops/panic and thus a denial of service.

5. Patch Analysis
1) Fix Approach:
Introduce a NULL check before accessing sock in the error path to safely handle calls where sock is NULL.

2) Key Code Changes:
In l2cap_sock_alloc:
- Changed “sock->sk = NULL;” to “if (sock) sock->sk = NULL;” within the branch handling l2cap_chan_create() failure. This ensures error cleanup does not dereference a NULL pointer.

3) Locking/Concurrency Impact:
No locking or ordering changes. The patch deliberately avoids reordering bt_sock_alloc and l2cap_chan_create due to side effects (adding a dummy channel to a global list), focusing solely on safe NULL handling; thus, no concurrency implications are introduced.

6. Broader Kernel Security Implications
Strengthens kernel robustness in Bluetooth L2CAP error handling by preventing a straightforward kernel crash path triggered by NULL socket contexts. Reduces attack surface for denial-of-service conditions that could be induced by resource exhaustion or malformed connection scenarios reaching the channel creation failure path. Improves consistency with existing safe patterns (e.g., sock_init_data’s NULL guard) and enhances overall stability of the Bluetooth stack.