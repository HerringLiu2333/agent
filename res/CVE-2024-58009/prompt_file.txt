1. CVE Identifier
CVE-2024-58009

2. Vulnerability Type
NULL pointer dereference leading to kernel crash/denial-of-service

3. Root Cause Summary
In net/bluetooth/l2cap_sock.c, l2cap_sock_alloc() unconditionally wrote to sock->sk in its error path when l2cap_chan_create() failed. However, l2cap_sock_alloc() is invoked with a NULL struct socket pointer from l2cap_sock_new_connection_cb(), so the assignment sock->sk = NULL dereferenced a NULL pointer. The missing NULL check on the sock parameter in this failure path is the direct root cause of the NULL pointer dereference.

4. Kernel Subsystem Analysis
1) Affected Subsystem:
Bluetooth L2CAP socket layer (net/bluetooth/l2cap_sock.c)

2) Pre-Patch Flaw:
l2cap_sock_alloc() performed “sock->sk = NULL” after sk_free(sk) when l2cap_chan_create() returned NULL, without verifying whether the sock parameter itself was non-NULL. This is incorrect because l2cap_sock_new_connection_cb() calls l2cap_sock_alloc(sock_net(parent), NULL, ...) explicitly passing NULL for the socket, meaning the error path could dereference a NULL sock.

3) Trigger Condition:
During new incoming L2CAP connection handling via l2cap_sock_new_connection_cb(), l2cap_sock_alloc() is called with sock == NULL. If l2cap_chan_create() fails (e.g., due to allocation failure or other channel creation errors), the error path attempts to clear sock->sk without checking sock, triggering a NULL pointer dereference.

4) Impact Mechanism:
The unconditional “sock->sk = NULL” access on a NULL sock pointer causes a kernel NULL pointer dereference and oops, crashing the kernel thread handling the connection, resulting in denial-of-service. Given this occurs in the L2CAP connection path, it can be externally triggered by connection attempts under conditions that make l2cap_chan_create() fail.

5. Patch Analysis
1) Fix Approach:
Add a NULL check around the error-path assignment to sock->sk, ensuring the error handling is safe when sock is NULL.

2) Key Code Changes:
In l2cap_sock_alloc():
- Original:
  sk_free(sk);
  sock->sk = NULL;
- Patched:
  sk_free(sk);
  if (sock)
      sock->sk = NULL;
This change is localized to the failure path after l2cap_chan_create() returns NULL.

3) Locking/Concurrency Impact:
No locking or ordering changes were made. The patch strictly adds a defensive NULL check in the error path, without altering synchronization or lifetime management semantics.

6. Broader Kernel Security Implications
This fix hardens error handling in the Bluetooth L2CAP socket layer by ensuring code paths support the valid use case of passing a NULL struct socket during child socket allocation. It reduces the risk of externally-triggerable kernel crashes in connection handling paths, improving robustness against denial-of-service scenarios due to resource exhaustion or channel creation failures. More broadly, it underscores the importance of consistent NULL pointer validation in kernel error paths, particularly in network protocol stacks where allocation failures can be induced by external inputs.