1. CVE Identifier
CVE-2025-38274

2. Vulnerability Type
NULL pointer dereference due to unchecked allocation failure

3. Root Cause Summary
The function fpga_mgr_test_img_load_sgt() allocated a struct sg_table with kunit_kzalloc() but did not check for allocation failure. It then passed the possibly-NULL sgt to sg_alloc_table(), which (via __sg_alloc_table()) performs a memset() on the provided table pointer, dereferencing NULL and crashing the kernel when sgt is NULL.

4. Kernel Subsystem Analysis
1) Affected Subsystem:
FPGA manager KUnit tests (fpga test code using scatter-gather tables)

2) Pre-Patch Flaw:
Missing validation of the kunit_kzalloc() return value for sgt; the code immediately invoked sg_alloc_table(sgt, ...) without ensuring sgt was non-NULL.

3) Trigger Condition:
Memory allocation failure in kunit_kzalloc(test, sizeof(*sgt), GFP_KERNEL), e.g., due to low memory or fault injection during test execution.

4) Impact Mechanism:
Passing NULL to sg_alloc_table() leads to __sg_alloc_table() calling memset() on a NULL pointer, causing a kernel NULL pointer dereference and test-induced kernel crash (DoS).

5. Patch Analysis
1) Fix Approach:
Introduce an explicit allocation check using KUNIT_ASSERT_NOT_ERR_OR_NULL(test, sgt) to abort the test when sgt allocation fails, preventing the subsequent call to sg_alloc_table() with a NULL pointer.

2) Key Code Changes:
Added one assertion immediately after allocation:
- sgt = kunit_kzalloc(test, sizeof(*sgt), GFP_KERNEL);
- KUNIT_ASSERT_NOT_ERR_OR_NULL(test, sgt);
This enforces non-NULL sgt before sg_alloc_table(sgt, 1, GFP_KERNEL).

3) Locking/Concurrency Impact:
None. The change is purely an allocation check in a KUnit test; no locks or concurrency control were added or modified.

6. Broader Kernel Security Implications
Unchecked allocations in kernel code (including tests) can escalate to kernel crashes when core helpers assume valid pointers. Ensuring allocation results are validated before passing to APIs like sg_alloc_table() reduces denial-of-service risk under memory pressure or fault injection. This patch reinforces defensive programming practices in tests that run in kernel context, preventing test-induced kernel faults and improving robustness of the FPGA subsystemâ€™s test coverage.