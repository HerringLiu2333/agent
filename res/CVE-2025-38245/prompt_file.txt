1. CVE Identifier
CVE-2025-38245

2. Vulnerability Type
Race condition / improper locking (TOCTOU) causing duplicate procfs/sysfs entries

3. Root Cause Summary
atm_dev_deregister() dropped atm_dev_mutex immediately after removing the device from the atm_devs list, but before removing its procfs/sysfs entries. Meanwhile, atm_dev_register() performs duplicate-number checks with __atm_dev_lookup() under atm_dev_mutex and then creates procfs/sysfs before adding the new device to the list. This mismatch created a race window where a deregistering device was no longer visible in the list (so registration deemed the number free) while its procfs/sysfs entries still existed, leading to a duplicate procfs registration and a kernel warning.

4. Kernel Subsystem Analysis
1) Affected Subsystem:
- net/atm device registration/deregistration (net/atm/resources.c), procfs/sysfs integration for ATM devices.

2) Pre-Patch Flaw:
- In atm_dev_deregister(), the code sequence was:
  - mutex_lock(&atm_dev_mutex); list_del(&dev->dev_list); mutex_unlock(&atm_dev_mutex);
  - atm_dev_release_vccs(dev); atm_unregister_sysfs(dev); atm_proc_dev_deregister(dev);
- This released the global atm_dev_mutex too early, making the device invisible to __atm_dev_lookup() while its procfs/sysfs still existed.

3) Trigger Condition:
- Concurrent deregistration of an ATM device and registration of a new ATM device with the same number/name (e.g., atmtcp:0).
- atm_dev_register(), under atm_dev_mutex, finds no duplicate in the list and proceeds to atm_proc_dev_register(), while the old device’s procfs entry has not yet been removed.

4) Impact Mechanism:
- Duplicate procfs registration attempt triggers a WARN in proc_register (“proc_dir_entry 'atm/atmtcp:0' already registered”), as evidenced by the syzbot trace.
- Results in inconsistent device namespace state and potential denial-of-service via repeated warnings and failed registrations.

5. Patch Analysis
1) Fix Approach:
- Serialize device list removal with procfs/sysfs teardown by holding atm_dev_mutex until after atm_dev_release_vccs(), atm_unregister_sysfs(), and atm_proc_dev_deregister() complete.
- This removes the race window between visibility in the device list and the lifetime of procfs/sysfs entries.

2) Key Code Changes:
- Removed the early mutex_unlock(&atm_dev_mutex) immediately after list_del(&dev->dev_list).
- Deferred unlocking until after:
  - atm_dev_release_vccs(dev);
  - atm_unregister_sysfs(dev);
  - atm_proc_dev_deregister(dev);
- Hunk context:
  - Pre-patch: unlock occurred right after list_del.
  - Post-patch: unlock is held through procfs/sysfs removal (patch description), closing the TOCTOU gap.

3) Locking/Concurrency Impact:
- atm_dev_mutex now consistently protects both the device list state and the presence/absence of procfs/sysfs entries during deregistration.
- Eliminates the race with atm_dev_register()’s duplicate check by ensuring that as long as a device’s procfs/sysfs entries exist, the device remains “protected” by the mutex and cannot be replaced by a new device using the same number.
- Aligns lifetime/visibility ordering: registration creates procfs/sysfs while holding the mutex; deregistration removes them while still holding the mutex.

6. Broader Kernel Security Implications
- Demonstrates the importance of coupling object visibility (list membership) with external namespace lifecycle (procfs/sysfs) under the same lock to avoid TOCTOU races.
- Similar device subsystems should ensure that deregistration keeps global locks held until all externally visible artifacts are removed to prevent duplicate registrations and warnings, which can be turned into DoS in hardened systems (e.g., panic on WARN).
- Encourages careful audit of registration/deregistration ordering across subsystems that expose procfs/sysfs entries tied to list-managed objects.