1. CVE Identifier
CVE-2025-38318

2. Vulnerability Type
NULL pointer dereference due to missing driver data initialization (lifecycle management bug)

3. Root Cause Summary
arm_ni_probe() failed to call platform_set_drvdata(pdev, ni) after allocating and initializing the driver’s private data (struct arm_ni). Consequently, arm_ni_remove() calls platform_get_drvdata(pdev) and receives NULL, then immediately dereferences ni->num_cds, leading to a NULL pointer dereference. The probe error path explicitly calls arm_ni_remove(pdev) before drvdata is set, guaranteeing the crash on initialization failure.

4. Kernel Subsystem Analysis
1) Affected Subsystem:
perf PMU driver for Arm NI-700 (drivers/perf, “arm-ni” platform driver)

2) Pre-Patch Flaw:
- arm_ni_probe() did not associate the allocated struct arm_ni with the platform device via platform_set_drvdata().
- arm_ni_remove() assumes a valid drvdata: “struct arm_ni *ni = platform_get_drvdata(pdev); for (int i = 0; i < ni->num_cds; i++) { … }” with no NULL check.

3) Trigger Condition:
- Unbinding/removing the device or unloading the module after probe completes without setting drvdata.
- Probe’s error path in arm_ni_probe(): upon arm_ni_init_cd() failure, it executes arm_ni_remove(pdev) before drvdata is set.

4) Impact Mechanism:
- platform_get_drvdata(pdev) returns NULL in arm_ni_remove(), and dereferencing ni (e.g., ni->num_cds) causes a kernel Oops/panic, resulting in denial of service.

5. Patch Analysis
1) Fix Approach:
- Associate the driver’s private data with the platform device in probe using platform_set_drvdata(pdev, ni) to ensure remove obtains a valid pointer.

2) Key Code Changes:
- In arm_ni_probe(), immediately after initializing ni fields (num_cds, part, id), the patch adds:
  platform_set_drvdata(pdev, ni);
- This is the sole functional change in the hunk (PATCH_DIFF shows a 1-line addition at the end of the initial ni setup).

3) Locking/Concurrency Impact:
- None. The change corrects driver-data lifetime association; no locks or ordering were modified.

6. Broader Kernel Security Implications
Correct probe/remove pairing and early drvdata registration are essential to avoid crash-on-unbind or crash-on-error paths in platform drivers. Similar omissions can allow local denial-of-service via device unbind or forced probe failures. Ensuring proper resource and lifetime management improves robustness of PMU and other platform drivers, preventing NULL dereferences during cleanup.