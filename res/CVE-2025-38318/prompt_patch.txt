1. CVE Identifier
CVE-2025-38318

2. Vulnerability Type
NULL pointer dereference in device remove/unbind path due to missing driver data association

3. Root Cause Summary
The arm-ni perf driver failed to associate its per-device state (struct ni) with the platform_device during probe. Specifically, arm_ni_probe() initialized ni but did not call platform_set_drvdata(pdev, ni). As a result, the remove path’s platform_get_drvdata() returned NULL, leading to a NULL dereference or incomplete cleanup.

4. Kernel Subsystem Analysis
1) Affected Subsystem:
Linux perf subsystem, ARM NI (arm-ni) platform driver

2) Pre-Patch Flaw:
arm_ni_probe() allocated/initialized ni (setting ni->num_cds, ni->part, ni->id via atomic_fetch_inc(&id)) but omitted platform_set_drvdata(), leaving no reference to ni attached to the platform device.

3) Trigger Condition:
Invoking the driver’s remove/unbind path (e.g., device hot-unplug, driver unbind, or module unload) which calls platform_get_drvdata() expecting a valid ni pointer.

4) Impact Mechanism:
platform_get_drvdata() returns NULL and the remove routine, which expects a valid ni, may dereference it, causing a kernel oops/panic (DoS); at minimum, proper resource teardown cannot occur, risking leaks or inconsistent state.

5. Patch Analysis
1) Fix Approach:
Bind the driver’s private data to the platform_device during probe by calling platform_set_drvdata(pdev, ni) after ni is initialized.

2) Key Code Changes:
In arm_ni_probe(), immediately after setting ni->num_cds, ni->part, and ni->id = atomic_fetch_inc(&id), the patch adds:
- platform_set_drvdata(pdev, ni);
This ensures subsequent platform_get_drvdata() calls in remove return the correct ni.

3) Locking/Concurrency Impact:
No locking or concurrency changes; the fix is a one-time association established in probe and consumed in remove, preserving existing ordering and atomicity semantics.

6. Broader Kernel Security Implications
Cleanup-path bugs from missing platform_set_drvdata() can convert routine unbind/remove operations into kernel crashes, undermining system stability. This pattern highlights the need for consistent driver data registration in probe to ensure safe teardown. While typically triggered by privileged operations, such faults can still lead to denial-of-service conditions during device hotplug events or driver lifecycle management.