1. CVE Identifier
CVE-2024-58004

2. Vulnerability Type
Use-after-free leading to linked-list corruption (lifetime/cleanup bug)

3. Root Cause Summary
The driver added a CPU latency PM QoS request during probe but failed to remove it on error paths before freeing the associated memory. In isys_probe(), cpu_latency_qos_add_request(&isys->pm_qos, PM_QOS_DEFAULT_VALUE) registers isys->pm_qos in a global plist, yet no cpu_latency_qos_remove_request() was called when probe failed and the isys structure and its fields were torn down. This left a dangling plist node pointing to freed memory, corrupting the PM QoS request list when subsequent QoS operations occurred.

4. Kernel Subsystem Analysis
1) Affected Subsystem:
media: intel/ipu6 Input System (ipu6-isys), interacting with PM QoS (CPU latency QoS)

2) Pre-Patch Flaw:
isys_probe() added a PM QoS request but did not remove it on failure paths (labels free_fw_msg_bufs and out_remove_pkg_dir_shared_buffer). The original code included "cpu_latency_qos_add_request(&isys->pm_qos, PM_QOS_DEFAULT_VALUE);" without a corresponding remove during cleanup.

3) Trigger Condition:
Any probe failure occurring after cpu_latency_qos_add_request(), such as alloc_fw_msg_bufs(isys, 20) returning <0 (goto out_remove_pkg_dir_shared_buffer) or isys_register_devices(isys) failing (goto free_fw_msg_bufs), causes the function to unwind and free related resources while leaving the PM QoS request registered.

4) Impact Mechanism:
The global PM QoS plist contained a node (isys->pm_qos) whose backing memory was freed, leading to list corruption when other components (e.g., i915 calling cpu_latency_qos_update_request) manipulate the list. This manifested as list_add corruption warnings in list_debug (__list_add_valid_or_report), indicating a dangling next pointer and potential kernel instability.

5. Patch Analysis
1) Fix Approach:
Ensure proper lifetime management by removing the CPU latency QoS request on error paths before freeing resources, preventing dangling list entries.

2) Key Code Changes:
Added a call to cpu_latency_qos_remove_request(&isys->pm_qos) at the out_remove_pkg_dir_shared_buffer cleanup label in isys_probe(), ensuring the previously added request is deregistered during probe failure unwinding.

3) Locking/Concurrency Impact:
No explicit locking changes; PM QoS APIs handle internal synchronization. The fix addresses object lifetime consistency rather than lock ordering.

6. Broader Kernel Security Implications
Improper cleanup of globally linked resources (like PM QoS requests) can corrupt shared kernel data structures, potentially leading to crashes, undefined behavior, or avenues for exploitation via memory corruption. This highlights the need for drivers to strictly pair resource registration with deregistration across all error paths, especially for global subsystems used by multiple drivers.