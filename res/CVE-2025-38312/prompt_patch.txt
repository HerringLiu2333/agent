1. CVE Identifier
CVE-2025-38312

2. Vulnerability Type
Integer overflow leading to division-by-zero (kernel crash/DoS)

3. Root Cause Summary
fb_find_mode_cvt() failed to validate that cvt.f_refresh was within a safe range before later doubling it for interlaced modes, allowing an overflow to zero that is subsequently used as a divisor in fb_cvt_hperiod(), causing a division-by-zero and kernel oops. Pre-patch input validation only checked for zero dimensions and zero refresh but did not bound f_refresh against values that would overflow when multiplied.

4. Kernel Subsystem Analysis
1) Affected Subsystem:
fbdev core (fbcvt – Coordinated Video Timings)

2) Pre-Patch Flaw:
In fb_find_mode_cvt(), cvt.f_refresh is set from cvt.refresh and interlace is enabled; the code only validated “!cvt.xres || !cvt.yres || !cvt.refresh” and lacked an upper bound check on f_refresh. When interlaced handling doubles f_refresh, large values (e.g., 0x80000000) overflow to zero, which is then passed to fb_cvt_hperiod() as a divider.

3) Trigger Condition:
Calling fb_find_mode_cvt() with mode->refresh set to a value that causes overflow when doubled (e.g., 0x80000000), making cvt.f_refresh wrap to 0 before being used by fb_cvt_hperiod().

4) Impact Mechanism:
A zero f_refresh value is used as a divisor inside fb_cvt_hperiod(), triggering a division-by-zero that leads to a kernel oops/panic (denial of service).

5. Patch Analysis
1) Fix Approach:
Introduce a sanity check to reject unsafe f_refresh values before any arithmetic that could overflow, preventing zero from reaching fb_cvt_hperiod() as a divisor.

2) Key Code Changes:
In fb_find_mode_cvt(), the validation condition was expanded from:
“if (!cvt.xres || !cvt.yres || !cvt.refresh)”
to:
“if (!cvt.xres || !cvt.yres || !cvt.refresh || cvt.f_refresh > INT_MAX)”
This prevents proceeding when f_refresh exceeds INT_MAX and would overflow upon doubling.

3) Locking/Concurrency Impact:
None. The change is limited to input validation; no locking or ordering adjustments were made.

6. Broader Kernel Security Implications
Strengthening arithmetic bounds checks in display timing computations reduces the risk of kernel crashes from malformed or extreme mode parameters. This fix addresses a class of integer-overflow-to-divide-by-zero issues in fbdev’s CVT path, improving robustness against erroneous or potentially malicious inputs detected by static analysis tools.